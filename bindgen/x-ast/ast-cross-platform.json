{
  "platforms": [
    "aarch64-apple-darwin",
    "x86_64-apple-darwin"
  ],
  "macroObjects": {
    "EcsTableIsPrefab": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "ECS_INCONSISTENT_COMPONENT_ACTION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "27"
    },
    "EcsIdEventMask": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "983040"
    },
    "EcsTableHasUnion": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8192"
    },
    "EcsFilterMatchDisabled": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "ECS_ROW_MASK": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "268435455"
    },
    "EcsFilterMatchPrefab": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "FLECS_ID_DESC_MAX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "ECS_MODULE_UNDEFINED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "28"
    },
    "EcsIterIsValid": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "EcsIdUnion": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2048"
    },
    "EcsIdHasOnAdd": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "65536"
    },
    "EcsIsVariable": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "128"
    },
    "ECS_INVALID_COMPONENT_ALIGNMENT": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "24"
    },
    "PINVOKE_TARGET_OS_LINUX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "0"
    },
    "ECS_INVALID_CONVERSION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "11"
    },
    "EcsWorldMultiThreaded": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "128"
    },
    "PINVOKE_TARGET_OS_ANDROID": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "0"
    },
    "EcsIsName": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "512"
    },
    "EcsIterYield": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "-1"
    },
    "ECS_INVALID_PARAMETER": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "EcsIdOnDeleteRemove": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "EcsIterHasCondSet": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1024"
    },
    "EcsTableHasOverrides": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32768"
    },
    "ecs_rule_t_magic": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1701016437"
    },
    "ECS_HTTP_QUERY_PARAM_COUNT_MAX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsIsEntity": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "256"
    },
    "EcsQueryIsSubquery": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "ECS_ALREADY_DEFINED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "ECS_RED": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[0;31m\u0022"
    },
    "ECS_BOLD": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[1;49m\u0022"
    },
    "EcsTableHasCtors": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "512"
    },
    "EcsTableHasLifecycle": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1536"
    },
    "flecs_iter_cache_ptrs": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "PINVOKE_TARGET_OS_WINDOWS": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "0"
    },
    "flecs_iter_cache_sources": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "ecs_trigger_t_magic": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1701016434"
    },
    "ECS_COLUMN_IS_SHARED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "43"
    },
    "flecs_iter_cache_columns": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "EcsEventTableOnly": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "ECS_GREEN": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[0;32m\u0022"
    },
    "EcsWorldQuit": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "EcsTableHasMove": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4096"
    },
    "EcsTermMatchAny": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "ECS_STRBUF_MAX_LIST_DEPTH": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsIdOnDeleteObjectPanic": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "ECS_MAX_TOKEN_SIZE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "256"
    },
    "ECS_OUT_OF_MEMORY": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "ECS_GREY": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[0;37m\u0022"
    },
    "EcsTableHasChildOf": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "EcsTermSrcFirstEq": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "EcsWorldReadonly": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "EcsTableHasOnSet": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "262144"
    },
    "EcsIterIgnoreThis": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "128"
    },
    "EcsIdAlwaysOverride": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4096"
    },
    "ECS_CYAN": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[0;36m\u0022"
    },
    "EcsTableHasToggle": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16384"
    },
    "ECS_OPERATION_FAILED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "10"
    },
    "PINVOKE_TARGET_NAME": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022aarch64-apple-darwin\u0022"
    },
    "ECS_ALREADY_IN_USE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "30"
    },
    "ECS_BLACK": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[1;30m\u0022"
    },
    "ECS_NOT_A_COMPONENT": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "22"
    },
    "EcsIdOnDeleteObjectMask": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "56"
    },
    "EcsDown": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "EcsFirstUserEntityId": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "384"
    },
    "FLECS_HI_ID_RECORD_ID": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1024"
    },
    "EcsTableHasOnAdd": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "65536"
    },
    "EcsEntityIsId": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2147483648"
    },
    "PINVOKE_TARGET_ENV_GNU": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "0"
    },
    "ECS_COLUMN_TYPE_MISMATCH": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "45"
    },
    "ECS_STRBUF_ELEMENT_SIZE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "511"
    },
    "flecs_iter_cache_match_indices": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "EcsIdTraversable": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "256"
    },
    "EcsFirstUserComponentId": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "ECS_WHITE": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[1;37m\u0022"
    },
    "EcsTableHasIsA": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "EcsIterNextYield": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "0"
    },
    "EcsIdHasOnSet": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "262144"
    },
    "ECS_INVALID_COMPONENT_SIZE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "23"
    },
    "ECS_CYCLE_DETECTED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "13"
    },
    "EcsTraverseFlags": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "126"
    },
    "EcsQueryHasOutColumns": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "ECS_COLUMN_INDEX_OUT_OF_RANGE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "41"
    },
    "EcsQueryIsOrphaned": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "ECS_LOCKED_STORAGE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "71"
    },
    "ecs_filter_t_magic": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1701016422"
    },
    "ECS_ID_FLAGS_MASK": {
      "type": {
        "name": "unsigned long long",
        "kind": "primitive",
        "sizeOf": 8
      },
      "value": "17293822569102704640"
    },
    "EcsIterTableOnly": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "ecs_world_t_magic": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1701016439"
    },
    "EcsIdOnDeletePanic": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "FLECS_COUNT_MAX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "64"
    },
    "EcsFilterMatchOnlyThis": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "EcsWorldInit": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "EcsEntityIsTarget": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1073741824"
    },
    "ECS_NAME_IN_USE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "21"
    },
    "FLECS__E0": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "0"
    },
    "ECS_OUT_OF_RANGE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "5"
    },
    "ecs_query_t_magic": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1701016433"
    },
    "ECS_INTERNAL_ERROR": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "7"
    },
    "ECS_GENERATION_MASK": {
      "type": {
        "name": "unsigned long long",
        "kind": "primitive",
        "sizeOf": 8
      },
      "value": "281470681743360"
    },
    "EcsIdHasUnSet": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "524288"
    },
    "ECS_META_MAX_SCOPE_DEPTH": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsEventNoOnSet": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "65536"
    },
    "EcsTermIdInherited": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "64"
    },
    "ECS_MAGENTA": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[0;35m\u0022"
    },
    "EcsIdExclusive": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "64"
    },
    "EcsIdTag": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "512"
    },
    "EcsAperiodicEmptyTables": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "ECS_ACCESS_VIOLATION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "40"
    },
    "EcsTableHasCopy": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2048"
    },
    "EcsTableHasObserved": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1048576"
    },
    "EcsIdHasOnRemove": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "131072"
    },
    "EcsIdOnDeleteDelete": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "ecs_stage_t_magic": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1701016435"
    },
    "EcsTableHasOnRemove": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "131072"
    },
    "EcsIdDontInherit": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "128"
    },
    "FLECS_ENTITY_PAGE_BITS": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "12"
    },
    "EcsIterIsInstanced": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "EcsTableMarkedForDelete": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1073741824"
    },
    "ECS_INVALID_OPERATION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "ecs_table_t_magic": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1701016436"
    },
    "EcsIdOnDeleteMask": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "7"
    },
    "ECS_ROW_FLAGS_MASK": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4026531840"
    },
    "ECS_YELLOW": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[0;33m\u0022"
    },
    "EcsEntityIsTraversable": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "536870912"
    },
    "flecs_iter_cache_ids": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "EcsFilterMatchAnything": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "64"
    },
    "EcsFilterPopulate": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "512"
    },
    "EcsFilter": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1024"
    },
    "ECS_INCONSISTENT_NAME": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "20"
    },
    "EcsOsApiLogWithTimeDelta": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "PINVOKE_TARGET_ENV_MSVC": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "0"
    },
    "ECS_UNSUPPORTED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "6"
    },
    "ECS_COLUMN_IS_NOT_SHARED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "42"
    },
    "ECS_CLANG_VERSION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "13"
    },
    "EcsWorldMeasureFrameTime": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsTermMatchAnySrc": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "EcsTraverseAll": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "EcsIdOnDeleteObjectRemove": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "ECS_ID_IN_USE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "12"
    },
    "EcsIterNext": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "flecs_iter_cache_variables": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsFilterUnresolvedByName": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2048"
    },
    "FLECS_SPARSE_PAGE_BITS": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "12"
    },
    "EcsTableHasBuiltins": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "EcsTableHasPairs": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "64"
    },
    "PINVOKE_TARGET_OS_BROWSER": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "0"
    },
    "EcsTableHasDtors": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1024"
    },
    "EcsFilterHasCondSet": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1024"
    },
    "FLECS_TERM_DESC_MAX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "EcsWorldFini": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "EcsTermTransitive": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "EcsIterNoResults": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "64"
    },
    "FLECS_EVENT_DESC_MAX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "EcsCascade": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsSelf": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "EcsIdWith": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1024"
    },
    "EcsFilterIsInstanced": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "256"
    },
    "ECS_COMPONENT_MASK": {
      "type": {
        "name": "unsigned long long",
        "kind": "primitive",
        "sizeOf": 8
      },
      "value": "1152921504606846975"
    },
    "FLECS_SPARSE_PAGE_SIZE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4096"
    },
    "EcsOsApiLogWithTimeStamp": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "ecs_observer_t_magic": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1701016418"
    },
    "PINVOKE_TARGET_OS_FREEBSD": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "0"
    },
    "EcsAperiodicEmptyQueries": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "ECS_NORMAL": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[0;49m\u0022"
    },
    "ECS_MEMBER_DESC_CACHE_SIZE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsIterEntityOptional": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsIterHasShared": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "EcsUp": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "ECS_MAX_RECURSION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "512"
    },
    "EcsWorldMeasureSystemTime": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "64"
    },
    "ECS_INVALID_FROM_WORKER": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "72"
    },
    "EcsTermReflexive": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsIterMatchVar": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "256"
    },
    "EcsFilterMatchThis": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "ECS_CONSTRAINT_VIOLATED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "3"
    },
    "ECS_ENTITY_MASK": {
      "type": {
        "name": "unsigned long long",
        "kind": "primitive",
        "sizeOf": 8
      },
      "value": "4294967295"
    },
    "EcsIdMarkedForDelete": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1073741824"
    },
    "ECS_MAX_COMPONENT_ID": {
      "type": {
        "name": "uint32_t",
        "kind": "typeAlias",
        "sizeOf": 4
      },
      "value": "268435455"
    },
    "EcsIdOnDeleteObjectDelete": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "16"
    },
    "ECS_HTTP_HEADER_COUNT_MAX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsOsApiLogWithColors": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "EcsTableHasAddActions": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "336392"
    },
    "ECS_STAT_WINDOW": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "60"
    },
    "EcsFilterMatchEmptyTables": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "ECS_BLUE": {
      "type": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8
      },
      "value": "\u0022\u001B[0;34m\u0022"
    },
    "EcsTermSrcSecondEq": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "8"
    },
    "EcsWorldQuitWorkers": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "ECS_ID_FLAG_BIT": {
      "type": {
        "name": "unsigned long long",
        "kind": "primitive",
        "sizeOf": 8
      },
      "value": "9223372036854775808"
    },
    "ECS_MISSING_SYMBOL": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "29"
    },
    "ECS_INVALID_WHILE_READONLY": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "70"
    },
    "ECS_REST_DEFAULT_PORT": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "27750"
    },
    "ECS_LEAK_DETECTED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "14"
    },
    "ECS_INCONSISTENT_COMPONENT_ID": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "26"
    },
    "EcsTableIsDisabled": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "256"
    },
    "EcsTableHasTarget": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2097152"
    },
    "EcsQueryHasMonitor": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    },
    "EcsOsApiHighResolutionTimer": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "1"
    },
    "FLECS_HI_COMPONENT_ID": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "256"
    },
    "EcsTableHasModule": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "128"
    },
    "EcsIterProfile": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2048"
    },
    "EcsIterNoData": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "ECS_MISSING_OS_API": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "9"
    },
    "EcsAperiodicComponentMonitors": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "4"
    },
    "EcsTableHasUnSet": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "524288"
    },
    "EcsTableHasRemoveActions": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "656392"
    },
    "EcsTableIsComplex": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "26112"
    },
    "EcsParent": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "64"
    },
    "flecs_iter_cache_all": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "255"
    },
    "EcsQueryHasRefs": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "2"
    },
    "EcsFilterNoData": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "128"
    },
    "EcsQueryTrivialIter": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "64"
    },
    "ECS_COMPONENT_NOT_REGISTERED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "25"
    },
    "EcsTableHasName": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4
      },
      "value": "32"
    }
  },
  "variables": {
    "EcsExbi": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsGibiBytes": {
      "type": "ecs_entity_t"
    },
    "ecs_http_request_not_handled_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsKiloBitsPerSecond": {
      "type": "ecs_entity_t"
    },
    "EcsKibiBytes": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_query_count": {
      "type": "int64_t"
    },
    "EcsGibi": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsStruct": {
      "type": "ecs_entity_t"
    },
    "EcsSystem": {
      "type": "ecs_entity_t",
      "comment": "/* System module component ids */"
    },
    "FLECS__EEcsTebi": {
      "type": "ecs_entity_t"
    },
    "EcsMicroMeters": {
      "type": "ecs_entity_t"
    },
    "EcsTera": {
      "type": "ecs_entity_t"
    },
    "EcsMebiBytes": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPoly": {
      "type": "ecs_entity_t"
    },
    "ecs_http_request_handled_ok_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsMiles": {
      "type": "ecs_entity_t"
    },
    "EcsMiles": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsHecto": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsDocDescription": {
      "type": "ecs_entity_t"
    },
    "EcsOnStart": {
      "type": "ecs_entity_t"
    },
    "EcsDisabled": {
      "type": "ecs_entity_t",
      "comment": "/** When this tag is added to an entity it is skipped by all queries/filters */"
    },
    "FLECS__EEcsUriFile": {
      "type": "ecs_entity_t"
    },
    "EcsOneOf": {
      "type": "ecs_entity_t",
      "comment": "/** Ensure that relationship target is child of specified entity.\n * \n * Behavior:\n *   If OneOf(R, O) and R(X, Y), Y must be a child of O\n *   If OneOf(R) and R(X, Y), Y must be a child of R\n */"
    },
    "EcsOnDelete": {
      "type": "ecs_entity_t",
      "comment": "/** Event. Triggers when an entity is deleted.\n * Also used as relationship for defining cleanup behavior, see: \n * https://github.com/SanderMertens/flecs/blob/master/docs/Relationships.md#cleanup-properties\n */"
    },
    "ecs_http_request_invalid_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsMetricInstance": {
      "type": "ecs_entity_t"
    },
    "EcsMilesPerHour": {
      "type": "ecs_entity_t"
    },
    "EcsYotta": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_iptr_t": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsGauge": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsUnit": {
      "type": "ecs_entity_t"
    },
    "ecs_block_allocator_free_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsMinutes": {
      "type": "ecs_entity_t"
    },
    "EcsPreStore": {
      "type": "ecs_entity_t"
    },
    "EcsMicro": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsZetta": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsGiga": {
      "type": "ecs_entity_t"
    },
    "ECS_FILTER_INIT": {
      "type": "ecs_filter_t",
      "comment": "/** Use this variable to initialize user-allocated filter object */"
    },
    "EcsDontInherit": {
      "type": "ecs_entity_t",
      "comment": "/** Ensures that component is never inherited from an IsA target.\n * \n * Behavior:\n *   if DontInherit(X) and X(B) and IsA(A, B) then X(A) is false.\n */"
    },
    "FLECS__EEcsCounterId": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsUriImage": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsKiloMetersPerHour": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsAcceleration": {
      "type": "ecs_entity_t"
    },
    "EcsMeters": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMember": {
      "type": "ecs_entity_t"
    },
    "EcsMetric": {
      "type": "ecs_entity_t"
    },
    "EcsDays": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMilliSeconds": {
      "type": "ecs_entity_t"
    },
    "EcsGigaBits": {
      "type": "ecs_entity_t"
    },
    "EcsDocLink": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsKiloBytesPerSecond": {
      "type": "ecs_entity_t"
    },
    "EcsBits": {
      "type": "ecs_entity_t"
    },
    "EcsMegaBytes": {
      "type": "ecs_entity_t"
    },
    "EcsNanoMeters": {
      "type": "ecs_entity_t"
    },
    "EcsBytes": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsExa": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsRest": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMicroSeconds": {
      "type": "ecs_entity_t"
    },
    "EcsOnTableFill": {
      "type": "ecs_entity_t",
      "comment": "/** Event. Triggers when a table becomes non-empty. */"
    },
    "EcsPeriod1h": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsTimer": {
      "type": "ecs_entity_t"
    },
    "EcsSymmetric": {
      "type": "ecs_entity_t",
      "comment": "/** Marks relationship as commutative.\n * Behavior:\n *   if R(X, Y) then R(Y, X)\n */"
    },
    "EcsOnLoad": {
      "type": "ecs_entity_t"
    },
    "EcsBytesPerSecond": {
      "type": "ecs_entity_t"
    },
    "EcsPressure": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsKibiBytes": {
      "type": "ecs_entity_t"
    },
    "EcsDuration": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsCandela": {
      "type": "ecs_entity_t"
    },
    "EcsAcyclic": {
      "type": "ecs_entity_t",
      "comment": "/** Marks a relationship as acyclic. Acyclic relationships may not form cycles. */"
    },
    "EcsZepto": {
      "type": "ecs_entity_t"
    },
    "EcsOnTableDelete": {
      "type": "ecs_entity_t",
      "comment": "/** Event. Triggers when a table is deleted. */"
    },
    "FLECS__EEcsPixels": {
      "type": "ecs_entity_t"
    },
    "EcsAlwaysOverride": {
      "type": "ecs_entity_t",
      "comment": "/** Ensures a component is always overridden.\n * \n * Behavior:\n *   As if the component is added together with OVERRIDE | T\n */"
    },
    "FLECS__Eecs_u16_t": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_char_t": {
      "type": "ecs_entity_t"
    },
    "EcsQuantity": {
      "type": "ecs_entity_t"
    },
    "ecs_http_busy_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsFemto": {
      "type": "ecs_entity_t"
    },
    "EcsCentiMeters": {
      "type": "ecs_entity_t"
    },
    "EcsDelete": {
      "type": "ecs_entity_t",
      "comment": "/** Delete cleanup policy. Must be used as target in pair with EcsOnDelete or\n * EcsOnDeleteTarget. */"
    },
    "FLECS__Eecs_u64_t": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMetric": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsRadians": {
      "type": "ecs_entity_t"
    },
    "ecs_os_api_malloc_count": {
      "type": "int64_t",
      "comment": "/* Allocation counters */"
    },
    "FLECS__EEcsArray": {
      "type": "ecs_entity_t"
    },
    "EcsMilli": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsAmount": {
      "type": "ecs_entity_t"
    },
    "EcsZebi": {
      "type": "ecs_entity_t"
    },
    "EcsKelvin": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMegaBytesPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsLength": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMegaHertz": {
      "type": "ecs_entity_t"
    },
    "EcsHecto": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsZepto": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPico": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPeta": {
      "type": "ecs_entity_t"
    },
    "EcsNewton": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsRateFilter": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMetaTypeSerialized": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMilli": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMilesPerHour": {
      "type": "ecs_entity_t"
    },
    "ecs_http_send_error_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsUnitPrefixes": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsNanoSeconds": {
      "type": "ecs_entity_t"
    },
    "EcsKiloBitsPerSecond": {
      "type": "ecs_entity_t"
    },
    "EcsAlias": {
      "type": "ecs_entity_t",
      "comment": "/** Tag to indicate alias identifier */"
    },
    "FLECS__EEcsKelvin": {
      "type": "ecs_entity_t"
    },
    "EcsGauge": {
      "type": "ecs_entity_t"
    },
    "EcsMinutes": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsKibi": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsBytes": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsLuminousIntensity": {
      "type": "ecs_entity_t"
    },
    "EcsTebi": {
      "type": "ecs_entity_t"
    },
    "EcsPostFrame": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPipeline": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsTime": {
      "type": "ecs_entity_t"
    },
    "EcsPreFrame": {
      "type": "ecs_entity_t"
    },
    "EcsGigaHertz": {
      "type": "ecs_entity_t"
    },
    "EcsPeriod1m": {
      "type": "ecs_entity_t"
    },
    "EcsKiloHertz": {
      "type": "ecs_entity_t"
    },
    "EcsDocColor": {
      "type": "ecs_entity_t"
    },
    "ecs_http_request_handled_error_count": {
      "type": "int64_t"
    },
    "EcsPredMatch": {
      "type": "ecs_entity_t"
    },
    "FLECS__EFlecsMonitor": {
      "type": "ecs_entity_t"
    },
    "EcsMegaBytesPerSecond": {
      "type": "ecs_entity_t"
    },
    "EcsThis": {
      "type": "ecs_entity_t",
      "comment": "/** This entity. Default source for queries. */"
    },
    "FLECS__EEcsHours": {
      "type": "ecs_entity_t"
    },
    "EcsPredLookup": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsSeconds": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_enable_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsVector": {
      "type": "ecs_entity_t"
    },
    "EcsData": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_enable_error_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsElectricCurrent": {
      "type": "ecs_entity_t"
    },
    "EcsGigaBitsPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsUri": {
      "type": "ecs_entity_t"
    },
    "EcsAny": {
      "type": "ecs_entity_t",
      "comment": "/** Any entity (\u0022_\u0022). Matches any id, returns only the first. */"
    },
    "EcsCelsius": {
      "type": "ecs_entity_t"
    },
    "ECS_AND": {
      "type": "ecs_id_t",
      "comment": "/** Include all components from entity to which AND is applied */"
    },
    "EcsPeta": {
      "type": "ecs_entity_t"
    },
    "EcsDocDetail": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMetricValue": {
      "type": "ecs_entity_t"
    },
    "EcsPanic": {
      "type": "ecs_entity_t",
      "comment": "/** Panic cleanup policy. Must be used as target in pair with EcsOnDelete or\n * EcsOnDeleteTarget. */"
    },
    "FLECS__EEcsTemperature": {
      "type": "ecs_entity_t"
    },
    "EcsUnion": {
      "type": "ecs_entity_t",
      "comment": "/** Tag to indicate that relationship is stored as union. Union relationships enable\n * changing the target of a union without switching tables. Union relationships\n * are also marked as exclusive. */"
    },
    "FLECS__EEcsKiloBytes": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsFahrenheit": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsCelsius": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsDate": {
      "type": "ecs_entity_t"
    },
    "EcsOnAdd": {
      "type": "ecs_entity_t",
      "comment": "/** Event. Triggers when an id (component, tag, pair) is added to an entity */"
    },
    "EcsMetersPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPipelineStats": {
      "type": "ecs_entity_t"
    },
    "EcsYobi": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsDuration": {
      "type": "ecs_entity_t"
    },
    "EcsPixels": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMeters": {
      "type": "ecs_entity_t"
    },
    "EcsConstant": {
      "type": "ecs_entity_t"
    },
    "EcsMass": {
      "type": "ecs_entity_t"
    },
    "EcsDataRate": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMole": {
      "type": "ecs_entity_t"
    },
    "EcsUnSet": {
      "type": "ecs_entity_t",
      "comment": "/** Event. Triggers when a component is unset for an entity */"
    },
    "ecs_rest_entity_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsMetricSource": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsScript": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsTickSource": {
      "type": "ecs_entity_t"
    },
    "EcsSlotOf": {
      "type": "ecs_entity_t",
      "comment": "/** Used to express a slot (used with prefab inheritance) */"
    },
    "EcsCounterIncrement": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPressure": {
      "type": "ecs_entity_t"
    },
    "EcsPostLoad": {
      "type": "ecs_entity_t"
    },
    "EcsOnTableEmpty": {
      "type": "ecs_entity_t",
      "comment": "/** Event. Triggers when a table becomes empty (doesn\u0027t emit on creation). */"
    },
    "EcsLuminousIntensity": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_world_stats_count": {
      "type": "int64_t"
    },
    "ecs_stack_allocator_free_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsKiloGrams": {
      "type": "ecs_entity_t"
    },
    "EcsPeriod1w": {
      "type": "ecs_entity_t"
    },
    "EcsUri": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsNewton": {
      "type": "ecs_entity_t"
    },
    "EcsCenti": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsOpaque": {
      "type": "ecs_entity_t"
    },
    "EcsPicoSeconds": {
      "type": "ecs_entity_t"
    },
    "ecs_os_api_calloc_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsMega": {
      "type": "ecs_entity_t"
    },
    "EcsKiloMetersPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_string_t": {
      "type": "ecs_entity_t"
    },
    "EcsUriHyperlink": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsHertz": {
      "type": "ecs_entity_t"
    },
    "EcsWith": {
      "type": "ecs_entity_t",
      "comment": "/** Ensure that a component always is added together with another component.\n * \n * Behavior:\n *   If With(R, O) and R(X) then O(X)\n *   If With(R, O) and R(X, Y) then O(X, Y)\n */"
    },
    "EcsOnSet": {
      "type": "ecs_entity_t",
      "comment": "/** Event. Triggers when a component is set for an entity */"
    },
    "FLECS__EEcsNano": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsAngle": {
      "type": "ecs_entity_t"
    },
    "EcsChildOf": {
      "type": "ecs_entity_t",
      "comment": "/** Used to express parent-child relationships. */"
    },
    "FLECS__EEcsMicro": {
      "type": "ecs_entity_t"
    },
    "EcsUriImage": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsZebi": {
      "type": "ecs_entity_t"
    },
    "EcsKiloBits": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsBar": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_i8_t": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsSpeed": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsCounter": {
      "type": "ecs_entity_t"
    },
    "EcsPeriod1s": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMegaBits": {
      "type": "ecs_entity_t"
    },
    "EcsMegaBits": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsKiloMeters": {
      "type": "ecs_entity_t"
    },
    "EcsBitsPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_i32_t": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsGibi": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsYotta": {
      "type": "ecs_entity_t"
    },
    "EcsMilliMeters": {
      "type": "ecs_entity_t"
    },
    "EcsFlecs": {
      "type": "ecs_entity_t",
      "comment": "/** Root scope for builtin flecs entities */"
    },
    "EcsCounter": {
      "type": "ecs_entity_t"
    },
    "EcsOnUpdate": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsIterable": {
      "type": "ecs_entity_t"
    },
    "EcsPreUpdate": {
      "type": "ecs_entity_t"
    },
    "EcsModule": {
      "type": "ecs_entity_t",
      "comment": "/** Tag added to module entities */"
    },
    "FLECS__Eecs_u8_t": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMilliMeters": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_query_name_error_count": {
      "type": "int64_t"
    },
    "EcsExa": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsBel": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_delete_error_count": {
      "type": "int64_t"
    },
    "ECS_PAIR": {
      "type": "ecs_id_t",
      "comment": "/** Indicates that the id is a pair. */"
    },
    "EcsDocBrief": {
      "type": "ecs_entity_t"
    },
    "EcsOnValidate": {
      "type": "ecs_entity_t"
    },
    "EcsQuery": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsForce": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsGigaHertz": {
      "type": "ecs_entity_t"
    },
    "EcsPeriod1d": {
      "type": "ecs_entity_t"
    },
    "EcsNano": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsWorldStats": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsKiloBits": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_uptr_t": {
      "type": "ecs_entity_t"
    },
    "EcsAmount": {
      "type": "ecs_entity_t"
    },
    "EcsKilo": {
      "type": "ecs_entity_t"
    },
    "EcsPrivate": {
      "type": "ecs_entity_t",
      "comment": "/** Tag to indicate an entity/component/system is private to a module */"
    },
    "EcsMole": {
      "type": "ecs_entity_t"
    },
    "EcsMonitor": {
      "type": "ecs_entity_t",
      "comment": "/** Event. Exactly-once observer for when an entity matches/unmatches a filter */"
    },
    "EcsCounterId": {
      "type": "ecs_entity_t"
    },
    "EcsKibi": {
      "type": "ecs_entity_t"
    },
    "EcsMicroSeconds": {
      "type": "ecs_entity_t"
    },
    "EcsNanoSeconds": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsAmpere": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_pipeline_stats_count": {
      "type": "int64_t"
    },
    "EcsPascal": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsBytesPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsGigaBytes": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMicroMeters": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_query_error_count": {
      "type": "int64_t"
    },
    "EcsPico": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsUriHyperlink": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_entity_t": {
      "type": "ecs_entity_t"
    },
    "EcsOnTableCreate": {
      "type": "ecs_entity_t",
      "comment": "/** Event. Triggers when a table is created. */"
    },
    "EcsFrequency": {
      "type": "ecs_entity_t"
    },
    "EcsPrefab": {
      "type": "ecs_entity_t",
      "comment": "/** Tag added to prefab entities. Any entity with this tag is automatically\n * ignored by filters/queries, unless EcsPrefab is explicitly added. */"
    },
    "EcsPercentage": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMetersPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMebi": {
      "type": "ecs_entity_t"
    },
    "EcsDependsOn": {
      "type": "ecs_entity_t",
      "comment": "/** Used to express dependency relationships */"
    },
    "FLECS__EEcsTera": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPicoMeters": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsBitmask": {
      "type": "ecs_entity_t"
    },
    "EcsTag": {
      "type": "ecs_entity_t",
      "comment": "/** Can be added to relationship to indicate that it should never hold data, even\n * when it or the relationship target is a component. */"
    },
    "EcsExclusive": {
      "type": "ecs_entity_t",
      "comment": "/** Can be added to relationship to indicate that the relationship can only occur\n * once on an entity. Adding a 2nd instance will replace the 1st. \n *\n * Behavior:\n *   R(X, Y) \u002B R(X, Z) = R(X, Z)\n */"
    },
    "EcsPebi": {
      "type": "ecs_entity_t"
    },
    "EcsZetta": {
      "type": "ecs_entity_t"
    },
    "EcsMebi": {
      "type": "ecs_entity_t"
    },
    "EcsReflexive": {
      "type": "ecs_entity_t",
      "comment": "/** Marks a relatoinship as reflexive.\n * Behavior: \n *   R(X, X) == true\n */"
    },
    "FLECS__Eecs_i16_t": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsEnum": {
      "type": "ecs_entity_t"
    },
    "EcsMega": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMass": {
      "type": "ecs_entity_t"
    },
    "ecs_block_allocator_alloc_count": {
      "type": "int64_t"
    },
    "EcsRemove": {
      "type": "ecs_entity_t",
      "comment": "/** Remove cleanup policy. Must be used as target in pair with EcsOnDelete or\n * EcsOnDeleteTarget. */"
    },
    "EcsMegaHertz": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMegaBytes": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPipelineQuery": {
      "type": "ecs_entity_t"
    },
    "EcsWildcard": {
      "type": "ecs_entity_t",
      "comment": "/** Wildcard entity (\u0022*\u0022). Matches any id, returns all matches. */"
    },
    "FLECS__EEcsMegaBitsPerSecond": {
      "type": "ecs_entity_t"
    },
    "EcsTime": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_byte_t": {
      "type": "ecs_entity_t"
    },
    "EcsDegrees": {
      "type": "ecs_entity_t"
    },
    "EcsPredEq": {
      "type": "ecs_entity_t",
      "comment": "/* Builtin predicates for comparing entity ids in queries. Only supported by rules */"
    },
    "FLECS__EEcsGigaBytesPerSecond": {
      "type": "ecs_entity_t"
    },
    "EcsElectricCurrent": {
      "type": "ecs_entity_t"
    },
    "ecs_http_request_preflight_count": {
      "type": "int64_t"
    },
    "ecs_stack_allocator_alloc_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsTarget": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_request_count": {
      "type": "int64_t",
      "comment": "/* Global statistics */"
    },
    "ecs_os_api_realloc_count": {
      "type": "int64_t"
    },
    "EcsAcceleration": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMebiBytes": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsMetaType": {
      "type": "ecs_entity_t"
    },
    "FLECS__EFlecsMetrics": {
      "type": "ecs_entity_t"
    },
    "EcsGigaBytesPerSecond": {
      "type": "ecs_entity_t"
    },
    "EcsDeciBel": {
      "type": "ecs_entity_t"
    },
    "EcsAtto": {
      "type": "ecs_entity_t"
    },
    "EcsDefaultChildComponent": {
      "type": "ecs_entity_t",
      "comment": "/** Used like (EcsDefaultChildComponent, Component). When added to an entity,\n * this informs serialization formats which component to use when a value is\n * assigned to an entity without specifying the component. This is intended as\n * a hint, serialization formats are not required to use it. Adding this \n * component does not change the behavior of core ECS operations. */"
    },
    "FLECS__Eecs_i64_t": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_f64_t": {
      "type": "ecs_entity_t"
    },
    "EcsPhase": {
      "type": "ecs_entity_t"
    },
    "EcsTraversable": {
      "type": "ecs_entity_t",
      "comment": "/** Marks a relationship as traversable. Traversable relationships may be \n * traversed with \u0022up\u0022 queries. Traversable relatinoships are acyclic. */"
    },
    "FLECS__Eecs_u32_t": {
      "type": "ecs_entity_t"
    },
    "EcsHours": {
      "type": "ecs_entity_t"
    },
    "ECS_OVERRIDE": {
      "type": "ecs_id_t",
      "comment": "/** Automatically override component when it is inherited */"
    },
    "EcsTransitive": {
      "type": "ecs_entity_t",
      "comment": "/** Marks a relationship as transitive. \n * Behavior: \n *   if R(X, Y) and R(Y, Z) then R(X, Z)\n */"
    },
    "EcsKiloBytesPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsBits": {
      "type": "ecs_entity_t"
    },
    "EcsVariable": {
      "type": "ecs_entity_t",
      "comment": "/** Variable entity (\u0022$\u0022). Used in expressions to prefix variable names */"
    },
    "EcsKiloMetersPerHour": {
      "type": "ecs_entity_t"
    },
    "ecs_os_api": {
      "type": "ecs_os_api_t"
    },
    "FLECS__EEcsPascal": {
      "type": "ecs_entity_t"
    },
    "EcsLength": {
      "type": "ecs_entity_t"
    },
    "EcsPicoMeters": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsCounterIncrement": {
      "type": "ecs_entity_t"
    },
    "EcsForce": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsAtto": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsUnitPrefix": {
      "type": "ecs_entity_t"
    },
    "EcsHertz": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsData": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsYocto": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsCenti": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsIdentifier": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_bool_t": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsComponent": {
      "type": "ecs_entity_t"
    },
    "EcsFlecsCore": {
      "type": "ecs_entity_t",
      "comment": "/** Core module scope */"
    },
    "EcsWorld": {
      "type": "ecs_entity_t",
      "comment": "/** Entity associated with world (used for \u0022attaching\u0022 components to world) */"
    },
    "EcsUriFile": {
      "type": "ecs_entity_t"
    },
    "EcsOnDeleteTarget": {
      "type": "ecs_entity_t",
      "comment": "/** Relationship used to define what should happen when a target entity (second\n * element of a pair) is deleted. For details see: \n * https://github.com/SanderMertens/flecs/blob/master/docs/Relationships.md#cleanup-properties\n */"
    },
    "EcsSeconds": {
      "type": "ecs_entity_t"
    },
    "EcsMegaBitsPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsYobi": {
      "type": "ecs_entity_t"
    },
    "EcsUnitPrefixes": {
      "type": "ecs_entity_t"
    },
    "EcsSpeed": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsDays": {
      "type": "ecs_entity_t"
    },
    "EcsEmpty": {
      "type": "ecs_entity_t",
      "comment": "/** Tag used to indicate query is empty */"
    },
    "FLECS__EEcsGigaBitsPerSecond": {
      "type": "ecs_entity_t"
    },
    "EcsOnRemove": {
      "type": "ecs_entity_t",
      "comment": "/** Event. Triggers when an id (component, tag, pair) is removed from an entity */"
    },
    "EcsBar": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_stats_error_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsGigaBits": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsBitsPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsKiloHertz": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_query_name_from_cache_count": {
      "type": "int64_t"
    },
    "EcsName": {
      "type": "ecs_entity_t",
      "comment": "/** Tag to indicate name identifier */"
    },
    "ecs_rest_query_name_count": {
      "type": "int64_t"
    },
    "EcsPostUpdate": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsGrams": {
      "type": "ecs_entity_t"
    },
    "EcsOnStore": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsFrequency": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPrimitive": {
      "type": "ecs_entity_t"
    },
    "EcsGibiBytes": {
      "type": "ecs_entity_t"
    },
    "ECS_TOGGLE": {
      "type": "ecs_id_t",
      "comment": "/** Adds bitset to storage which allows component to be enabled/disabled */"
    },
    "EcsAngle": {
      "type": "ecs_entity_t"
    },
    "EcsGigaBytes": {
      "type": "ecs_entity_t"
    },
    "EcsGrams": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsDeci": {
      "type": "ecs_entity_t"
    },
    "EcsKiloGrams": {
      "type": "ecs_entity_t"
    },
    "EcsDeci": {
      "type": "ecs_entity_t"
    },
    "EcsKiloBytes": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsKiloMetersPerSecond": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPebi": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_entity_error_count": {
      "type": "int64_t"
    },
    "EcsGiga": {
      "type": "ecs_entity_t"
    },
    "EcsBel": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsDegrees": {
      "type": "ecs_entity_t"
    },
    "EcsFinal": {
      "type": "ecs_entity_t",
      "comment": "/** Ensures that entity/component cannot be used as target in IsA relationship.\n * Final can improve the performance of rule-based queries, as they will not \n * attempt to substitute a final component with its subsets.\n * \n * Behavior: \n *   if IsA(X, Y) and Final(Y) throw error\n */"
    },
    "FLECS__EEcsDeciBel": {
      "type": "ecs_entity_t"
    },
    "ecs_rest_delete_count": {
      "type": "int64_t"
    },
    "FLECS__EEcsNanoMeters": {
      "type": "ecs_entity_t"
    },
    "EcsKiloMeters": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsExbi": {
      "type": "ecs_entity_t"
    },
    "EcsDeca": {
      "type": "ecs_entity_t"
    },
    "EcsRadians": {
      "type": "ecs_entity_t"
    },
    "EcsAmpere": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsDataRate": {
      "type": "ecs_entity_t"
    },
    "ecs_http_send_ok_count": {
      "type": "int64_t"
    },
    "EcsFemto": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsDeca": {
      "type": "ecs_entity_t"
    },
    "ecs_os_api_free_count": {
      "type": "int64_t"
    },
    "EcsFahrenheit": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsKilo": {
      "type": "ecs_entity_t"
    },
    "EcsTemperature": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPicoSeconds": {
      "type": "ecs_entity_t"
    },
    "ecs_http_request_received_count": {
      "type": "int64_t",
      "comment": "/* Global statistics. */"
    },
    "FLECS__EEcsCentiMeters": {
      "type": "ecs_entity_t"
    },
    "FLECS__EEcsPercentage": {
      "type": "ecs_entity_t"
    },
    "EcsYocto": {
      "type": "ecs_entity_t"
    },
    "FLECS__Eecs_f32_t": {
      "type": "ecs_entity_t"
    },
    "EcsMilliSeconds": {
      "type": "ecs_entity_t"
    },
    "EcsCandela": {
      "type": "ecs_entity_t"
    },
    "EcsIsA": {
      "type": "ecs_entity_t",
      "comment": "/** Used to express inheritance relationships. */"
    },
    "EcsObserver": {
      "type": "ecs_entity_t"
    },
    "EcsDate": {
      "type": "ecs_entity_t"
    },
    "EcsFlatten": {
      "type": "ecs_entity_t"
    },
    "EcsSymbol": {
      "type": "ecs_entity_t",
      "comment": "/** Tag to indicate symbol identifier */"
    }
  },
  "functions": {
    "ecs_map_init_w_params_if": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "result",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "params",
          "type": {
            "name": "ecs_map_params_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_params_t",
              "kind": "typeAlias",
              "sizeOf": 56,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_params_t",
                "kind": "struct",
                "sizeOf": 56,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_table_unlock": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Unlock a table.\n * Must be called after calling ecs_table_lock.\n *\n * @param world The world.\n * @param table The table to unlock.\n */"
    },
    "ecs_snapshot_take": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_snapshot_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_snapshot_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Create a snapshot.\n * This operation makes a copy of the current state of the world.\n *\n * @param world The world to snapshot.\n * @return The snapshot.\n */"
    },
    "ecs_cpp_get_symbol_name": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "symbol_name",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        },
        {
          "name": "type_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ]
    },
    "ecs_vec_reset": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_vec_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_vec_t",
          "kind": "typeAlias",
          "sizeOf": 24,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_vec_t",
            "kind": "struct",
            "sizeOf": 24,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "FlecsDocImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/* Module import */"
    },
    "ecs_stage_is_async": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "stage",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Test whether provided stage is asynchronous.\n *\n * @param stage The stage.\n * @return True when the stage is asynchronous, false for a regular stage or \n *         world.\n */"
    },
    "ecs_system_get_query": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_query_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_query_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "system",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get the query object for a system.\n * Systems use queries under the hood. This enables an application to get access\n * to the underlying query object of a system. This can be useful when, for \n * example, an application needs to enable sorting for a system.\n *\n * @param world The world.\n * @param system The system from which to obtain the query.\n * @return The query.\n */"
    },
    "ecs_get_world": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_world_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_world_t",
          "kind": "opaqueType",
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "poly",
          "type": {
            "name": "ecs_poly_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_poly_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get world from poly.\n *\n * @param poly A pointer to a poly object.\n * @return The world.\n */"
    },
    "ecs_vec_reclaim": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_rule_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Progress rule iterator.\n * \n * @param it The iterator.\n */"
    },
    "flecs_brealloc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "memory",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "ecs_exists": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Test whether an entity exists.\n * Similar as ecs_is_alive, but ignores entity generation count.\n *\n * @param world The world.\n * @param entity The entity.\n * @return True if the entity exists, false if the entity does not exist.\n */"
    },
    "ecs_value_copy_w_type_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "ti",
          "type": {
            "name": "ecs_type_info_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "typeAlias",
              "sizeOf": 144,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_info_t",
                "kind": "struct",
                "sizeOf": 144,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Copy value.\n * \n * @param world The world.\n * @param ti Type info of the value to copy.\n * @param dst Pointer to the storage to copy to.\n * @param src Pointer to the value to copy.\n * @return Zero if success, nonzero if failed. \n */"
    },
    "ecs_meta_get_char": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get field value as char. */"
    },
    "ecs_get_depth": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "rel",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Return depth for entity in tree for relationship rel.\n * Depth is determined by counting the number of targets encountered while \n * traversing up the relationship tree for rel. Only acyclic relationships are\n * supported.\n * \n * @param world The world.\n * @param entity The entity.\n * @param rel The relationship.\n * @return The depth of the entity in the tree.\n */"
    },
    "pinvoke_EcsPreStore": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "_ecs_log": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "level",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "_ecs_deprecated": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "msg",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "////////////////////////////////////////////////////////////////////////////////\n//// Tracing\n////////////////////////////////////////////////////////////////////////////////"
    },
    "ecs_array_to_json_buf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "buf_out",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Serialize array into JSON string buffer.\n * Same as ecs_array_to_json_buf, but serializes to an ecs_strbuf_t instance.\n * \n * @param world The world.\n * @param type The type of the value to serialize.\n * @param data The value to serialize.\n * @param count The number of elements to serialize.\n * @param buf_out The strbuf to append the string to.\n * @return Zero if success, non-zero if failed.\n */"
    },
    "ecs_os_fatal": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "msg",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_strbuf_appendstr": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* Append string to buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "ecs_script_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_script_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_script_desc_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_script_desc_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Load managed script.\n * A managed script tracks which entities it creates, and keeps those entities\n * synchronized when the contents of the script are updated. When the script is\n * updated, entities that are no longer in the new version will be deleted.\n * \n * This feature is experimental.\n * \n * @param world The world.\n * @param desc Script descriptor.\n */"
    },
    "ecs_os_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "ecs_term_id_is_set": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "name": "ecs_term_id_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_id_t",
              "kind": "typeAlias",
              "sizeOf": 32,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_term_id_t",
                "kind": "struct",
                "sizeOf": 32,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Test whether term id is set.\n *\n * @param id The term id.\n * @return True when set, false when not set.\n */"
    },
    "ecs_remove_all": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Remove all instances of the specified id.\n * This will remove the specified id from all entities (tables). Teh id may be\n * a wildcard and/or a pair.\n * \n * @param world The world.\n * @param id The id.\n */"
    },
    "_ecs_parser_error": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "column",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_table_add_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_table_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_table_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get table that has all components of current table plus the specified id.\n * If the provided table already has the provided id, the operation will return\n * the provided table.\n *\n * @param world The world.\n * @param table The table.\n * @param id The id to add.\n * @result The resulting table.\n */"
    },
    "ecs_strbuf_list_appendstrn": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "n",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* Append string as a new element in list */"
    },
    "ecs_emit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_event_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_event_desc_t",
              "kind": "typeAlias",
              "sizeOf": 72,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_event_desc_t",
                "kind": "struct",
                "sizeOf": 72,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Send event.\n * This sends an event to matching triggers \u0026 is the mechanism used by flecs\n * itself to send OnAdd, OnRemove, etc events.\n * \n * Applications can use this function to send custom events, where a custom\n * event can be any regular entity.\n * \n * Applications should not send builtin flecs events, as this may violate\n * assumptions the code makes about the conditions under which those events are\n * sent.\n * \n * Triggers are invoked synchronously. It is therefore safe to use stack-based\n * data as event context, which can be set in the \u0022param\u0022 member.\n * \n * To send a notification for a single entity, an application should set the\n * following members in the event descriptor:\n * \n * - table: set to the table of the entity\n * - offset: set to the row of the entity in the table\n * - count: set to 1\n * \n * The table \u0026 row of the entity can be obtained like this:\n *   ecs_record_t *r = ecs_record_find(world, e);\n *   desc.table = r-\u003Etable;\n *   desc.offset = ECS_RECORD_TO_ROW(r-\u003Erow);\n * \n * @param world The world.\n * @param desc Event parameters.\n */"
    },
    "ecs_query_set_group": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "group_id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Set group to iterate for query iterator.\n * This operation limits the results returned by the query to only the selected\n * group id. The query must have a group_by function, and the iterator must\n * be a query iterator.\n * \n * Groups are sets of tables that are stored together in the query cache based\n * on a group id, which is calculated per table by the group_by function. To \n * iterate a group, an iterator only needs to know the first and last cache node\n * for that group, which can both be found in a fast O(1) operation.\n * \n * As a result, group iteration is one of the most efficient mechanisms to \n * filter out large numbers of entities, even if those entities are distributed\n * across many tables. This makes it a good fit for things like dividing up\n * a world into cells, and only iterating cells close to a player.\n * \n * The group to iterate must be set before the first call to ecs_query_next. No\n * operations that can add/remove components should be invoked between calling \n * ecs_query_set_group and ecs_query_next.\n * \n * @param it The query iterator.\n * @param group_id The group to iterate.\n */"
    },
    "ecs_set_symbol": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "symbol",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Set the symbol of an entity.\n * This will set or overwrite the symbol of an entity. If no entity is provided,\n * a new entity will be created.\n *\n * The symbol is stored in (EcsIdentifier, EcsSymbol).\n *\n * @param world The world.\n * @param entity The entity.\n * @param symbol The symbol.\n * @return The provided entity, or a new entity if 0 was provided.\n */"
    },
    "ecs_id_match": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "pattern",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Utility to match an id with a pattern.\n * This operation returns true if the provided pattern matches the provided\n * id. The pattern may contain a wildcard (or wildcards, when a pair).\n *\n * @param id The id.\n * @param pattern The pattern to compare with.\n */"
    },
    "ecs_strbuf_list_push": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "list_open",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "separator",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* Push a list */"
    },
    "ecs_filter_finalize": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Finalize filter.\n * When manually assigning an array of terms to the filter struct (so not when\n * using ecs_filter_init), this operation should be used to ensure that all \n * terms are assigned properly and all (derived) fields have been set.\n *\n * When ecs_filter_init is used to create the filter, this function should not\n * be called. The purpose of this operation is to support creation of filters\n * without allocating memory.\n *\n * @param filter The filter to finalize.\n * @return Zero if filter is valid, non-zero if it contains errors.\n * @\n */"
    },
    "flecs_hashmap_copy": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_ptr_to_json_buf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "buf_out",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Serialize value into JSON string buffer.\n * Same as ecs_ptr_to_json, but serializes to an ecs_strbuf_t instance.\n * \n * @param world The world.\n * @param type The type of the value to serialize.\n * @param data The value to serialize.\n * @param buf_out The strbuf to append the string to.\n * @return Zero if success, non-zero if failed.\n */"
    },
    "ecs_term_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Progress a term iterator.\n * This operation progresses the term iterator to the next table. The \n * iterator must have been initialized with \u0060ecs_term_iter\u0060. This operation \n * must be invoked at least once before interpreting the contents of the \n * iterator.\n *\n * @param it The iterator.\n * @returns True if more data is available, false if not.\n */"
    },
    "ecs_sleepf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "t",
          "type": {
            "name": "double",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ],
      "comment": "/* Sleep with floating point time */"
    },
    "ecs_log_enable_timedelta": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "enabled",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Enable/disable logging time since last log.\n * By default deltatime is disabled. Note that enabling timestamps introduces\n * overhead as the logging code will need to obtain the current time.\n * \n * When enabled, this logs the amount of time in seconds passed since the last\n * log, when this amount is non-zero. The format is a \u0027\u002B\u0027 character followed by\n * the number of seconds:\n * \n *   \u002B1 trace: log message\n *\n * @param enabled Whether to enable tracing with timestamps.\n * @return Previous timestamp setting.\n */"
    },
    "ecs_system_stats_copy_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_system_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_system_stats_t",
              "kind": "typeAlias",
              "sizeOf": 8448,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_system_stats_t",
                "kind": "struct",
                "sizeOf": 8448,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_system_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_system_stats_t",
              "kind": "typeAlias",
              "sizeOf": 8448,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_system_stats_t",
                "kind": "struct",
                "sizeOf": 8448,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Copy last measurement from source to destination. */"
    },
    "ecs_time_measure": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "double",
        "kind": "primitive",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "start",
          "type": {
            "name": "ecs_time_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_time_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 4,
              "innerType": {
                "name": "ecs_time_t",
                "kind": "struct",
                "sizeOf": 8,
                "alignOf": 4
              }
            }
          }
        }
      ],
      "comment": "/* Measure time since provided timestamp */"
    },
    "ecs_query_orphaned": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Returns whether query is orphaned.\n * When the parent query of a subquery is deleted, it is left in an orphaned\n * state. The only valid operation on an orphaned query is deleting it. Only\n * subqueries can be orphaned.\n *\n * @param query The query.\n * @return true if query is orphaned, otherwise false.\n */"
    },
    "ecs_meta_get_uint": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get field value as unsigned integer. */"
    },
    "ecs_is_alive": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "e",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Test whether an entity is alive.\n * An entity is alive when it has been returned by ecs_new (or similar) or if\n * it is not empty (componentts have been explicitly added to the id).\n *\n * @param world The world.\n * @param e The entity.\n * @return True if the entity is alive, false if the entity is not alive.\n */"
    },
    "ecs_readonly_begin": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Begin readonly mode.\n * Readonly mode guarantees that no mutations will occur on the world, which\n * makes the world safe to access from multiple threads. While the world is in\n * readonly mode, operations are deferred.\n * \n * Note that while similar to ecs_defer_begin, deferring only does not guarantee\n * the world is not mutated. Operations that are not deferred (like creating a\n * query) update data structures on the world and are allowed when deferring is\n * enabled, but not when the world is in readonly mode.\n * \n * A call to ecs_readonly_begin must be followed up with ecs_readonly_end.\n * \n * The ecs_progress() function automatically enables readonly mode while systems\n * are executed.\n * \n * When a world has more than one stage, the specific stage must be provided to\n * mutating ECS operations. Failing to do so will throw a readonly assert. A\n * world typically has more than one stage when using threads. An example:\n * \n * ecs_set_stage_count(world, 2);\n * ecs_stage_t *stage = ecs_get_stage(world, 1);\n * \n * ecs_readonly_begin(world);\n * ecs_add(world, e, Tag); // readonly assert\n * ecs_add(stage, e, Tag); // OK\n *\n * @param world The world\n * @return Whether world is in readonly mode.\n */"
    },
    "ecs_get_type": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_type_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_type_t",
          "kind": "typeAlias",
          "sizeOf": 16,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_type_t",
            "kind": "struct",
            "sizeOf": 16,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get the type of an entity.\n *\n * @param world The world.\n * @param entity The entity.\n * @return The type of the entity, NULL if the entity has no components.\n */"
    },
    "ecs_vec_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "flecs_to_snake_case": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* Convert identifier to snake case */"
    },
    "ecs_pipeline_stats_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "pipeline",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "stats",
          "type": {
            "name": "ecs_pipeline_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_stats_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_pipeline_stats_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get pipeline statistics.\n * Obtain statistics for the provided pipeline.\n *\n * @param world The world.\n * @param pipeline The pipeline.\n * @param stats Out parameter for statistics.\n * @return true if success, false if not a pipeline.\n */"
    },
    "ecs_cpp_component_register": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "symbol",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "alignment",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "implicit_name",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "existing_out",
          "type": {
            "name": "_Bool*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "_Bool",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        }
      ]
    },
    "flecs_hm_bucket_remove": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "bucket",
          "type": {
            "name": "ecs_hm_bucket_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hm_bucket_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hm_bucket_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "hash",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_query_next_instanced": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "iter",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Same as ecs_query_next, but always instanced.\n * See \u0022instanced\u0022 property of ecs_filter_desc_t.\n */"
    },
    "ecs_get_max_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_cpp_reset_count_inc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": []
    },
    "_ecs_print": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "level",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "////////////////////////////////////////////////////////////////////////////////\n//// Logging functions (do nothing when logging is enabled)\n////////////////////////////////////////////////////////////////////////////////"
    },
    "ecs_vasprintf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "args",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/* Create allocated string from format */"
    },
    "ecs_world_to_json": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_world_to_json_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_to_json_desc_t",
              "kind": "typeAlias",
              "sizeOf": 2,
              "alignOf": 1,
              "isConst": true,
              "innerType": {
                "name": "ecs_world_to_json_desc_t",
                "kind": "struct",
                "sizeOf": 2,
                "alignOf": 1
              }
            }
          }
        }
      ],
      "comment": "/** Serialize world into JSON string.\n * This operation iterates the contents of the world to JSON. The operation is\n * equivalent to the following code:\n * \n * ecs_filter_t *f = ecs_filter(world, {\n *   .terms = {{ .id = EcsAny }}\n * });\n * \n * ecs_iter_t it = ecs_filter_init(world, \u0026f);\n * ecs_iter_to_json_desc_t desc = { .serialize_table = true };\n * ecs_iter_to_json(world, iter, \u0026desc);\n * \n * @param world The world to serialize.\n * @return A JSON string with the serialized iterator data, or NULL if failed.\n */"
    },
    "ecs_snapshot_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "iter",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Progress snapshot iterator.\n * \n * @param iter The snapshot iterator.\n * @return True if more data is available, otherwise false.\n */"
    },
    "ecs_set_time_scale": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "scale",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/** Set time scale.\n * Increase or decrease simulation speed by the provided multiplier.\n *\n * @param world The world.\n * @param scale The scale to apply (default = 1).\n */"
    },
    "ecs_query_populate": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "iter",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "when_changed",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Populate iterator fields.\n * This operation can be combined with ecs_query_next_table to populate the\n * iterator fields for the current table.\n * \n * Populating fields conditionally can save time when a query uses change \n * detection, and only needs iterator data when the table has changed. When this\n * operation is called, inout/out terms will be marked dirty.\n * \n * In cases where inout/out terms are conditionally written and no changes\n * were made after calling ecs_query_populate, the ecs_query_skip function can\n * be called to prevent the matched table components from being marked dirty.\n * \n * This operation does should not be used with queries that match disabled \n * components, union relationships, or with queries that use order_by.\n * \n * When the when_changed argument is set to true, the iterator data will only\n * populate when the data has changed, using query change detection.\n * \n * @param iter The iterator.\n * @param when_changed Only populate data when result has changed.\n */"
    },
    "ecs_set_target_fps": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "fps",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/** Set target frames per second (FPS) for application.\n * Setting the target FPS ensures that ecs_progress is not invoked faster than\n * the specified FPS. When enabled, ecs_progress tracks the time passed since\n * the last invocation, and sleeps the remaining time of the frame (if any).\n *\n * This feature ensures systems are ran at a consistent interval, as well as\n * conserving CPU time by not running systems more often than required.\n *\n * Note that ecs_progress only sleeps if there is time left in the frame. Both\n * time spent in flecs as time spent outside of flecs are taken into\n * account.\n *\n * @param world The world.\n * @param fps The target FPS.\n */"
    },
    "ecs_children": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_iter_t",
        "kind": "typeAlias",
        "sizeOf": 608,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_iter_t",
          "kind": "struct",
          "sizeOf": 608,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "parent",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Iterator for a parent\u0027s children.\n * This operation is equivalent to a term iterator for (ChildOf, parent). \n * Iterate the result with ecs_children_next.\n * \n * @param world The world.\n * @param parent The parent for which to iterate the children.\n * @return The iterator.\n */"
    },
    "ecs_ptr_from_json": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "json",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_from_json_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_from_json_desc_t",
              "kind": "typeAlias",
              "sizeOf": 32,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_from_json_desc_t",
                "kind": "struct",
                "sizeOf": 32,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Parse JSON string into value.\n * This operation parses a JSON expression into the provided pointer. The\n * memory pointed to must be large enough to contain a value of the used type.\n * \n * @param world The world.\n * @param type The type of the expression to parse.\n * @param ptr Pointer to the memory to write to.\n * @param json The JSON expression to parse.\n * @param desc Configuration parameters for deserializer.\n * @return Pointer to the character after the last one read, or NULL if failed.\n */"
    },
    "ecs_id_is_wildcard": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Utility to check if id is a wildcard.\n *\n * @param id The id.\n * @return True if id is a wildcard or a pair containing a wildcard.\n */"
    },
    "ecs_vec_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_iter_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Count number of matched entities in query.\n * This operation returns the number of matched entities. If a query contains no\n * matched entities but still yields results (e.g. it has no terms with This\n * sources) the operation will return 0.\n * \n * To determine the number of matched entities, the operation iterates the\n * iterator until it yields no more results.\n * \n * @param it The iterator.\n * @return True if iterator has more results, false if not.\n */"
    },
    "ecs_term_move": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_term_t",
        "kind": "typeAlias",
        "sizeOf": 152,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_term_t",
          "kind": "struct",
          "sizeOf": 152,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Move resources of a term to another term.\n * Same as copy, but moves resources from src, if src-\u003Emove is set to true. If\n * src-\u003Emove is not set to true, this operation will do a copy.\n *\n * The conditional move reduces redundant allocations in scenarios where a list \n * of terms is partially created with allocated resources.\n *\n * @param src The term to move from.\n * @return The destination term.\n */"
    },
    "ecs_plecs_from_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Parse plecs string.\n * This parses a plecs string and instantiates the entities in the world.\n *\n * @param world The world.\n * @param name The script name (typically the file).\n * @param str The plecs string.\n * @return Zero if success, non-zero otherwise.\n */"
    },
    "ecs_table_lock": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Lock or unlock table.\n * When a table is locked, modifications to it will throw an assert. When the \n * table is locked recursively, it will take an equal amount of unlock\n * operations to actually unlock the table.\n *\n * Table locks can be used to build safe iterators where it is guaranteed that\n * the contents of a table are not modified while it is being iterated.\n *\n * The operation only works when called on the world, and has no side effects \n * when called on a stage. The assumption is that when called on a stage,\n * operations are deferred already.\n *\n * @param world The world.\n * @param table The table to lock.\n */"
    },
    "ecs_map_init_if": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Initialize new map if uninitialized, leave as is otherwise */"
    },
    "ecs_bulk_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_entity_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_bulk_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_bulk_desc_t",
              "kind": "typeAlias",
              "sizeOf": 296,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_bulk_desc_t",
                "kind": "struct",
                "sizeOf": 296,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Bulk create/populate new entities.\n * This operation bulk inserts a list of new or predefined entities into a\n * single table.\n * \n * The operation does not take ownership of component arrays provided by the\n * application. Components that are non-trivially copyable will be moved into\n * the storage.\n * \n * The operation will emit OnAdd events for each added id, and OnSet events for\n * each component that has been set.\n * \n * If no entity ids are provided by the application, the returned array of ids\n * points to an internal datastructure which changes when new entities are\n * created/deleted.\n * \n * If as a result of the operation triggers are invoked that deletes\n * entities and no entity ids were provided by the application, the returned\n * array of identifiers may be incorrect. To avoid this problem, an application\n * can first call ecs_bulk_init to create empty entities, copy the array to one\n * that is owned by the application, and then use this array to populate the\n * entities.\n * \n * @param world The world.\n * @param desc Bulk creation parameters.\n * @return Array with the list of entity ids created/populated.\n */"
    },
    "ecs_query_entity_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Returns number of entities query matched with.\n * This operation iterates all non-empty tables in the query cache to find the\n * total number of entities.\n *\n * @param query The query.\n * @return The number of matched entities.\n */"
    },
    "ecs_search": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "id_out",
          "type": {
            "name": "ecs_id_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Search for component id in table type.\n * This operation returns the index of first occurrance of the id in the table\n * type. The id may be a wildcard.\n * \n * When id_out is provided, the function will assign it with the found id. The\n * found id may be different from the provided id if it is a wildcard.\n * \n * This is a constant time operation.\n * \n * @param world The world.\n * @param table The table.\n * @param id The id to search for.\n * @param id_out If provided, it will be set to the found id (optional).\n * @return The index of the id in the table type.\n */"
    },
    "ecs_query_stats_repeat_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stats",
          "type": {
            "name": "ecs_query_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_stats_t",
              "kind": "typeAlias",
              "sizeOf": 3624,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_query_stats_t",
                "kind": "struct",
                "sizeOf": 3624,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Repeat last measurement. */"
    },
    "flecs_ballocator_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "ba",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_get_timeout": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "float",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "tick_source",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get current timeout value for the specified timer.\n * This operation returns the value set by ecs_set_timeout. If no timer is\n * active for this entity, the operation returns 0.\n *\n * After the timeout expires the EcsTimer component is removed from the entity.\n * This means that if ecs_get_timeout is invoked after the timer is expired, the\n * operation will return 0.\n *\n * The timer is synchronous, and is incremented each frame by delta_time.\n *\n * The tick_source entity will be be a tick source after this operation. Tick\n * sources can be read by getting the EcsTickSource component. If the tick\n * source ticked this frame, the \u0027tick\u0027 member will be true. When the tick \n * source is a system, the system will tick when the timer ticks.\n *\n * @param world The world.\n * @param tick_source The timer.\n * @return The current timeout value, or 0 if no timer is active.\n */"
    },
    "ecs_snapshot_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_iter_t",
        "kind": "typeAlias",
        "sizeOf": 608,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_iter_t",
          "kind": "struct",
          "sizeOf": 608,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "snapshot",
          "type": {
            "name": "ecs_snapshot_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_snapshot_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Obtain iterator to snapshot data.\n *\n * @param snapshot The snapshot to iterate over.\n * @return Iterator to snapshot data. */"
    },
    "ecs_field_is_set": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Test whether field is set.\n * \n * @param it The iterator.\n * @param index The index of the field in the iterator.\n * @return Whether the field is set.\n */"
    },
    "ecs_strbuf_get_small": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* Return small string from first element (appends \\0) */"
    },
    "ecs_merge": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Merge world or stage.\n * When automatic merging is disabled, an application can call this\n * operation on either an individual stage, or on the world which will merge\n * all stages. This operation may only be called when staging is not enabled\n * (either after progress() or after readonly_end()).\n *\n * This operation may be called on an already merged stage or world.\n *\n * @param world The world.\n */"
    },
    "ecs_strbuf_appendflt": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "v",
          "type": {
            "name": "double",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "nan_delim",
          "type": {
            "name": "char",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/* Append float to buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "flecs_bfree": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "memory",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "ecs_os_has_heap": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/** Are heap functions available? */"
    },
    "ecs_ref_init_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_ref_t",
        "kind": "typeAlias",
        "sizeOf": 32,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_ref_t",
          "kind": "struct",
          "sizeOf": 32,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a component ref.\n * A ref is a handle to an entity \u002B component which caches a small amount of\n * data to reduce overhead of repeatedly accessing the component. Use \n * ecs_ref_get to get the component data.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The id of the component.\n * @return The reference.\n */"
    },
    "flecs_strfree": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 128,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_allocator_t",
                "kind": "struct",
                "sizeOf": 128,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        }
      ]
    },
    "ecs_filter_copy": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Copy resources of one filter to another. */"
    },
    "ecs_vars_declare_w_value": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_expr_var_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_expr_var_t",
          "kind": "typeAlias",
          "sizeOf": 32,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_expr_var_t",
            "kind": "struct",
            "sizeOf": 32,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "vars",
          "type": {
            "name": "ecs_vars_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vars_t",
              "kind": "typeAlias",
              "sizeOf": 168,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vars_t",
                "kind": "struct",
                "sizeOf": 168,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "ecs_value_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_value_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_value_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Declare variable in current scope from value.\n * This operation takes ownership of the value. The value pointer must be \n * allocated with ecs_value_new.\n */"
    },
    "ecs_entity_to_json": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_entity_to_json_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_entity_to_json_desc_t",
              "kind": "typeAlias",
              "sizeOf": 12,
              "alignOf": 1,
              "isConst": true,
              "innerType": {
                "name": "ecs_entity_to_json_desc_t",
                "kind": "struct",
                "sizeOf": 12,
                "alignOf": 1
              }
            }
          }
        }
      ],
      "comment": "/** Serialize entity into JSON string.\n * This creates a JSON object with the entity\u0027s (path) name, which components\n * and tags the entity has, and the component values.\n * \n * The operation may fail if the entity contains components with invalid values.\n * \n * @param world The world.\n * @param entity The entity to serialize to JSON.\n * @return A JSON string with the serialized entity data, or NULL if failed.\n */"
    },
    "ecs_query_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_query_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_query_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_query_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_desc_t",
              "kind": "typeAlias",
              "sizeOf": 2576,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_query_desc_t",
                "kind": "struct",
                "sizeOf": 2576,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a query.\n * This operation creates a query. Queries are used to iterate over entities\n * that match a filter and are the fastest way to find and iterate over entities\n * and their components.\n * \n * Queries should be created once, and reused multiple times. While iterating a\n * query is a cheap operation, creating and deleting a query is expensive. The\n * reason for this is that queries are \u0022prematched\u0022, which means that a query\n * stores state about which entities (or rather, tables) match with the query.\n * Building up this state happens during query creation.\n *\n * Once a query is created, matching only happens when new tables are created.\n * In most applications this is an infrequent process, since it only occurs when\n * a new combination of components is introduced. While matching is expensive,\n * it is importent to note that matching does not happen on a per-entity basis,\n * but on a per-table basis. This means that the average time spent on matching\n * per frame should rapidly approach zero over the lifetime of an application.\n *\n * A query provides direct access to the component arrays. When an application\n * creates/deletes entities or adds/removes components, these arrays can shift\n * component values around, or may grow in size. This can cause unexpected or\n * undefined behavior to occur if these operations are performed while \n * iterating. To prevent this from happening an application should either not\n * perform these operations while iterating, or use deferred operations (see\n * ecs_defer_begin and ecs_defer_end).\n *\n * Queries can be created and deleted dynamically. If a query was not deleted\n * (using ecs_query_fini) before the world is deleted, it will be deleted \n * automatically.\n *\n * @param world The world.\n * @param desc A structure describing the query properties.\n * @return The new query.\n */"
    },
    "ecs_doc_get_brief": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get brief description from entity.\n * \n * @param world The world.\n * @param entity The entity from which to get the description.\n * @return The description.\n */"
    },
    "ecs_meta_get_float": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "double",
        "kind": "primitive",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get field value as float. */"
    },
    "ecs_clone": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "copy_value",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Clone an entity\n * This operation clones the components of one entity into another entity. If\n * no destination entity is provided, a new entity will be created. Component\n * values are not copied unless copy_value is true.\n *\n * @param world The world.\n * @param dst The entity to copy the components to.\n * @param src The entity to copy the components from.\n * @param copy_value If true, the value of components will be copied to dst.\n * @return The destination entity.\n */"
    },
    "ecs_ptr_to_json": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Serialize value into JSON string.\n * Same as ecs_array_to_json, with count = 0.\n * \n * @param world The world.\n * @param type The type of the value to serialize.\n * @param data The value to serialize.\n * @return String with JSON expression, or NULL if failed.\n */"
    },
    "flecs_sparse_get_dense": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get value from sparse set by dense id. This function is useful in \n * combination with flecs_sparse_count for iterating all values in the set. */"
    },
    "ecs_map_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_map_val_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_map_val_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_map_data_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "ecs_map_key_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get element for key, returns NULL if they key doesn\u0027t exist. */"
    },
    "ecs_log_set_level": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "level",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/** Enable or disable log.\n * This will enable builtin log. For log to work, it will have to be\n * compiled in which requires defining one of the following macros:\n *\n * FLECS_LOG_0 - All log is disabled\n * FLECS_LOG_1 - Enable log level 1\n * FLECS_LOG_2 - Enable log level 2 and below\n * FLECS_LOG_3 - Enable log level 3 and below\n *\n * If no log level is defined and this is a debug build, FLECS_LOG_3 will\n * have been automatically defined.\n *\n * The provided level corresponds with the log level. If -1 is provided as\n * value, warnings are disabled. If -2 is provided, errors are disabled as well.\n *\n * @param level Desired tracing level.\n * @return Previous log level.\n */"
    },
    "flecs_table_observed_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_set_tick_source": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "system",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "tick_source",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Assign tick source to system.\n * Systems can be their own tick source, which can be any of the tick sources\n * (one shot timers, interval times and rate filters). However, in some cases it\n * is must be guaranteed that different systems tick on the exact same frame.\n * \n * This cannot be guaranteed by giving two systems the same interval/rate filter\n * as it is possible that one system is (for example) disabled, which would\n * cause the systems to go out of sync. To provide these guarantees, systems\n * must use the same tick source, which is what this operation enables.\n *\n * When two systems share the same tick source, it is guaranteed that they tick\n * in the same frame. The provided tick source can be any entity that is a tick\n * source, including another system. If the provided entity is not a tick source\n * the system will not be ran.\n *\n * To disassociate a tick source from a system, use 0 for the tick_source \n * parameter.\n *\n * @param world The world.\n * @param system The system to associate with the timer.\n * @param tick_source The tick source to associate with the system.\n */"
    },
    "ecs_log_enable_colors": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "enabled",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Enable/disable tracing with colors.\n * By default colors are enabled.\n *\n * @param enabled Whether to enable tracing with colors.\n * @return Previous color setting.\n */"
    },
    "ecs_time_to_double": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "double",
        "kind": "primitive",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "t",
          "type": {
            "name": "ecs_time_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_time_t",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* Convert time value to a double */"
    },
    "ecs_table_get_type": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_type_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_type_t",
          "kind": "typeAlias",
          "sizeOf": 16,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_type_t",
            "kind": "struct",
            "sizeOf": 16,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get type for table.\n *\n * @param table The table.\n * @return The type of the table.\n */"
    },
    "ecs_entity_to_json_buf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "buf_out",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_entity_to_json_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_entity_to_json_desc_t",
              "kind": "typeAlias",
              "sizeOf": 12,
              "alignOf": 1,
              "isConst": true,
              "innerType": {
                "name": "ecs_entity_to_json_desc_t",
                "kind": "struct",
                "sizeOf": 12,
                "alignOf": 1
              }
            }
          }
        }
      ],
      "comment": "/** Serialize entity into JSON string buffer.\n * Same as ecs_entity_to_json, but serializes to an ecs_strbuf_t instance.\n * \n * @param world The world.\n * @param entity The entity to serialize.\n * @param buf_out The strbuf to append the string to.\n * @return Zero if success, non-zero if failed.\n */"
    },
    "FlecsMetricsImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/* Module import */"
    },
    "ecs_os_set_api": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "os_api",
          "type": {
            "name": "ecs_os_api_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_os_api_t",
              "kind": "typeAlias",
              "sizeOf": 296,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_os_api_t",
                "kind": "struct",
                "sizeOf": 296,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_table_get_column_size": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "size_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get column size from table.\n * This operation returns the component size for the provided index.\n * \n * @param table The table.\n * @param index The index of the column (corresponds with element in type).\n * @return The component size, or 0 if the index is not a component.\n */"
    },
    "ecs_http_server_dequeue": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "server",
          "type": {
            "name": "ecs_http_server_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "delta_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/** Process server requests. \n * This operation invokes the reply callback for each received request. No new\n * requests will be enqueued while processing requests.\n * \n * @param server The server for which to process requests.\n */"
    },
    "ecs_query_stats_reduce_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stats",
          "type": {
            "name": "ecs_query_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_stats_t",
              "kind": "typeAlias",
              "sizeOf": 3624,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_query_stats_t",
                "kind": "struct",
                "sizeOf": 3624,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "old",
          "type": {
            "name": "ecs_query_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_stats_t",
              "kind": "typeAlias",
              "sizeOf": 3624,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_query_stats_t",
                "kind": "struct",
                "sizeOf": 3624,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Reduce last measurement into previous measurement, restore old value. */"
    },
    "ecs_app_set_run_action": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "callback",
          "type": {
            "name": "ecs_app_run_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int (ecs_world_t *, ecs_app_desc_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Set custom run action.\n * See ecs_app_run.\n * \n * @param callback The run action.\n */"
    },
    "ecs_run_post_frame": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "action",
          "type": {
            "name": "ecs_fini_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_world_t *, void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Register action to be executed once after frame.\n * Post frame actions are typically used for calling operations that cannot be\n * invoked during iteration, such as changing the number of threads.\n * \n * @param world The world.\n * @param action The function to execute.\n * @param ctx Userdata to pass to the function */"
    },
    "ecs_term_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_iter_t",
        "kind": "typeAlias",
        "sizeOf": 608,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_iter_t",
          "kind": "struct",
          "sizeOf": 608,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "term",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Iterator for a single (component) id.\n * A term iterator returns all entities (tables) that match a single (component)\n * id. The search for the matching set of entities (tables) is performed in \n * constant time.\n *\n * @param world The world.\n * @param term The term.\n * @return The iterator.\n */"
    },
    "ecs_strbuf_appendstr_zerocpyn_const": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "n",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* Append string to buffer, transfer ownership to buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "ecs_parse_expr_token": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "token",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        }
      ],
      "comment": "/** Parse expression token.\n * Expression tokens can contain more characters (such as \u0027|\u0027) than tokens\n * parsed by the query (term) parser.\n * \n * @param name The name of the expression (used for debug logs).\n * @param expr The full expression (used for debug logs).\n * @param ptr The pointer to the expression to parse.\n * @param token The buffer to write to (must have size ECS_MAX_TOKEN_SIZE)\n * @return Pointer to the character after the last one read, or NULL if failed.\n */"
    },
    "ecs_query_empty_table_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Returns number of empty tables query matched with.\n *\n * @param query The query.\n * @return The number of matched empty tables.\n */"
    },
    "ecs_set_os_api_impl": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "ecs_get_symbol": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get the symbol of an entity.\n * This will return the symbol stored in (EcsIdentifier, EcsSymbol).\n *\n * @param world The world.\n * @param entity The entity.\n * @return The type of the entity, NULL if the entity has no name.\n */"
    },
    "ecs_emplace_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Emplace a component.\n * Emplace is similar to get_mut except that the component constructor is not\n * invoked for the returned pointer, allowing the component to be \u0022constructed\u0022\n * directly in the storage.\n *\n * Emplace can only be used if the entity does not yet have the component. If\n * the entity has the component, the operation will fail.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The component to obtain.\n * @return The (uninitialized) component pointer.\n */"
    },
    "ecs_value_free": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Destruct a value, free storage\n * \n * @param world The world.\n * @param type The type of the value to destruct.\n * @return Zero if success, nonzero if failed. \n */"
    },
    "ecs_meta_set_value": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "ecs_value_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_value_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_value_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Set field with dynamic value */"
    },
    "ecs_field_is_self": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Test whether the field is matched on self.\n * This operation returns whether the field is matched on the currently iterated\n * entity. This function will return false when the field is owned by another\n * entity, such as a parent or a prefab.\n * \n * When this operation returns false, the field must be accessed as a single \n * value instead of an array. Fields for which this operation returns true\n * return arrays with it-\u003Ecount values.\n *\n * @param it The iterator.\n * @param index The index of the field in the iterator.\n * @return Whether the field is matched on self.\n */"
    },
    "FlecsPipelineImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "////////////////////////////////////////////////////////////////////////////////\n//// Module\n////////////////////////////////////////////////////////////////////////////////"
    },
    "ecs_iter_get_var": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "var_id",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get value of iterator variable as entity.\n * A variable can be interpreted as entity if it is set to an entity, or if it\n * is set to a table range with count 1.\n * \n * This operation can only be invoked on valid iterators. The variable index\n * must be smaller than the total number of variables provided by the iterator\n * (as set in ecs_iter_t::variable_count).\n * \n * @param it The iterator.\n * @param var_id The variable index.\n */"
    },
    "ecs_os_strset": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "char**",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "char",
                "kind": "primitive",
                "sizeOf": 1,
                "alignOf": 1
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_vars_pop": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "vars",
          "type": {
            "name": "ecs_vars_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vars_t",
              "kind": "typeAlias",
              "sizeOf": 168,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vars_t",
                "kind": "struct",
                "sizeOf": 168,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Pop variable scope */"
    },
    "flecs_sparse_ensure": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Get or create element by (sparse) id. */"
    },
    "pinvoke_EcsOnValidate": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "ecs_term_copy": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_term_t",
        "kind": "typeAlias",
        "sizeOf": 152,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_term_t",
          "kind": "struct",
          "sizeOf": 152,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Copy resources of a term to another term.\n * This operation copies one term to another term. If the source term contains\n * allocated resources (such as identifiers), they will be duplicated so that\n * no memory is shared between the terms.\n *\n * @param src The term to copy from.\n * @return The destination term.\n */"
    },
    "ecs_map_clear": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Remove all elements from map. */"
    },
    "ecs_iter_set_var": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "var_id",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Set value for iterator variable.\n * This constrains the iterator to return only results for which the variable\n * equals the specified value. The default value for all variables is \n * EcsWildcard, which means the variable can assume any value.\n * \n * Example:\n * \n * // Rule that matches (Eats, *)\n * ecs_rule_t *r = ecs_rule_init(world, \u0026(ecs_filter_desc_t){\n *   .terms = {\n *     { .first.id = Eats, .second.name = \u0022_Food\u0022 }\n *   }\n * });\n * \n * int food_var = ecs_rule_find_var(r, \u0022Food\u0022);\n * \n * // Set Food to Apples, so we\u0027re only matching (Eats, Apples)\n * ecs_iter_t it = ecs_rule_iter(world, r);\n * ecs_iter_set_var(\u0026it, food_var, Apples);\n * \n * while (ecs_rule_next(\u0026it)) {\n *   for (int i = 0; i \u003C it.count; i \u002B\u002B) {\n *     // iterate as usual\n *   }\n * }\n * \n * The variable must be initialized after creating the iterator and before the\n * first call to next.\n * \n * @param it The iterator.\n * @param var_id The variable index.\n * @param entity The entity variable value.\n */"
    },
    "ecs_filter_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Deinitialize filter.\n * Free resources associated with filter.\n *\n * @param filter The filter to deinitialize.\n */"
    },
    "ecs_strbuf_list_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* Insert a new element in list */"
    },
    "flecs_strdup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 128,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_allocator_t",
                "kind": "struct",
                "sizeOf": 128,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "flecs_ballocator_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "ba",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_table_get_index": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get column index for id.\n * This operation returns the index for an id in the table\u0027s type.\n * \n * @param world The world.\n * @param table The table.\n * @param id The id.\n * @return The index of the id in the table type, or -1 if not found.\n */"
    },
    "ecs_strbuf_appendstr_zerocpyn": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        },
        {
          "name": "n",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* Append string to buffer, transfer ownership to buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "ecs_term_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "term",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Convert ter, to string expression.\n * Convert term to a string expression. The resulting expression is equivalent\n * to the same term, with the exception of And \u0026 Or operators.\n */"
    },
    "ecs_set_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Set the value of a component.\n * This operation allows an application to set the value of a component. The\n * operation is equivalent to calling ecs_get_mut and ecs_modified.\n *\n * If the provided entity is 0, a new entity will be created.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The id of the component to set.\n * @param size The size of the pointer to the value.\n * @param ptr The pointer to the value.\n * @return The entity. A new entity if no entity was provided.\n */"
    },
    "ecs_system_stats_reduce": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_system_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_system_stats_t",
              "kind": "typeAlias",
              "sizeOf": 8448,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_system_stats_t",
                "kind": "struct",
                "sizeOf": 8448,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_system_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_system_stats_t",
              "kind": "typeAlias",
              "sizeOf": 8448,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_system_stats_t",
                "kind": "struct",
                "sizeOf": 8448,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Reduce source measurement window into single destination measurement */"
    },
    "ecs_strbuf_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* Return result string */"
    },
    "ecs_strbuf_list_pop": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "list_close",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* Pop a new list */"
    },
    "ecs_vec_set_min_count_zeromem": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "elem_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_parse_ws_eol": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "ptr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Skip whitespace and newline characters.\n * This function skips whitespace characters.\n * \n * @param ptr Pointer to (potential) whitespaces to skip.\n * @return Pointer to the next non-whitespace character.\n */"
    },
    "ecs_vec_set_min_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "elem_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_id_is_tag": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Returns whether specified id a tag.\n * This operation returns whether the specified type is a tag (a component \n * without data/size).\n * \n * An id is a tag when:\n * - it is an entity without the EcsComponent component\n * - it has an EcsComponent with size member set to 0\n * - it is a pair where both elements are a tag\n * - it is a pair where the first element has the EcsTag tag\n * \n * @param world The world.\n * @param id The id.\n * @return Whether the provided id is a tag.\n */"
    },
    "ecs_get_system_ctx": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "system",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get system context.\n * This operation returns the context pointer set for the system. If\n * the provided entity is not a system, the function will return NULL.\n *\n * @param world The world.\n * @param system The system from which to obtain the context.\n * @return The context.\n */"
    },
    "ecs_get_world_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_world_info_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_world_info_t",
          "kind": "typeAlias",
          "sizeOf": 296,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_world_info_t",
            "kind": "struct",
            "sizeOf": 296,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get world info.\n *\n * @param world The world.\n * @return Pointer to the world info. This pointer will remain valid for as long\n *         as the world is valid.\n */"
    },
    "ecs_get_type_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_type_info_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_type_info_t",
          "kind": "typeAlias",
          "sizeOf": 144,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_type_info_t",
            "kind": "struct",
            "sizeOf": 144,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get the type for an id.\n * This function returnsthe type information for an id. The specified id can be\n * any valid id. For the rules on how type information is determined based on\n * id, see ecs_get_typeid.\n * \n * @param world The world.\n * @param id The id.\n * @return The type information of the id.\n */"
    },
    "ecs_strip_generation": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_id_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "e",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Remove generation from entity id.\n *\n * @param e The entity id.\n * @return The entity id without the generation count.\n */"
    },
    "ecs_delete_with": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Delete all entities with the specified id.\n * This will delete all entities (tables) that have the specified id. The id \n * may be a wildcard and/or a pair.\n * \n * @param world The world.\n * @param id The id.\n */"
    },
    "ecs_delete_empty_tables": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "clear_generation",
          "type": {
            "name": "uint16_t",
            "kind": "typeAlias",
            "sizeOf": 2,
            "alignOf": 2,
            "innerType": {
              "name": "unsigned short",
              "kind": "primitive",
              "sizeOf": 2,
              "alignOf": 2
            }
          }
        },
        {
          "name": "delete_generation",
          "type": {
            "name": "uint16_t",
            "kind": "typeAlias",
            "sizeOf": 2,
            "alignOf": 2,
            "innerType": {
              "name": "unsigned short",
              "kind": "primitive",
              "sizeOf": 2,
              "alignOf": 2
            }
          }
        },
        {
          "name": "min_id_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "time_budget_seconds",
          "type": {
            "name": "double",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ],
      "comment": "/** Cleanup empty tables.\n * This operation cleans up empty tables that meet certain conditions. Having\n * large amounts of empty tables does not negatively impact performance of the\n * ECS, but can take up considerable amounts of memory, especially in \n * applications with many components, and many components per entity.\n * \n * The generation specifies the minimum number of times this operation has\n * to be called before an empty table is cleaned up. If a table becomes non\n * empty, the generation is reset.\n * \n * The operation allows for both a \u0022clear\u0022 generation and a \u0022delete\u0022\n * generation. When the clear generation is reached, the table\u0027s \n * resources are freed (like component arrays) but the table itself is not\n * deleted. When the delete generation is reached, the empty table is deleted.\n * \n * By specifying a non-zero id the cleanup logic can be limited to tables with\n * a specific (component) id. The operation will only increase the generation\n * count of matching tables.\n * \n * The min_id_count specifies a lower bound for the number of components a table\n * should have. Often the more components a table has, the more specific it is \n * and therefore less likely to be reused.\n * \n * The time budget specifies how long the operation should take at most.\n * \n * @param world The world.\n * @param id Optional component filter for the tables to evaluate.\n * @param clear_generation Free table data when generation \u003E clear_generation.\n * @param delete_generation Delete table when generation \u003E delete_generation.\n * @param min_id_count Minimum number of component ids the table should have.\n * @param time_budget_seconds Amount of time operation is allowed to spend.\n * @return Number of deleted tables.\n */"
    },
    "ecs_id_in_use": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Returns whether specified id is in use.\n * This operation returns whether an id is in use in the world. An id is in use\n * if it has been added to one or more tables.\n * \n * @param world The world.\n * @param id The id.\n * @return Whether the id is in use.\n */"
    },
    "ecs_get_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get the current pipeline.\n * This operation gets the current pipeline.\n *\n * @param world The world.\n * @return The current pipeline.\n */"
    },
    "ecs_strbuf_appendstrn": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "n",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* Append n characters to buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "ecs_world_stats_repeat_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stats",
          "type": {
            "name": "ecs_world_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_stats_t",
              "kind": "typeAlias",
              "sizeOf": 96024,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_world_stats_t",
                "kind": "struct",
                "sizeOf": 96024,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Repeat last measurement. */"
    },
    "ecs_set_alias": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "alias",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Set alias for entity. \n * An entity can be looked up using its alias from the root scope without \n * providing the fully qualified name if its parent. An entity can only have\n * a single alias.\n * \n * The symbol is stored in (EcsIdentifier, EcsAlias).\n * \n * @param world The world.\n * @param entity The entity.\n * @param alias The alias.\n */"
    },
    "ecs_add_path_w_sep": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "parent",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "path",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "sep",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "prefix",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Add specified path to entity.\n * This operation is similar to ecs_new_from_path, but will instead add the path\n * to an existing entity.\n *\n * If an entity already exists for the path, it will be returned instead.\n *\n * @param world The world.\n * @param entity The entity to which to add the path.\n * @param parent The entity relative to which the entity should be created.\n * @param path The path to create the entity for.\n * @param sep The separator used in the path.\n * @param prefix The prefix used in the path.\n * @return The entity.\n */"
    },
    "ecs_query_get_filter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_filter_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_filter_t",
          "kind": "typeAlias",
          "sizeOf": 88,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_filter_t",
            "kind": "struct",
            "sizeOf": 88,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get filter from a query.\n * This operation obtains a pointer to the internally constructed filter\n * of the query and can be used to introspect the query terms.\n *\n * @param query The query.\n */"
    },
    "ecs_get_observer_binding_ctx": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "observer",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ]
    },
    "ecs_filter_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Convert filter to string expression.\n * Convert filter terms to a string expression. The resulting expression can be\n * parsed to create the same filter.\n */"
    },
    "ecs_set_hooks_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "hooks",
          "type": {
            "name": "ecs_type_hooks_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_hooks_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_hooks_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Register hooks for component.\n * Hooks allow for the execution of user code when components are constructed,\n * copied, moved, destructed, added, removed or set. Hooks can be assigned as\n * as long as a component has not yet been used (added to an entity).\n * \n * The hooks that are currently set can be accessed with ecs_get_type_info.\n *\n * @param world The world.\n * @param id The component id for which to register the actions\n * @param hooks Type that contains the component actions.\n */"
    },
    "FlecsUnitsImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "////////////////////////////////////////////////////////////////////////////////\n//// Module\n////////////////////////////////////////////////////////////////////////////////"
    },
    "ecs_doc_set_brief": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "description",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Add brief description to entity.\n * \n * @param world The world.\n * @param entity The entity to which to add the description.\n * @param description The description to add.\n */"
    },
    "_flecs_hashmap_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "hm",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "value_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "hash",
          "type": {
            "name": "ecs_hash_value_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t (const void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "compare",
          "type": {
            "name": "ecs_compare_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int (const void *, const void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 128,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_allocator_t",
                "kind": "struct",
                "sizeOf": 128,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_pipeline_stats_reduce": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_pipeline_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_stats_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_pipeline_stats_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_pipeline_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_stats_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_pipeline_stats_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Reduce source measurement window into single destination measurement */"
    },
    "ecs_entity_from_json": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "json",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_from_json_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_from_json_desc_t",
              "kind": "typeAlias",
              "sizeOf": 32,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_from_json_desc_t",
                "kind": "struct",
                "sizeOf": 32,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Parse JSON object with multiple component values into entity. The format\n * is the same as the one outputted by ecs_entity_to_json, but at the moment\n * only supports the \u0022ids\u0022 and \u0022values\u0022 member. \n * \n * @param world The world.\n * @param entity The entity to serialize to.\n * @param json The JSON expression to parse (see entity in JSON format manual).\n * @param desc Configuration parameters for deserializer.\n * @return Pointer to the character after the last one read, or NULL if failed.\n */"
    },
    "ecs_meta_push": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Push a scope (required/only valid for structs \u0026 collections) */"
    },
    "ecs_map_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Deinitialize map. */"
    },
    "ecs_os_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "ecs_vars_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "vars",
          "type": {
            "name": "ecs_vars_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vars_t",
              "kind": "typeAlias",
              "sizeOf": 168,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vars_t",
                "kind": "struct",
                "sizeOf": 168,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Cleanup variable storage */"
    },
    "ecs_meta_cursor": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_meta_cursor_t",
        "kind": "typeAlias",
        "sizeOf": 2592,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_meta_cursor_t",
          "kind": "struct",
          "sizeOf": 2592,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "ecs_field_src": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Return field source.\n * The field source is the entity on which the field was matched.\n * \n * @param it The iterator.\n * @param index The index of the field in the iterator.\n * @return The source for the field.\n */"
    },
    "ecs_os_err": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "msg",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_get_lookup_path": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_entity_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get current lookup path.\n * Returns value set by ecs_set_lookup_path.\n * \n * @param world The world.\n * @return The current lookup path.\n */"
    },
    "ecs_iter_first": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get first matching entity from iterator.\n * After this operation the application should treat the iterator as if it has\n * been iterated until completion.\n * \n * @param it The iterator.\n * @return The first matching entity, or 0 if no entities were matched.\n */"
    },
    "pinvoke_EcsDependsOn": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "ecs_import": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "module",
          "type": {
            "name": "ecs_module_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_world_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "module_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Import a module.\n * This operation will load a modules and store the public module handles in the\n * handles_out out parameter. The module name will be used to verify if the\n * module was already loaded, in which case it won\u0027t be reimported. The name\n * will be translated from PascalCase to an entity path (pascal.case) before the\n * lookup occurs.\n *\n * Module contents will be stored as children of the module entity. This \n * prevents modules from accidentally defining conflicting identifiers. This is\n * enforced by setting the scope before and after loading the module to the \n * module entity id.\n *\n * A more convenient way to import a module is by using the ECS_IMPORT macro.\n *\n * @param world The world.\n * @param module The module import function.\n * @param module_name The name of the module.\n * @return The module entity.\n */"
    },
    "ecs_parse_ws": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "ptr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Skip whitespace characters.\n * This function skips whitespace characters. Does not skip newlines.\n * \n * @param ptr Pointer to (potential) whitespaces to skip.\n * @return Pointer to the next non-whitespace character.\n */"
    },
    "FlecsMonitorImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/* Module import */"
    },
    "_flecs_hashmap_remove": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "value_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_meta_set_null": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Set field with null value */"
    },
    "ecs_http_get_header": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "req",
          "type": {
            "name": "ecs_http_request_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_request_t",
              "kind": "typeAlias",
              "sizeOf": 1072,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_http_request_t",
                "kind": "struct",
                "sizeOf": 1072,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Find header in request. \n * \n * @param req The request.\n * @param name name of the header to find\n * @return The header value, or NULL if not found.\n*/"
    },
    "ecs_app_run": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_app_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_app_desc_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_app_desc_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Run application.\n * This will run the application with the parameters specified in desc. After\n * the application quits (ecs_quit is called) the world will be cleaned up.\n * \n * If a custom run action is set, it will be invoked by this operation. The\n * default run action calls the frame action in a loop until it returns a\n * non-zero value.\n * \n * @param world The world.\n * @param desc Application parameters.\n */"
    },
    "ecs_struct_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_struct_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_struct_desc_t",
              "kind": "typeAlias",
              "sizeOf": 1544,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_struct_desc_t",
                "kind": "struct",
                "sizeOf": 1544,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a new struct type */"
    },
    "flecs_hashmap_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "flecs_hashmap_iter_t",
        "kind": "typeAlias",
        "sizeOf": 48,
        "alignOf": 8,
        "innerType": {
          "name": "flecs_hashmap_iter_t",
          "kind": "struct",
          "sizeOf": 48,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_should_quit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Return whether a quit has been signaled.\n *\n * @param world The world.\n */"
    },
    "ecs_read_end": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "record",
          "type": {
            "name": "ecs_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_record_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_record_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** End read access to entity.\n * This operation ends read access, and must be called after ecs_read_begin.\n *\n * @param record Record to the entity.\n */"
    },
    "_ecs_logv": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "level",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "args",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "ecs_new_low_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Create new low id.\n * This operation returns a new low id. Entity ids start after the\n * FLECS_HI_COMPONENT_ID constant. This reserves a range of low ids for things \n * like components, and allows parts of the code to optimize operations.\n *\n * Note that FLECS_HI_COMPONENT_ID does not represent the maximum number of \n * components that can be created, only the maximum number of components that\n * can take advantage of these optimizations.\n * \n * This operation is guaranteed to return an empty entity as it does not use \n * values set by ecs_set_scope or ecs_set_with.\n * \n * This operation does not recycle ids.\n *\n * @param world The world.\n * @return The new component id.\n */"
    },
    "ecs_identifier_is_0": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "_flecs_hashmap_set": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "value_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_pipeline_stats_repeat_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stats",
          "type": {
            "name": "ecs_pipeline_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_stats_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_pipeline_stats_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Repeat last measurement. */"
    },
    "ecs_value_move_w_type_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "ti",
          "type": {
            "name": "ecs_type_info_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "typeAlias",
              "sizeOf": 144,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_info_t",
                "kind": "struct",
                "sizeOf": 144,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Move value.\n * \n * @param world The world.\n * @param ti Type info of the value to move.\n * @param dst Pointer to the storage to move to.\n * @param src Pointer to the value to move.\n * @return Zero if success, nonzero if failed. \n */"
    },
    "ecs_enable_range_check": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "enable",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Enable/disable range limits.\n * When an application is both a receiver of range-limited entities and a\n * producer of range-limited entities, range checking needs to be temporarily\n * disabled when inserting received entities. Range checking is disabled on a \n * stage, so setting this value is thread safe.\n *\n * @param world The world.\n * @param enable True if range checking should be enabled, false to disable.\n * @return The previous value.\n */"
    },
    "flecs_sparse_last_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get last issued id. */"
    },
    "ecs_http_server_http_request": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "srv",
          "type": {
            "name": "ecs_http_server_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "req",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "len",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "reply_out",
          "type": {
            "name": "ecs_http_reply_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_reply_t",
              "kind": "typeAlias",
              "sizeOf": 2232,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_http_reply_t",
                "kind": "struct",
                "sizeOf": 2232,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Emulate a request.\n * The request string must be a valid HTTP request. A minimal example:\n *   GET /entity/flecs/core/World?label=true HTTP/1.1\n *\n * @param srv The server.\n * @param req The request.\n * @param len The length of the request (optional).\n * @return The reply.\n */"
    },
    "pinvoke_EcsPostUpdate": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "flecs_ballocator_new": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_block_allocator_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_block_allocator_t",
          "kind": "typeAlias",
          "sizeOf": 48,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_block_allocator_t",
            "kind": "struct",
            "sizeOf": 48,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_meta_from_desc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "component",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "kind",
          "type": {
            "name": "ecs_type_kind_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_type_kind_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Populate meta information from type descriptor. */"
    },
    "ecs_record_get_entity": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "record",
          "type": {
            "name": "ecs_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_record_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_record_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get entity corresponding with record.\n * This operation only works for entities that are not empty.\n * \n * @param record The record for which to obtain the entity id.\n */"
    },
    "ecs_table_get_depth": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "rel",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Return depth for table in tree for relationship rel.\n * Depth is determined by counting the number of targets encountered while \n * traversing up the relationship tree for rel. Only acyclic relationships are\n * supported.\n * \n * @param world The world.\n * @param table The table.\n * @param rel The relationship.\n * @return The depth of the table in the tree.\n */"
    },
    "ecs_term_match_0": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "term",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_vector_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_vector_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vector_desc_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_vector_desc_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a new vector type */"
    },
    "ecs_set_with": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Set current with id.\n * New entities are automatically created with the specified id.\n *\n * @param world The world.\n * @param id The id.\n * @return The previous id.\n */"
    },
    "ecs_meta_set_string": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Set field with string value */"
    },
    "pinvoke_EcsChildOf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "ecs_set_timeout": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "tick_source",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "timeout",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/** Set timer timeout.\n * This operation executes any systems associated with the timer after the\n * specified timeout value. If the entity contains an existing timer, the \n * timeout value will be reset. The timer can be started and stopped with \n * ecs_start_timer and ecs_stop_timer.\n *\n * The timer is synchronous, and is incremented each frame by delta_time.\n *\n * The tick_source entity will be be a tick source after this operation. Tick\n * sources can be read by getting the EcsTickSource component. If the tick\n * source ticked this frame, the \u0027tick\u0027 member will be true. When the tick \n * source is a system, the system will tick when the timer ticks.\n *\n * @param world The world.\n * @param tick_source The timer for which to set the timeout (0 to create one).\n * @param timeout The timeout value.\n * @return The timer entity.\n */"
    },
    "ecs_id_is_valid": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Utility to check if id is valid.\n * A valid id is an id that can be added to an entity. Invalid ids are:\n * - ids that contain wildcards\n * - ids that contain invalid entities\n * - ids that are 0 or contain 0 entities\n *\n * Note that the same rules apply to removing from an entity, with the exception\n * of wildcards.\n *\n * @param world The world.\n * @param id The id.\n * @return True if the id is valid.\n */"
    },
    "ecs_meta_get_int": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get field value as signed integer. */"
    },
    "ecs_strbuf_append": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* Append format string to a buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "ecs_query_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_iter_t",
        "kind": "typeAlias",
        "sizeOf": 608,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_iter_t",
          "kind": "struct",
          "sizeOf": 608,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Return a query iterator.\n * A query iterator lets an application iterate over entities that match the\n * specified query. If a sorting function is specified, the query will check\n * whether a resort is required upon creating the iterator.\n *\n * Creating a query iterator is a cheap operation that does not allocate any\n * resources. An application does not need to deinitialize or free a query \n * iterator before it goes out of scope.\n *\n * To iterate the iterator, an application should use ecs_query_next to progress\n * the iterator and test if it has data.\n *\n * Query iteration requires an outer and an inner loop. The outer loop uses\n * ecs_query_next to test if new tables are available. The inner loop iterates\n * the entities in the table, and is usually a for loop that uses iter.count to\n * loop through the entities and component arrays.\n *\n * The two loops are necessary because of how data is stored internally. \n * Entities are grouped by the components they have, in tables. A single query \n * can (and often does) match with multiple tables. Because each table has its\n * own set of arrays, an application has to reobtain pointers to those arrays\n * for each matching table.\n *\n * @param world The world or stage, when iterating in readonly mode.\n * @param query The query to iterate.\n * @return The query iterator.\n */"
    },
    "ecs_get_stage_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get current stage id.\n * The stage id can be used by an application to learn about which stage it is\n * using, which typically corresponds with the worker thread id.\n *\n * @param world The world.\n * @return The stage id.\n */"
    },
    "ecs_get_alive": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "e",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get alive identifier.\n * In some cases an application may need to work with identifiers from which\n * the generation has been stripped. A typical scenario in which this happens is\n * when iterating relationships in an entity type.\n *\n * For example, when obtaining the parent id from a ChildOf relationship, the parent\n * (second element of the pair) will have been stored in a 32 bit value, which \n * cannot store the entity generation. This function can retrieve the identifier\n * with the current generation for that id.\n *\n * If the provided identifier is not alive, the function will return 0.\n *\n * @param world The world.\n * @param e The for which to obtain the current alive entity id.\n * @return The alive entity id if there is one, or 0 if the id is not alive.\n */"
    },
    "flecs_sparse_clear": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Remove all elements from sparse set */"
    },
    "ecs_map_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_map_iter_t",
        "kind": "typeAlias",
        "sizeOf": 32,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_map_iter_t",
          "kind": "struct",
          "sizeOf": 32,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Return iterator to map contents. */"
    },
    "FlecsCoreDocImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/* Module import */"
    },
    "ecs_system_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_system_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_system_desc_t",
              "kind": "typeAlias",
              "sizeOf": 2664,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_system_desc_t",
                "kind": "struct",
                "sizeOf": 2664,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a system */"
    },
    "ecs_value_init_w_type_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "ti",
          "type": {
            "name": "ecs_type_info_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "typeAlias",
              "sizeOf": 144,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_info_t",
                "kind": "struct",
                "sizeOf": 144,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Construct a value in existing storage \n *\n * @param world The world.\n * @param ti The type info of the type to create.\n * @param ptr Pointer to a value of type \u0027type\u0027\n * @return Zero if success, nonzero if failed.\n */"
    },
    "ecs_table_swap_rows": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "row_1",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "row_2",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Swaps two elements inside the table. This is useful for implementing custom\n * table sorting algorithms.\n * @param world The world\n * @param table The table to swap elements in\n * @param row_1 Table element to swap with row_2\n * @param row_2 Table element to swap with row_1\n*/"
    },
    "ecs_table_get_column": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get column from table.\n * This operation returns the component array for the provided index.\n * \n * @param table The table.\n * @param index The index of the column (corresponds with element in type).\n * @param offset The index of the first row to return (0 for entire column).\n * @return The component array, or NULL if the index is not a component.\n */"
    },
    "ecs_strbuf_appendint": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "v",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/* Append int to buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "ecs_table_remove_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_table_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_table_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get table that has all components of current table minus the specified id.\n * If the provided table doesn\u0027t have the provided id, the operation will return\n * the provided table.\n *\n * @param world The world.\n * @param table The table.\n * @param id The id to remove.\n * @result The resulting table.\n */"
    },
    "ecs_world_stats_reduce_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stats",
          "type": {
            "name": "ecs_world_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_stats_t",
              "kind": "typeAlias",
              "sizeOf": 96024,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_world_stats_t",
                "kind": "struct",
                "sizeOf": 96024,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "old",
          "type": {
            "name": "ecs_world_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_stats_t",
              "kind": "typeAlias",
              "sizeOf": 96024,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_world_stats_t",
                "kind": "struct",
                "sizeOf": 96024,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Reduce last measurement into previous measurement, restore old value. */"
    },
    "ecs_has_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Test if an entity has an id.\n * This operation returns true if the entity has or inherits the specified id.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The id to test for.\n * @return True if the entity has the id, false if not.\n */"
    },
    "ecs_stresc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_size_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int32_t",
          "kind": "typeAlias",
          "sizeOf": 4,
          "alignOf": 4,
          "innerType": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      },
      "parameters": [
        {
          "name": "out",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "delimiter",
          "type": {
            "name": "char",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "in",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Write an escaped string.\n * Write an input string to an output string, escape characters where necessary.\n * To determine the size of the output string, call the operation with a NULL\n * argument for \u0027out\u0027, and use the returned size to allocate a string that is\n * large enough.\n * \n * @param out Pointer to output string (msut be).\n * @param size Maximum number of characters written to output.\n * @param delimiter The delimiter used (for example \u0027\u0022\u0027).\n * @param in The input string.\n * @return The number of characters that (would) have been written.\n */"
    },
    "ecs_strbuf_appendstr_zerocpy_const": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* Append string to buffer, do not free/modify string.\n * Returns false when max is reached, true when there is still space */"
    },
    "_ecs_parser_errorv": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "column",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "args",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "ecs_app_set_frame_action": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "callback",
          "type": {
            "name": "ecs_app_frame_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int (ecs_world_t *, const ecs_app_desc_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Set custom frame action.\n * See ecs_app_run_frame.\n * \n * @param callback The frame action.\n */"
    },
    "ecs_os_trace": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "msg",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_iter_set_var_as_range": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "var_id",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "range",
          "type": {
            "name": "ecs_table_range_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_range_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_table_range_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Same as ecs_iter_set_var, but for a range of entities\n * This constrains the variable to a range of entities in a table.\n * \n * @param it The iterator.\n * @param var_id The variable index.\n * @param range The range variable value.\n */"
    },
    "ecs_strbuf_vappend": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "args",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/* Append format string with argument list to a buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "ecs_type_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_type_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Convert type to string.\n * The result of this operation must be freed with ecs_os_free.\n * \n * @param world The world.\n * @param type The type.\n * @return The stringified type.\n */"
    },
    "ecs_meta_get_string": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get field value as string. \n * This operation does not perform conversions. If the field is not a string,\n * this operation will fail.\n */"
    },
    "ecs_vec_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "pinvoke_EcsOnStore": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "ecs_world_stats_reduce": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_world_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_stats_t",
              "kind": "typeAlias",
              "sizeOf": 96024,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_world_stats_t",
                "kind": "struct",
                "sizeOf": 96024,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_world_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_stats_t",
              "kind": "typeAlias",
              "sizeOf": 96024,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_world_stats_t",
                "kind": "struct",
                "sizeOf": 96024,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Reduce source measurement window into single destination measurement. */"
    },
    "ecs_record_find": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_record_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_record_t",
          "kind": "typeAlias",
          "sizeOf": 24,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_record_t",
            "kind": "struct",
            "sizeOf": 24,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Find record for entity. */"
    },
    "_ecs_printv": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "level",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "args",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "ecs_new_w_table": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Create new entity in table.\n * This operation creates a new entity in the specified table.\n * \n * @param world The world.\n * @param table The table to which to add the new entity.\n * @return The new entity.\n */"
    },
    "ecs_iter_poly": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "poly",
          "type": {
            "name": "ecs_poly_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_poly_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "iter",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "filter",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create iterator from poly object.\n * The provided poly object must have the iterable mixin. If an object is \n * provided that does not have the mixin, the function will assert. \n * \n * When a filter is provided, an array of two iterators must be passed to the \n * function. This allows the mixin implementation to create a chained iterator \n * when necessary, which requires two iterator objects.\n * \n * If a filter is provided, the first element in the array of two iterators is\n * the one that should be iterated. The mixin implementation may or may not set\n * the second element, depending on whether an iterator chain is required.\n * \n * Additionally, when a filter is provided the returned iterator will be for a\n * single term with the provided filter id. If the iterator is chained, the\n * previous iterator in the chain can be accessed through it-\u003Echain_it.\n * \n * @param world The world or stage for which to create the iterator.\n * @param poly The poly object from which to create the iterator.\n * @param iter The iterator (out, ecs_iter_t[2] when filter is set).\n * @param filter Optional term used for filtering the results.\n */"
    },
    "ecs_os_has_time": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/** Are time functions available? */"
    },
    "flecs_hashmap_get_bucket": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_hm_bucket_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_hm_bucket_t",
          "kind": "typeAlias",
          "sizeOf": 48,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_hm_bucket_t",
            "kind": "struct",
            "sizeOf": 48,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "hash",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "flecs_balloc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_doc_get_name": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get human readable name from entity.\n * If entity does not have an explicit human readable name, this operation will\n * return the entity name.\n * \n * To test if an entity has a human readable name, use:\n *   ecs_has_pair(world, e, ecs_id(EcsDescription), EcsName);\n * Or in C\u002B\u002B:\n *   e.has\u003Cflecs::Description\u003E(flecs::Name);\n * \n * @param world The world.\n * @param entity The entity from which to get the name.\n * @return The name.\n */"
    },
    "ecs_vec_first": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_type_info_to_json_buf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "buf_out",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Serialize type info into JSON string buffer.\n * Same as ecs_type_info_to_json, but serializes to an ecs_strbuf_t instance.\n * \n * @param world The world.\n * @param type The type to serialize.\n * @param buf_out The strbuf to append the string to.\n * @return Zero if success, non-zero if failed.\n */"
    },
    "ecs_override_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Add override for (component) id.\n * Adding an override to an entity ensures that when the entity is instantiated\n * (by adding an IsA relationship to it) the component with the override is\n * copied to a component that is private to the instance. By default components\n * reachable through an IsA relationship are shared.\n * \n * Adding an override does not add the component. If an override is added to an\n * entity that does not have the component, it will still be added to the\n * instance, but with an uninitialized value (unless the component has a ctor).\n * When the entity does have the entity, the component of the instance will be\n * initialized with the value of the component on the entity.\n * \n * This is the same as what happens when calling ecs_add_id for an id that is\n * inherited (reachable through an IsA relationship).\n * \n * This operation is equivalent to doing:\n *   ecs_add_id(world, entity, ECS_OVERRIDE | id);\n * \n * @param world The world.\n * @param entity The entity.\n * @param id The id to override.\n */"
    },
    "ecs_map_copy": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Copy map. */"
    },
    "ecs_value_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Destruct a value \n * \n * @param world The world.\n * @param type The type of the value to destruct.\n * @param ptr Pointer to constructed value of type \u0027type\u0027.\n * @return Zero if success, nonzero if failed. \n */"
    },
    "ecs_new_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Create new entity id.\n * This operation returns an unused entity id. This operation is guaranteed to\n * return an empty entity as it does not use values set by ecs_set_scope or\n * ecs_set_with.\n *\n * @param world The world.\n * @return The new entity id.\n */"
    },
    "ecs_get_with": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_id_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get current with id.\n * Get the id set with ecs_set_with.\n *\n * @param world The world.\n * @return The last id provided to ecs_set_with.\n */"
    },
    "ecs_world_to_json_buf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "buf_out",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_world_to_json_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_to_json_desc_t",
              "kind": "typeAlias",
              "sizeOf": 2,
              "alignOf": 1,
              "isConst": true,
              "innerType": {
                "name": "ecs_world_to_json_desc_t",
                "kind": "struct",
                "sizeOf": 2,
                "alignOf": 1
              }
            }
          }
        }
      ],
      "comment": "/** Serialize world into JSON string buffer.\n * Same as ecs_world_to_json, but serializes to an ecs_strbuf_t instance.\n * \n * @param world The world to serialize.\n * @param buf_out The strbuf to append the string to.\n * @return Zero if success, non-zero if failed.\n */"
    },
    "ecs_meta_is_collection": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Is the current scope a collection? */"
    },
    "ecs_enable_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "enable",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Enable or disable component.\n * Enabling or disabling a component does not add or remove a component from an\n * entity, but prevents it from being matched with queries. This operation can\n * be useful when a component must be temporarily disabled without destroying\n * its value. It is also a more performant operation for when an application\n * needs to add/remove components at high frequency, as enabling/disabling is\n * cheaper than a regular add or remove.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The component.\n * @param enable True to enable the component, false to disable.\n */"
    },
    "ecs_meta_set_uint": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Set field with uint value */"
    },
    "ecs_filter_pivot_term": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get pivot term for filter.\n * The pivot term is the term that matches the smallest set of tables, and is\n * a good default starting point for a search.\n * \n * The following conditions must be met for a term to be considered as pivot:\n * - It must have a This subject\n * - It must have the And operator\n * \n * When a filter does not have any terms that match those conditions, it will\n * return -1.\n * \n * If one or more terms in the filter have no matching tables the filter won\u0027t\n * yield any results. In this case the operation will return -2 which gives a\n * search function the option to early out.\n * \n * @param world The world.\n * @param filter The filter.\n * @return Index of the pivot term (use with filter-\u003Eterms)\n */"
    },
    "ecs_iter_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Cleanup iterator resources.\n * This operation cleans up any resources associated with the iterator.\n * \n * This operation should only be used when an iterator is not iterated until\n * completion (next has not yet returned false). When an iterator is iterated\n * until completion, resources are automatically freed.\n * \n * @param it The iterator.\n */"
    },
    "_ecs_map_get_deref": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "ecs_map_key_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/* Get element as pointer (auto-dereferences _ptr) */"
    },
    "ecs_log_get_level": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/** Get current log level. \n * \n * @return Previous log level.\n */"
    },
    "flecs_sparse_get_any": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Like get_sparse, but don\u0027t care whether element is alive or not. */"
    },
    "ecs_primitive_to_expr_buf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "kind",
          "type": {
            "name": "ecs_primitive_kind_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_primitive_kind_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "buf",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Serialize primitive value into string buffer.\n * Serializes a primitive value to an ecs_strbuf_t instance. This operation can\n * be reused by other serializers to avoid having to write boilerplate code that\n * serializes primitive values to a string.\n * \n * @param world The world.\n * @param kind The kind of primitive value.\n * @param data The value ot serialize\n * @param buf The strbuf to append the string to.\n * @return Zero if success, non-zero if failed.\n */"
    },
    "ecs_get_scope": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get the current scope.\n * Get the scope set by ecs_set_scope. If no scope is set, this operation will\n * return 0.\n *\n * @param world The world.\n * @return The current scope.\n */"
    },
    "ecs_doc_set_color": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "color",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Add color to entity.\n * UIs can use color as hint to improve visualizing entities.\n * \n * @param world The world.\n * @param entity The entity to which to add the link.\n * @param color The color to add.\n */"
    },
    "ecs_enable": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "enabled",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Enable or disable entity.\n * This operation enables or disables an entity by adding or removing the\n * EcsDisabled tag. A disabled entity will not be matched with any systems,\n * unless the system explicitly specifies the EcsDisabled tag.\n *\n * @param world The world.\n * @param entity The entity to enable or disable.\n * @param enabled true to enable the entity, false to disable.\n */"
    },
    "ecs_page_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_iter_t",
        "kind": "typeAlias",
        "sizeOf": 608,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_iter_t",
          "kind": "struct",
          "sizeOf": 608,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "limit",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Create a paged iterator.\n * Paged iterators limit the results to those starting from \u0027offset\u0027, and will\n * return at most \u0027limit\u0027 results.\n * \n * The iterator must be iterated with ecs_page_next.\n * \n * A paged iterator acts as a passthrough for data exposed by the parent\n * iterator, so that any data provided by the parent will also be provided by\n * the paged iterator.\n * \n * @param it The source iterator.\n * @param offset The number of entities to skip.\n * @param limit The maximum number of entities to iterate.\n * @return A page iterator.\n */"
    },
    "ecs_cpp_enum_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ]
    },
    "ecs_parse_digit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "ptr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "token",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        }
      ],
      "comment": "/** Parse digit.\n * This function will parse until the first non-digit character is found. The\n * provided expression must contain at least one digit character.\n * \n * @param ptr The expression to parse.\n * @param token The output buffer.\n * @return Pointer to the first non-digit character.\n */"
    },
    "ecs_meta_set_float": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "double",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ],
      "comment": "/** Set field with float value */"
    },
    "ecs_log_last_error": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [],
      "comment": "/** Get last logged error code.\n * Calling this operation resets the error code.\n *\n * @return Last error, 0 if none was logged since last call to last_error.\n */"
    },
    "ecs_metric_reduce": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_metric_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "typeAlias",
              "sizeOf": 1200,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_metric_t",
                "kind": "union",
                "sizeOf": 1200,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_metric_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "typeAlias",
              "sizeOf": 1200,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_metric_t",
                "kind": "union",
                "sizeOf": 1200,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "t_dst",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "t_src",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Reduce all measurements from a window into a single measurement. */"
    },
    "ecs_id_str_buf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "buf",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Write id string to buffer.\n * Same as ecs_id_str but writes result to ecs_strbuf_t.\n *\n * @param world The world.\n * @param id The id to convert to a string.\n * @param buf The buffer to write to.\n */"
    },
    "pinvoke_ECS_PAIR": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_id_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": [],
      "comment": "// Roles"
    },
    "ecs_map_insert": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "ecs_map_key_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "ecs_map_val_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Insert element for key. */"
    },
    "ecs_map_ensure_alloc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "ecs_map_key_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get or insert pointer element for key, allocate if the pointer is NULL */"
    },
    "ecs_async_stage_free": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stage",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Free asynchronous stage.\n * The provided stage must be an asynchronous stage. If a non-asynchronous stage\n * is provided, the operation will fail.\n *\n * @param stage The stage to free.\n */"
    },
    "ecs_doc_set_detail": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "description",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Add detailed description to entity.\n * \n * @param world The world.\n * @param entity The entity to which to add the description.\n * @param description The description to add.\n */"
    },
    "ecs_value_move": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Move value.\n * \n * @param world The world.\n * @param type The type of the value to move.\n * @param dst Pointer to the storage to move to.\n * @param src Pointer to the value to move.\n * @return Zero if success, nonzero if failed. \n */"
    },
    "ecs_is_enabled_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Test if component is enabled.\n * Test whether a component is currently enabled or disabled. This operation\n * will return true when the entity has the component and if it has not been\n * disabled by ecs_enable_component.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The component.\n * @return True if the component is enabled, otherwise false.\n */"
    },
    "ecs_ref_update": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "ref",
          "type": {
            "name": "ecs_ref_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_ref_t",
              "kind": "typeAlias",
              "sizeOf": 32,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_ref_t",
                "kind": "struct",
                "sizeOf": 32,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Update ref.\n * Ensures contents of ref are up to date. Same as ecs_ref_get_id, but does not\n * return pointer to component id. \n * \n * @param world The world.\n * @param ref The ref.\n */"
    },
    "flecs_sparse_is_alive": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Test if id is alive, which requires the generation count to match. */"
    },
    "ecs_sparse_last_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_parse_token": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "token_out",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        },
        {
          "name": "delim",
          "type": {
            "name": "char",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Parse a single token.\n * This function can be used as simple tokenizer by other parsers.\n * \n * @param name of program (used for logging).\n * @param expr pointer to token to parse.\n * @param ptr pointer to first character to parse.\n * @param token_out Parsed token (buffer should be ECS_MAX_TOKEN_SIZE large)\n * @return Pointer to the next token, or NULL if error occurred.\n */"
    },
    "FlecsRestImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/* Module import */"
    },
    "ecs_vec_set_size": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "elem_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_lookup_path_w_sep": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "parent",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "path",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "sep",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "prefix",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "recursive",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Lookup an entity from a path.\n * Lookup an entity from a provided path, relative to the provided parent. The\n * operation will use the provided separator to tokenize the path expression. If\n * the provided path contains the prefix, the search will start from the root.\n *\n * If the entity is not found in the provided parent, the operation will \n * continue to search in the parent of the parent, until the root is reached. If\n * the entity is still not found, the lookup will search in the flecs.core\n * scope. If the entity is not found there either, the function returns 0.\n *\n * @param world The world.\n * @param parent The entity from which to resolve the path.\n * @param path The path to resolve.\n * @param sep The path separator.\n * @param prefix The path prefix.\n * @param recursive Recursively traverse up the tree until entity is found.\n * @return The entity if found, else 0.\n */"
    },
    "ecs_term_match_this": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "term",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_set_entity_generation": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Override the generation of an entity.\n * The generation count of an entity is increased each time an entity is deleted\n * and is used to test whether an entity id is alive.\n * \n * This operation overrides the current generation of an entity with the\n * specified generation, which can be useful if an entity is externally managed,\n * like for external pools, savefiles or netcode.\n *\n * @param world The world.\n * @param entity Entity for which to set the generation with the new generation.\n */"
    },
    "ecs_meta_set_bool": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Set field with boolean value */"
    },
    "flecs_sparse_set_generation": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Override the generation count for a specific id */"
    },
    "ecs_http_server_request": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "srv",
          "type": {
            "name": "ecs_http_server_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "method",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "req",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "reply_out",
          "type": {
            "name": "ecs_http_reply_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_reply_t",
              "kind": "typeAlias",
              "sizeOf": 2232,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_http_reply_t",
                "kind": "struct",
                "sizeOf": 2232,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Convenience wrapper around ecs_http_server_request. */"
    },
    "ecs_get_interval": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "float",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "tick_source",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get current interval value for the specified timer.\n * This operation returns the value set by ecs_set_interval. If the entity is\n * not a timer, the operation will return 0.\n *\n * @param world The world.\n * @param tick_source The timer for which to set the interval.\n * @return The current interval value, or 0 if no timer is active.\n */"
    },
    "ecs_doc_set_name": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Add human-readable name to entity.\n * Contrary to entity names, human readable names do not have to be unique and\n * can contain special characters used in the query language like \u0027*\u0027.\n * \n * @param world The world.\n * @param entity The entity to which to add the name.\n * @param name The name to add.\n */"
    },
    "ecs_vec_clear": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_rule_var_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Return number of variables in rule.\n * \n * @param rule The rule.\n * @return The number of variables/\n */"
    },
    "ecs_plecs_from_file": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "filename",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Parse plecs file.\n * This parses a plecs file and instantiates the entities in the world. This\n * operation is equivalent to loading the file contents and passing it to\n * ecs_plecs_from_str.\n *\n * @param world The world.\n * @param filename The plecs file name.\n * @return Zero if success, non-zero otherwise.\n */"
    },
    "ecs_value_move_ctor_w_type_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "ti",
          "type": {
            "name": "ecs_type_info_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "typeAlias",
              "sizeOf": 144,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_info_t",
                "kind": "struct",
                "sizeOf": 144,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Move construct value.\n * \n * @param world The world.\n * @param ti Type info of the value to move.\n * @param dst Pointer to the storage to move to.\n * @param src Pointer to the value to move.\n * @return Zero if success, nonzero if failed. \n */"
    },
    "ecs_strbuf_list_append": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* Append formatted string as a new element in list */"
    },
    "flecs_allocator_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 128,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_allocator_t",
                "kind": "struct",
                "sizeOf": 128,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_os_has_modules": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/** Are module path functions available? */"
    },
    "ecs_get_context": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get the world context.\n * This operation retrieves a previously set world context.\n *\n * @param world The world.\n * @return The context set with ecs_set_context. If no context was set, the\n *         function returns NULL.\n */"
    },
    "ecs_os_has_threading": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/** Are threading functions available? */"
    },
    "ecs_rule_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Convert rule to a string.\n * This will convert the rule program to a string which can aid in debugging\n * the behavior of a rule.\n * \n * The returned string must be freed with ecs_os_free.\n * \n * @param rule The rule.\n * @return The string\n */"
    },
    "ecs_set_threads": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "threads",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Set number of worker threads.\n * Setting this value to a value higher than 1 will start as many threads and\n * will cause systems to evenly distribute matched entities across threads. The\n * operation may be called multiple times to reconfigure the number of threads\n * used, but never while running a system / pipeline. */"
    },
    "ecs_iter_to_json": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "iter",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_iter_to_json_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_to_json_desc_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 1,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_to_json_desc_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 1
              }
            }
          }
        }
      ],
      "comment": "/** Serialize iterator into JSON string.\n * This operation will iterate the contents of the iterator and serialize them\n * to JSON. The function acccepts iterators from any source.\n * \n * @param world The world.\n * @param iter The iterator to serialize to JSON.\n * @return A JSON string with the serialized iterator data, or NULL if failed.\n */"
    },
    "ecs_children_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Progress a children iterator.\n * Equivalent to ecs_term_next.\n * \n * @param it The iterator.\n * @returns True if more data is available, false if not.\n */"
    },
    "ecs_iter_get_var_as_range": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_table_range_t",
        "kind": "typeAlias",
        "sizeOf": 16,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_table_range_t",
          "kind": "struct",
          "sizeOf": 16,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "var_id",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get value of iterator variable as table range.\n * A value can be interpreted as table range if it is set as table range, or if\n * it is set to an entity with a non-empty type (the entity must have at least\n * one component, tag or relationship in its type).\n * \n * This operation can only be invoked on valid iterators. The variable index\n * must be smaller than the total number of variables provided by the iterator\n * (as set in ecs_iter_t::variable_count).\n * \n * @param it The iterator.\n * @param var_id The variable index.\n */"
    },
    "ecs_sparse_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ],
      "comment": "/* Publicly exposed APIs \n * The flecs_ functions aren\u0027t exposed directly as this can cause some\n * optimizers to not consider them for link time optimization. */"
    },
    "ecs_run": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "system",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "delta_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "param",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Run a specific system manually.\n * This operation runs a single system manually. It is an efficient way to\n * invoke logic on a set of entities, as manual systems are only matched to\n * tables at creation time or after creation time, when a new table is created.\n *\n * Manual systems are useful to evaluate lists of prematched entities at\n * application defined times. Because none of the matching logic is evaluated\n * before the system is invoked, manual systems are much more efficient than\n * manually obtaining a list of entities and retrieving their components.\n *\n * An application may pass custom data to a system through the param parameter.\n * This data can be accessed by the system through the param member in the\n * ecs_iter_t value that is passed to the system callback.\n *\n * Any system may interrupt execution by setting the interrupted_by member in\n * the ecs_iter_t value. This is particularly useful for manual systems, where\n * the value of interrupted_by is returned by this operation. This, in\n * cominbation with the param argument lets applications use manual systems\n * to lookup entities: once the entity has been found its handle is passed to\n * interrupted_by, which is then subsequently returned.\n *\n * @param world The world.\n * @param system The system to run.\n * @param delta_time The time passed since the last system invocation.\n * @param param A user-defined parameter to pass to the system.\n * @return handle to last evaluated entity if system was interrupted.\n */"
    },
    "ecs_http_server_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_http_server_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_http_server_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "ecs_http_server_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_desc_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_http_server_desc_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create server. \n * Use ecs_http_server_start to start receiving requests.\n * \n * @param desc Server configuration parameters.\n * @return The new server, or NULL if creation failed.\n */"
    },
    "ecs_strerror": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "error_code",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get description for error code */"
    },
    "ecs_cpp_enum_constant_register": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "parent",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ]
    },
    "ecs_map_insert_alloc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "ecs_map_key_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Insert pointer element for key, populate with new allocation. */"
    },
    "ecs_filter_next_instanced": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Same as ecs_filter_next, but always instanced.\n * See instanced property of ecs_filter_desc_t.\n */"
    },
    "ecs_measure_frame_time": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "enable",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Measure frame time. \n * Frame time measurements measure the total time passed in a single frame, and \n * how much of that time was spent on systems and on merging.\n *\n * Frame time measurements add a small constant-time overhead to an application.\n * When an application sets a target FPS, frame time measurements are enabled by\n * default.\n *\n * @param world The world.\n * @param enable Whether to enable or disable frame time measuring.\n */"
    },
    "ecs_app_run_frame": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_app_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_app_desc_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_app_desc_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Default frame callback.\n * This operation will run a single frame. By default this operation will invoke\n * ecs_progress directly, unless a custom frame action is set.\n * \n * @param world The world.\n * @param desc The desc struct passed to ecs_app_run.\n * @return value returned by ecs_progress\n */"
    },
    "ecs_table_has_module": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Returns whether table is a module or contains module contents\n * Returns true for tables that have module contents. Can be used to filter out\n * tables that do not contain application data.\n *\n * @param table The table.\n * @return true if table contains module contents, false if not.\n */"
    },
    "ecs_script_clear": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "script",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "instance",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Clear all entities associated with script.\n *\n * @param world The world.\n * @param script The script entity.\n * @param instance The script instance.\n */"
    },
    "ecs_value_fini_w_type_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "ti",
          "type": {
            "name": "ecs_type_info_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "typeAlias",
              "sizeOf": 144,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_info_t",
                "kind": "struct",
                "sizeOf": 144,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Destruct a value \n * \n * @param world The world.\n * @param ti Type info of the value to destruct.\n * @param ptr Pointer to constructed value of type \u0027type\u0027.\n * @return Zero if success, nonzero if failed. \n */"
    },
    "ecs_dim": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Dimension the world for a specified number of entities.\n * This operation will preallocate memory in the world for the specified number\n * of entities. Specifying a number lower than the current number of entities in\n * the world will have no effect.\n *\n * @param world The world.\n * @param entity_count The number of entities to preallocate.\n */"
    },
    "ecs_bitmask_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_bitmask_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_bitmask_desc_t",
              "kind": "typeAlias",
              "sizeOf": 776,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_bitmask_desc_t",
                "kind": "struct",
                "sizeOf": 776,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a new bitmask type */"
    },
    "ecs_iter_get_var_as_table": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_table_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_table_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "var_id",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get value of iterator variable as table.\n * A variable can be interpreted as table if it is set as table range with\n * both offset and count set to 0, or if offset is 0 and count matches the\n * number of elements in the table.\n * \n * This operation can only be invoked on valid iterators. The variable index\n * must be smaller than the total number of variables provided by the iterator\n * (as set in ecs_iter_t::variable_count).\n * \n * @param it The iterator.\n * @param var_id The variable index.\n */"
    },
    "flecs_ballocator_free": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "ba",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_cpp_component_validate": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "symbol",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "alignment",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "implicit_name",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ]
    },
    "ecs_strbuf_mergebuff": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "dst_buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src_buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* Append source buffer to destination buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "ecs_field_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_id_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Return id matched for field.\n * \n * @param it The iterator.\n * @param index The index of the field in the iterator.\n * @return The id matched for the field.\n */"
    },
    "ecs_get_mut_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get a mutable pointer to a component.\n * This operation returns a mutable pointer to a component. If the component did\n * not yet exist, it will be added.\n * \n * If get_mut is called when the world is in deferred/readonly mode, the \n * function will:\n * - return a pointer to a temp storage if the component does not yet exist, or\n * - return a pointer to the existing component if it exists\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The entity id of the component to obtain.\n * @return The component pointer.\n */"
    },
    "ecs_flatten": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "pair",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_flatten_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_flatten_desc_t",
              "kind": "typeAlias",
              "sizeOf": 2,
              "alignOf": 1,
              "isConst": true,
              "innerType": {
                "name": "ecs_flatten_desc_t",
                "kind": "struct",
                "sizeOf": 2,
                "alignOf": 1
              }
            }
          }
        }
      ],
      "comment": "/** Recursively flatten relationship for target entity (experimental).\n * This operation combines entities in the subtree of the specified pair from\n * different parents in the same table. This can reduce memory fragmentation\n * and reduces the number of tables in the storage, which improves RAM \n * utilization and various other operations, such as entity cleanup.\n * \n * The lifecycle of entities in a fixed subtree are bound to the specified\n * parent. Entities in a fixed subtree cannot be deleted individually. Entities\n * can also not change the target of the fixed relationship, which includes\n * removing the relationship.\n * \n * Entities in a fixed subtree are still fragmented on subtree depth. This \n * ensures that entities can still be iterated in breadth-first order with the\n * cascade query modifier.\n * \n * The current implementation is limited to exclusive acyclic relationships, and\n * does not allow for adding/removing to entities in flattened tables. An entity\n * may only be flattened for a single relationship. Future iterations of the\n * feature may remove these limitations.\n * \n * @param world The world.\n * @param pair The relationship pair from which to start flattening.\n * @param desc Options for flattening the tree.\n */"
    },
    "ecs_query_stats_copy_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_query_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_stats_t",
              "kind": "typeAlias",
              "sizeOf": 3624,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_query_stats_t",
                "kind": "struct",
                "sizeOf": 3624,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_query_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_stats_t",
              "kind": "typeAlias",
              "sizeOf": 3624,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_query_stats_t",
                "kind": "struct",
                "sizeOf": 3624,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Copy last measurement from source to destination. */"
    },
    "ecs_write_begin": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_record_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_record_t",
          "kind": "typeAlias",
          "sizeOf": 24,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_record_t",
            "kind": "struct",
            "sizeOf": 24,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Begin exclusive write access to entity.\n * This operation provides safe exclusive access to the components of an entity\n * without the overhead of deferring operations.\n * \n * When this operation is called simultaneously for the same entity more than\n * once it will throw an assert. Note that for this to happen, asserts must be\n * enabled. It is up to the application to ensure that access is exclusive, for\n * example by using a read-write mutex.\n * \n * Exclusive access is enforced at the table level, so only one entity can be\n * exclusively accessed per table. The exclusive access check is thread safe.\n * \n * This operation must be followed up with ecs_write_end.\n * \n * @param world The world.\n * @param entity The entity.\n * @return A record to the entity.\n */"
    },
    "ecs_os_strerror": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "err",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ]
    },
    "ecs_ptr_to_expr": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Serialize value into expression string.\n * This operation serializes a value of the provided type to a string. The \n * memory pointed to must be large enough to contain a value of the used type.\n * \n * @param world The world.\n * @param type The type of the value to serialize.\n * @param data The value to serialize.\n * @return String with expression, or NULL if failed.\n */"
    },
    "ecs_rest_server_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "srv",
          "type": {
            "name": "ecs_http_server_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Cleanup REST HTTP server. \n * The server must have been created with ecs_rest_server_init.\n */"
    },
    "flecs_bdup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "ba",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "memory",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "ecs_strbuf_written": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_get_observer_ctx": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "observer",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ]
    },
    "ecs_record_has_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "record",
          "type": {
            "name": "ecs_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_record_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_record_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Test if entity for record has component. \n * \n * @param world The world.\n * @param record Record to the entity.\n * @param id The (component) id.\n */"
    },
    "ecs_asprintf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* Create allocated string from format */"
    },
    "ecs_run_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "pipeline",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "delta_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/** Run pipeline.\n * This will run all systems in the provided pipeline. This operation may be\n * invoked from multiple threads, and only when staging is disabled, as the\n * pipeline manages staging and, if necessary, synchronization between threads.\n *\n * If 0 is provided for the pipeline id, the default pipeline will be ran (this\n * is either the builtin pipeline or the pipeline set with set_pipeline()). \n *\n * When using progress() this operation will be invoked automatically for the\n * default pipeline (either the builtin pipeline or the pipeline set with \n * set_pipeline()). An application may run additional pipelines.\n *\n * Note: calling this function from an application currently only works in\n * single threaded applications with a single stage.\n *\n * @param world The world.\n * @param pipeline The pipeline to run.\n */"
    },
    "ecs_iter_var_is_constrained": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "var_id",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Returns whether variable is constrained.\n * This operation returns true for variables set by one of the ecs_iter_set_var*\n * operations.\n * \n * A constrained variable is guaranteed not to change values while results are\n * being iterated.\n * \n * @param it The iterator.\n * @param var_id The variable index.\n * @return Whether the variable is constrained to a specified value.\n */"
    },
    "ecs_meta_get_entity": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get field value as entity. \n * This operation does not perform conversions. */"
    },
    "ecs_http_server_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "server",
          "type": {
            "name": "ecs_http_server_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Destroy server. \n * This operation will stop the server if it was still running.\n * \n * @param server The server to destroy.\n */"
    },
    "ecs_doc_get_link": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get link to external documentation from entity.\n * \n * @param world The world.\n * @param entity The entity from which to get the link.\n * @return The link.\n */"
    },
    "ecs_array_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_array_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_array_desc_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_array_desc_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a new array type */"
    },
    "flecs_sparse_add": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ],
      "comment": "/** Add element to sparse set, this generates or recycles an id */"
    },
    "ecs_get_system_binding_ctx": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "system",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get system binding context.\n * The binding context is a context typically used to attach any language \n * binding specific data that is needed when invoking a callback that is \n * implemented in another language.\n *\n * @param world The world.\n * @param system The system from which to obtain the context.\n * @return The context.\n */"
    },
    "ecs_observer_default_run_action": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Default run action for observer.\n * This function can be called from a custom observer run action (see \n * ecs_observer_desc_t::run for more details). This function ensures that the \n * observer\u0027s filter is applied to the iterator\u0027s table, filters out duplicate \n * events and implements EcsMonitor logic.\n * \n * @param it The iterator.\n * @return True if the observer was invoked.\n */"
    },
    "ecs_value_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Construct a value in existing storage \n *\n * @param world The world.\n * @param type The type of the value to create.\n * @param ptr Pointer to a value of type \u0027type\u0027\n * @return Zero if success, nonzero if failed.\n */"
    },
    "ecs_get_target_for_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "rel",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get the target of a relationship for a given id.\n * This operation returns the first entity that has the provided id by following\n * the specified relationship. If the entity itself has the id then entity will\n * be returned. If the id cannot be found on the entity or by following the\n * relationship, the operation will return 0.\n * \n * This operation can be used to lookup, for example, which prefab is providing\n * a component by specifying the IsA relationship:\n * \n *   // Is Position provided by the entity or one of its base entities?\n *   ecs_get_target_for_id(world, entity, EcsIsA, ecs_id(Position))\n * \n * @param world The world.\n * @param entity The entity.\n * @param rel The relationship to follow.\n * @param id The id to lookup.\n * @return The entity for which the target has been found.\n */"
    },
    "ecs_sparse_add": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_get_table": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_table_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_table_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get the table of an entity.\n *\n * @param world The world.\n * @param entity The entity.\n * @return The table of the entity, NULL if the entity has no components/tags.\n */"
    },
    "ecs_metric_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_metric_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_desc_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_metric_desc_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_vars_lookup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_expr_var_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_expr_var_t",
          "kind": "typeAlias",
          "sizeOf": 32,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_expr_var_t",
            "kind": "struct",
            "sizeOf": 32,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "vars",
          "type": {
            "name": "ecs_vars_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vars_t",
              "kind": "typeAlias",
              "sizeOf": 168,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vars_t",
                "kind": "struct",
                "sizeOf": 168,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Lookup variable in scope and parent scopes */"
    },
    "ecs_os_memdup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_worker_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Progress a worker iterator.\n * Progresses an iterator created by ecs_worker_iter.\n * \n * @param it The iterator.\n * @return true if iterator has more results, false if not.\n */"
    },
    "ecs_set_name_prefix": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "prefix",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Set a name prefix for newly created entities.\n * This is a utility that lets C modules use prefixed names for C types and\n * C functions, while using names for the entity names that do not have the \n * prefix. The name prefix is currently only used by ECS_COMPONENT.\n *\n * @param world The world.\n * @param prefix The name prefix to use.\n * @return The previous prefix.\n */"
    },
    "ecs_record_get_column": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "r",
          "type": {
            "name": "ecs_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_record_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_record_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "column",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "c_size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ],
      "comment": "/** Get component pointer from column/record. */"
    },
    "ecs_vec_remove": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "elem",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_stage_is_readonly": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Test whether the current world is readonly.\n * This function allows the code to test whether the currently used world\n * is readonly or whether it allows for writing.  \n *\n * @param world A pointer to a stage or the world.\n * @return True if the world or stage is readonly.\n */"
    },
    "ecs_id_is_pair": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Utility to check if id is a pair.\n *\n * @param id The id.\n * @return True if id is a pair.\n */"
    },
    "ecs_run_w_filter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "system",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "delta_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "limit",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "param",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Run system with offset/limit and type filter.\n * This operation is the same as ecs_run, but filters the entities that will be\n * iterated by the system.\n * \n * Entities can be filtered in two ways. Offset and limit control the range of\n * entities that is iterated over. The range is applied to all entities matched\n * with the system, thus may cover multiple archetypes.\n * \n * The type filter controls which entity types the system will evaluate. Only\n * types that contain all components in the type filter will be iterated over. A\n * type filter is only evaluated once per table, which makes filtering cheap if\n * the number of entities is large and the number of tables is small, but not as\n * cheap as filtering in the system signature.\n * \n * @param world The world.\n * @param system The system to invoke.\n * @param delta_time The time passed since the last system invocation.\n * @param param A user-defined parameter to pass to the system.\n * @return handle to last evaluated entity if system was interrupted.\n */"
    },
    "ecs_chrparse": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "in",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "out",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        }
      ],
      "comment": "/** Parse an escaped character.\n * Parse a character with a potential escape sequence.\n * \n * @param in Pointer to character in input string.\n * @param out Output string.\n * @return Pointer to the character after the last one read.\n */"
    },
    "flecs_sparse_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get the number of alive elements in the sparse set. */"
    },
    "ecs_quantity_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_entity_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_entity_desc_t",
              "kind": "typeAlias",
              "sizeOf": 320,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_entity_desc_t",
                "kind": "struct",
                "sizeOf": 320,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a new quantity */"
    },
    "ecs_term_is_initialized": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "term",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Test whether a term is set.\n * This operation can be used to test whether a term has been initialized with\n * values or whether it is empty.\n *\n * An application generally does not need to invoke this operation. It is useful\n * when initializing a 0-initialized array of terms (like in ecs_term_desc_t) as\n * this operation can be used to find the last initialized element.\n *\n * @param term The term.\n * @return True when set, false when not set.\n */"
    },
    "ecs_get_path_w_sep_buf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "parent",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "child",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "sep",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "prefix",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "buf",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Write path identifier to buffer.\n * Same as ecs_get_path_w_sep, but writes result to an ecs_strbuf_t.\n * \n * @param world The world.\n * @param parent The entity from which to create the path.\n * @param child The entity to which to create the path.\n * @param sep The separator to use between path elements.\n * @param prefix The initial character to use for root elements.\n * @param buf The buffer to write to.\n */"
    },
    "ecs_query_table_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Returns number of tables query matched with.\n *\n * @param query The query.\n * @return The number of matched tables.\n */"
    },
    "ecs_parse_expr": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "ecs_value_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_value_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_value_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_parse_expr_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_parse_expr_desc_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_parse_expr_desc_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Parse expression into value.\n * This operation parses a flecs expression into the provided pointer. The\n * memory pointed to must be large enough to contain a value of the used type.\n * \n * If no type and pointer are provided for the value argument, the operation \n * will discover the type from the expression and allocate storage for the \n * value. The allocated value must be freed with ecs_value_free.\n * \n * @param world The world.\n * @param ptr The pointer to the expression to parse.\n * @param value The value containing type \u0026 pointer to write to.\n * @param desc Configuration parameters for deserializer.\n * @return Pointer to the character after the last one read, or NULL if failed.\n */"
    },
    "flecs_allocator_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 128,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_allocator_t",
                "kind": "struct",
                "sizeOf": 128,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_map_remove_free": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "ecs_map_key_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/* Remove pointer element, free if not NULL */"
    },
    "ecs_script_update": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "script",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "instance",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "vars",
          "type": {
            "name": "ecs_vars_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vars_t",
              "kind": "typeAlias",
              "sizeOf": 168,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vars_t",
                "kind": "struct",
                "sizeOf": 168,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Update script with new code. \n * \n * @param world The world.\n * @param script The script entity.\n * @param instance An assembly instance (optional).\n * @param str The script code.\n * @param vars Optional preset variables for script parameterization.\n */"
    },
    "ecs_defer_resume": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Resume deferring.\n * See ecs_defer_suspend.\n * \n * @param world The world.\n */"
    },
    "pinvoke_EcsPostFrame": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "ecs_meta_get_bool": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get field value as boolean. */"
    },
    "ecs_chresc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "out",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        },
        {
          "name": "in",
          "type": {
            "name": "char",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "delimiter",
          "type": {
            "name": "char",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Write an escaped character.\n * Write a character to an output string, insert escape character if necessary.\n * \n * @param out The string to write the character to.\n * @param in The input character.\n * @param delimiter The delimiiter used (for example \u0027\u0022\u0027)\n * @return Pointer to the character after the last one written.\n */"
    },
    "ecs_table_get_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get column from table by component id.\n * This operation returns the component array for the provided component  id.\n * \n * @param table The table.\n * @param id The component id for the column.\n * @param offset The index of the first row to return (0 for entire column).\n * @return The component array, or NULL if the index is not a component.\n */"
    },
    "ecs_vec_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_field_column_index": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Return index of matched table column.\n * This function only returns column indices for fields that have been matched\n * on the the $this variable. Fields matched on other tables will return -1.\n * \n * @param it The iterator.\n * @param index The index of the field in the iterator.\n * @return The index of the matched column, -1 if not matched.\n */"
    },
    "ecs_set_scope": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "scope",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Set the current scope.\n * This operation sets the scope of the current stage to the provided entity.\n * As a result new entities will be created in this scope, and lookups will be\n * relative to the provided scope.\n *\n * It is considered good practice to restore the scope to the old value.\n *\n * @param world The world.\n * @param scope The entity to use as scope.\n * @return The previous scope.\n */"
    },
    "ecs_add_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Add a (component) id to an entity.\n * This operation adds a single (component) id to an entity. If the entity \n * already has the id, this operation has no side effects.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The id to add.\n */"
    },
    "ecs_record_get_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "record",
          "type": {
            "name": "ecs_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_record_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_record_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get component from entity record.\n * This operation returns a pointer to a component for the entity \n * associated with the provided record. For safe access to the component, obtain\n * the record with ecs_read_begin or ecs_write_begin.\n * \n * Obtaining a component from a record is faster than obtaining it from the\n * entity handle, as it reduces the number of lookups required.\n * \n * @param world The world.\n * @param record Record to the entity.\n * @param id The (component) id.\n * @return Pointer to component, or NULL if entity does not have the component.\n */"
    },
    "ecs_os_get_api": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_os_api_t",
        "kind": "typeAlias",
        "sizeOf": 296,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_os_api_t",
          "kind": "struct",
          "sizeOf": 296,
          "alignOf": 8
        }
      },
      "parameters": []
    },
    "ecs_table_type_to_storage_index": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Convert index in table type to index in table storage type. */"
    },
    "ecs_entity_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_entity_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_entity_desc_t",
              "kind": "typeAlias",
              "sizeOf": 320,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_entity_desc_t",
                "kind": "struct",
                "sizeOf": 320,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Find or create an entity. \n * This operation creates a new entity, or modifies an existing one. When a name\n * is set in the ecs_entity_desc_t::name field and ecs_entity_desc_t::entity is\n * not set, the operation will first attempt to find an existing entity by that\n * name. If no entity with that name can be found, it will be created.\n *\n * If both a name and entity handle are provided, the operation will check if\n * the entity name matches with the provided name. If the names do not match,\n * the function will fail and return 0.\n *\n * If an id to a non-existing entity is provided, that entity id become alive.\n * \n * See the documentation of ecs_entity_desc_t for more details. \n *\n * @param world The world.\n * @param desc Entity init parameters.\n * @return A handle to the new or existing entity, or 0 if failed.\n */"
    },
    "flecs_sparse_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "page_allocator",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "struct",
              "sizeOf": 48,
              "alignOf": 8
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ],
      "comment": "/** Initialize sparse set */"
    },
    "ecs_iter_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Convert iterator to string.\n * Prints the contents of an iterator to a string. Useful for debugging and/or\n * testing the output of an iterator.\n * \n * The function only converts the currently iterated data to a string. To \n * convert all data, the application has to manually call the next function and\n * call ecs_iter_str on each result.\n * \n * @param it The iterator.\n * @return A string representing the contents of the iterator.\n */"
    },
    "ecs_query_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "iter",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Progress the query iterator.\n * This operation progresses the query iterator to the next table. The \n * iterator must have been initialized with \u0060ecs_query_iter\u0060. This operation \n * must be invoked at least once before interpreting the contents of the \n * iterator.\n *\n * @param iter The iterator.\n * @returns True if more data is available, false if not.\n */"
    },
    "ecs_world_stats_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "stats",
          "type": {
            "name": "ecs_world_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_stats_t",
              "kind": "typeAlias",
              "sizeOf": 96024,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_world_stats_t",
                "kind": "struct",
                "sizeOf": 96024,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get world statistics.\n *\n * @param world The world.\n * @param stats Out parameter for statistics.\n */"
    },
    "ecs_strbuf_list_appendstr": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* Append string as a new element in list */"
    },
    "ecs_world_from_json": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "json",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_from_json_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_from_json_desc_t",
              "kind": "typeAlias",
              "sizeOf": 32,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_from_json_desc_t",
                "kind": "struct",
                "sizeOf": 32,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Parse JSON object with multiple entities into the world. The format is the\n * same as the one outputted by ecs_world_to_json. \n * \n * @param world The world.\n * @param json The JSON expression to parse (see iterator in JSON format manual).\n */"
    },
    "pinvoke_ECS_OVERRIDE": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_id_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": []
    },
    "ecs_meta_get_member": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get member name of current member */"
    },
    "flecs_sparse_try": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Same as flecs_sparse_get, but doesn\u0027t assert if id is not alive. */"
    },
    "_flecs_hashmap_remove_w_hash": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "value_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "hash",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "FlecsMetaImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/* Module import */"
    },
    "flecs_sparse_ensure_fast": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Fast version of ensure, no liveliness checking */"
    },
    "ecs_cpp_component_register_explicit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "s_id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "type_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "symbol",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "alignment",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "is_component",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "existing_out",
          "type": {
            "name": "_Bool*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "_Bool",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        }
      ]
    },
    "ecs_defer_begin": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Defer operations until end of frame. \n * When this operation is invoked while iterating, operations inbetween the\n * defer_begin and defer_end operations are executed at the end of the frame.\n *\n * This operation is thread safe.\n * \n * @param world The world.\n * @return true if world changed from non-deferred mode to deferred mode.\n */"
    },
    "ecs_sparse_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_cpp_reset_count_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": []
    },
    "ecs_owns_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Test if an entity owns an id.\n * This operation returns true if the entity has the specified id. Other than\n * ecs_has_id this operation will not return true if the id is inherited.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The id to test for.\n * @return True if the entity has the id, false if not.\n */"
    },
    "ecs_value_new_w_type_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "ti",
          "type": {
            "name": "ecs_type_info_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "typeAlias",
              "sizeOf": 144,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_info_t",
                "kind": "struct",
                "sizeOf": 144,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Construct a value in new storage \n * \n * @param world The world.\n * @param ti The type info of the type to create.\n * @return Pointer to type if success, NULL if failed.\n */"
    },
    "ecs_count_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Count entities that have the specified id.\n * Returns the number of entities that have the specified id.\n *\n * @param world The world.\n * @param entity The id to search for.\n * @return The number of entities that have the id.\n */"
    },
    "ecs_snapshot_restore": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "snapshot",
          "type": {
            "name": "ecs_snapshot_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_snapshot_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Restore a snapshot.\n * This operation restores the world to the state it was in when the specified\n * snapshot was taken. A snapshot can only be used once for restoring, as its\n * data replaces the data that is currently in the world.\n * This operation also resets the last issued entity handle, so any calls to\n * ecs_new may return entity ids that have been issued before restoring the \n * snapshot.\n *\n * The world in which the snapshot is restored must be the same as the world in\n * which the snapshot is taken.\n *\n * @param world The world to restore the snapshot to.\n * @param snapshot The snapshot to restore. \n */"
    },
    "ecs_snapshot_take_w_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_snapshot_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_snapshot_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "iter",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a filtered snapshot.\n * This operation is the same as ecs_snapshot_take, but accepts an iterator so\n * an application can control what is stored by the snapshot. \n *\n * @param iter An iterator to the data to be stored by the snapshot.\n * @return The snapshot.\n */"
    },
    "ecs_modified_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Signal that a component has been modified.\n * This operation allows an application to signal to Flecs that a component has\n * been modified. As a result, OnSet systems will be invoked.\n *\n * This operation is commonly used together with ecs_get_mut.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The id of the component that was modified.\n */"
    },
    "ecs_map_remove": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_map_val_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_map_data_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "ecs_map_key_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Remove key from map. */"
    },
    "ecs_iter_set_var_as_table": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "var_id",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Same as ecs_iter_set_var, but for a table.\n * This constrains the variable to all entities in a table.\n * \n * @param it The iterator.\n * @param var_id The variable index.\n * @param table The table variable value.\n */"
    },
    "ecs_reset_clock": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Reset world clock.\n * Reset the clock that keeps track of the total time passed in the simulation.\n *\n * @param world The world.\n */"
    },
    "ecs_meta_set_entity": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Set field with entity value */"
    },
    "ecs_filter_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_filter_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_filter_t",
          "kind": "typeAlias",
          "sizeOf": 88,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_filter_t",
            "kind": "struct",
            "sizeOf": 88,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_filter_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_desc_t",
              "kind": "typeAlias",
              "sizeOf": 2488,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_filter_desc_t",
                "kind": "struct",
                "sizeOf": 2488,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Initialize filter \n * A filter is a lightweight object that can be used to query for entities in\n * a world. Filters, as opposed to queries, do not cache results. They are \n * therefore slower to iterate, but are faster to create.\n * \n * When a filter is copied by value, make sure to use \u0022ecs_filter_move\u0022 to \n * ensure that the terms pointer still points to the inline array:\n * \n *   ecs_filter_move(\u0026dst_filter, \u0026src_filter)\n * \n * Alternatively, the ecs_filter_move function can be called with both arguments\n * set to the same filter, to ensure the pointer is valid:\n * \n *   ecs_filter_move(\u0026f, \u0026f)\n *\n * It is possible to create a filter without allocating any memory, by setting\n * the .storage member in ecs_filter_desc_t. See the documentation for the \n * member for more details.\n *\n * @param world The world.\n * @param desc Properties for the filter to create.\n * @return The filter if successful, NULL if not successful.\n */"
    },
    "ecs_ensure_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Same as ecs_ensure, but for (component) ids.\n * An id can be an entity or pair, and can contain id flags. This operation\n * ensures that the entity (or entities, for a pair) are alive.\n * \n * When this operation is successful it guarantees that the provided id can be\n * used in operations that accept an id.\n * \n * Since entities in a pair do not encode their generation ids, this operation\n * will not fail when an entity with non-zero generation count already exists in\n * the world. \n * \n * This is different from ecs_ensure, which will fail if attempted with an id\n * that has generation 0 and an entity with a non-zero generation is currently \n * alive.\n * \n * @param world The world.\n * @param id The id to make alive.\n */"
    },
    "ecs_run_worker": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "system",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "stage_current",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "stage_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "delta_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "param",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Same as ecs_run, but subdivides entities across number of provided stages.\n * \n * @param world The world.\n * @param system The system to run.\n * @param stage_current The id of the current stage.\n * @param stage_count The total number of stages.\n * @param delta_time The time passed since the last system invocation.\n * @param param A user-defined parameter to pass to the system.\n * @return handle to last evaluated entity if system was interrupted.\n */"
    },
    "ecs_vec_set_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "elem_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_defer_suspend": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Suspend deferring but do not flush queue.\n * This operation can be used to do an undeferred operation while not flushing\n * the operations in the queue.\n * \n * An application should invoke ecs_defer_resume before ecs_defer_end is called.\n * The operation may only be called when deferring is enabled.\n * \n * @param world The world.\n */"
    },
    "ecs_id_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Convert id to string.\n * This operation interprets the structure of an id and converts it to a string.\n *\n * @param world The world.\n * @param id The id to convert to a string.\n * @return The id converted to a string.\n */"
    },
    "ecs_set_lookup_path": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_entity_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "lookup_path",
          "type": {
            "name": "ecs_entity_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_entity_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_id_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "uint64_t",
                  "kind": "typeAlias",
                  "sizeOf": 8,
                  "alignOf": 8,
                  "innerType": {
                    "name": "unsigned long long",
                    "kind": "primitive",
                    "sizeOf": 8,
                    "alignOf": 8
                  }
                }
              }
            }
          }
        }
      ],
      "comment": "/** Set search path for lookup operations.\n * This operation accepts an array of entity ids that will be used as search\n * scopes by lookup operations. The operation returns the current search path.\n * It is good practice to restore the old search path.\n * \n * The search path will be evaluated starting from the last element.\n * \n * The default search path includes flecs.core. When a custom search path is\n * provided it overwrites the existing search path. Operations that rely on\n * looking up names from flecs.core without providing the namespace may fail if\n * the custom search path does not include flecs.core (EcsFlecsCore).\n * \n * The search path array is not copied into managed memory. The application must\n * ensure that the provided array is valid for as long as it is used as the\n * search path.\n * \n * The provided array must be terminated with a 0 element. This enables an\n * application to push/pop elements to an existing array without invoking the\n * ecs_set_lookup_path operation again.\n * \n * @param world The world.\n * @param lookup_path 0-terminated array with entity ids for the lookup path.\n * @return Current lookup path array.\n */"
    },
    "ecs_query_skip": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Skip a table while iterating.\n * This operation lets the query iterator know that a table was skipped while\n * iterating. A skipped table will not reset its changed state, and the query\n * will not update the dirty flags of the table for its out columns.\n * \n * Only valid iterators must be provided (next has to be called at least once \u0026\n * return true) and the iterator must be a query iterator.\n * \n * @param it The iterator result to skip.\n */"
    },
    "ecs_meta_get_type": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get type of current element. */"
    },
    "ecs_get_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const void",
          "kind": "primitive",
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get an immutable pointer to a component.\n * This operation obtains a const pointer to the requested component. The\n * operation accepts the component entity id.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The id of the component to get.\n * @return The component pointer, NULL if the entity does not have the component.\n */"
    },
    "ecs_world_stats_copy_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_world_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_stats_t",
              "kind": "typeAlias",
              "sizeOf": 96024,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_world_stats_t",
                "kind": "struct",
                "sizeOf": 96024,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_world_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_stats_t",
              "kind": "typeAlias",
              "sizeOf": 96024,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_world_stats_t",
                "kind": "struct",
                "sizeOf": 96024,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Copy last measurement from source to destination. */"
    },
    "ecs_astresc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "delimiter",
          "type": {
            "name": "char",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "in",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Return escaped string.\n * Return escaped version of input string. Same as ecs_stresc, but returns an\n * allocated string of the right size.\n * \n * @param delimiter The delimiter used (for example \u0027\u0022\u0027).\n * @param in The input string.\n * @return Escaped string.\n */"
    },
    "ecs_meta_elem": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Move cursor to a element */"
    },
    "ecs_atfini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "action",
          "type": {
            "name": "ecs_fini_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_world_t *, void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Register action to be executed when world is destroyed.\n * Fini actions are typically used when a module needs to clean up before a\n * world shuts down.\n * \n * @param world The world.\n * @param action The function to execute.\n * @param ctx Userdata to pass to the function */"
    },
    "ecs_http_server_stop": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "server",
          "type": {
            "name": "ecs_http_server_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Stop server. \n * After this operation no new requests can be received.\n * \n * @param server The server.\n */"
    },
    "flecs_allocator_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_block_allocator_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_block_allocator_t",
          "kind": "typeAlias",
          "sizeOf": 48,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_block_allocator_t",
            "kind": "struct",
            "sizeOf": 48,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 128,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_allocator_t",
                "kind": "struct",
                "sizeOf": 128,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_term_finalize": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "term",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Finalize term.\n * Ensure that all fields of a term are consistent and filled out. This \n * operation should be invoked before using and after assigning members to, or \n * parsing a term. When a term contains unresolved identifiers, this operation\n * will resolve and assign the identifiers. If the term contains any identifiers\n * that cannot be resolved, the operation will fail.\n *\n * An application generally does not need to invoke this operation as the APIs\n * that use terms (such as filters, queries and triggers) will finalize terms\n * when they are created.\n *\n * The name and expr parameters are optional, and only used for giving more \n * descriptive error messages.\n *\n * @param world The world.\n * @param term The term to finalize.\n * @return Zero if success, nonzero if an error occurred.\n */"
    },
    "ecs_get_entity": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "poly",
          "type": {
            "name": "ecs_poly_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_poly_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get entity from poly.\n *\n * @param poly A pointer to a poly object.\n * @return Entity associated with the poly object.\n */"
    },
    "pinvoke_EcsIsA": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [],
      "comment": "// Relationships"
    },
    "flecs_sparse_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Get element by (sparse) id. The returned pointer is stable for the duration\n * of the sparse set, as it is stored in the sparse array. */"
    },
    "ecs_map_ensure": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_map_val_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_map_val_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_map_data_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "ecs_map_key_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get or insert element for key. */"
    },
    "ecs_get_path_w_sep": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "parent",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "child",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "sep",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "prefix",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get a path identifier for an entity.\n * This operation creates a path that contains the names of the entities from\n * the specified parent to the provided entity, separated by the provided \n * separator. If no parent is provided the path will be relative to the root. If\n * a prefix is provided, the path will be prefixed by the prefix.\n *\n * If the parent is equal to the provided child, the operation will return an\n * empty string. If a nonzero component is provided, the path will be created by \n * looking for parents with that component.\n *\n * The returned path should be freed by the application.\n *\n * @param world The world.\n * @param parent The entity from which to create the path.\n * @param child The entity to which to create the path.\n * @param sep The separator to use between path elements.\n * @param prefix The initial character to use for root elements.\n * @return The relative entity path.\n */"
    },
    "ecs_rule_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_iter_t",
        "kind": "typeAlias",
        "sizeOf": 608,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_iter_t",
          "kind": "struct",
          "sizeOf": 608,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Iterate a rule.\n * Note that rule iterators may allocate memory, and that unless the iterator\n * is iterated until completion, it may still hold resources. When stopping\n * iteration before ecs_rule_next has returned false, use ecs_iter_fini to\n * cleanup any remaining resources.\n * \n * @param world The world.\n * @param rule The rule.\n * @return An iterator.\n */"
    },
    "ecs_async_stage_new": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_world_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_world_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Create asynchronous stage.\n * An asynchronous stage can be used to asynchronously queue operations for\n * later merging with the world. An asynchronous stage is similar to a regular\n * stage, except that it does not allow reading from the world.\n *\n * Asynchronous stages are never merged automatically, and must therefore be\n * manually merged with the ecs_merge function. It is not necessary to call\n * defer_begin or defer_end before and after enqueuing commands, as an \n * asynchronous stage unconditionally defers operations.\n *\n * The application must ensure that no commands are added to the stage while the\n * stage is being merged.\n *\n * An asynchronous stage must be cleaned up by ecs_async_stage_free. \n *\n * @param world The world.\n * @return The stage.\n */"
    },
    "FlecsTimerImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "////////////////////////////////////////////////////////////////////////////////\n//// Module\n////////////////////////////////////////////////////////////////////////////////"
    },
    "ecs_pipeline_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_pipeline_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_desc_t",
              "kind": "typeAlias",
              "sizeOf": 2584,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_pipeline_desc_t",
                "kind": "struct",
                "sizeOf": 2584,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a custom pipeline.\n */"
    },
    "ecs_type_info_to_json": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Serialize type info to JSON.\n * This serializes type information to JSON, and can be used to store/transmit\n * the structure of a (component) value.\n * \n * If the provided type does not have reflection data, \u00220\u0022 will be returned.\n * \n * @param world The world.\n * @param type The type to serialize to JSON.\n * @return A JSON string with the serialized type info, or NULL if failed.\n */"
    },
    "ecs_pipeline_stats_reduce_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stats",
          "type": {
            "name": "ecs_pipeline_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_stats_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_pipeline_stats_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "old",
          "type": {
            "name": "ecs_pipeline_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_stats_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_pipeline_stats_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Reduce last measurement into previous measurement, restore old value. */"
    },
    "ecs_sparse_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "ecs_set_context": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Set a world context.\n * This operation allows an application to register custom data with a world\n * that can be accessed anywhere where the application has the world.\n *\n * @param world The world.\n * @param ctx A pointer to a user defined structure.\n */"
    },
    "ecs_make_pair": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_id_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "first",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "second",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Make a pair id.\n * This function is equivalent to using the ecs_pair macro, and is added for\n * convenience to make it easier for non C/C\u002B\u002B bindings to work with pairs.\n *\n * @param first The first element of the pair of the pair.\n * @param second The target of the pair.\n */"
    },
    "ecs_map_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Initialize new map. */"
    },
    "ecs_iter_is_true": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Test if iterator is true.\n * This operation will return true if the iterator returns at least one result.\n * This is especially useful in combination with fact-checking rules (see the\n * rules addon).\n * \n * The operation requires a valid iterator. After the operation is invoked, the\n * application should no longer invoke next on the iterator and should treat it\n * as if the iterator is iterated until completion.\n * \n * @param it The iterator.\n * @return true if the iterator returns at least one result.\n */"
    },
    "ecs_parse_term": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "term_out",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Parse term in expression.\n * This operation parses a single term in an expression and returns a pointer\n * to the next term expression.\n *\n * If the returned pointer points to the 0-terminator, the expression is fully \n * parsed. The function would typically be called in a while loop:\n *\n * const char *ptr = expr;\n * while (ptr[0] \u0026\u0026 (ptr = ecs_parse_term(world, name, expr, ptr, \u0026term))) { }\n *\n * The operation does not attempt to find entity ids from the names in the\n * expression. Use the ecs_term_resolve_ids function to resolve the identifiers\n * in the parsed term.\n *\n * The returned term will in most cases contain allocated resources, which\n * should freed (or used) by the application. To free the resources for a term,\n * use the ecs_term_free function.\n *\n * The parser accepts expressions in the legacy string format.\n *\n * @param world The world.\n * @param name The name of the expression (optional, improves error logs)\n * @param expr The expression to parse (optional, improves error logs)\n * @param ptr The pointer to the current term (must be in expr).\n * @param term_out Out parameter for the term.\n * @return pointer to next term if successful, NULL if failed.\n */"
    },
    "flecs_sparse_ids": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get pointer to ids (alive and not alive). Use with count() or size(). */"
    },
    "ecs_filter_chain_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_iter_t",
        "kind": "typeAlias",
        "sizeOf": 608,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_iter_t",
          "kind": "struct",
          "sizeOf": 608,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Return a chained filter iterator.\n * A chained iterator applies a filter to the results of the input iterator. The\n * resulting iterator must be iterated with ecs_filter_next.\n * \n * @param it The input iterator\n * @param filter The filter to apply to the iterator.\n * @return The chained iterator. \n */"
    },
    "ecs_get_name": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get the name of an entity.\n * This will return the name stored in (EcsIdentifier, EcsName).\n *\n * @param world The world.\n * @param entity The entity.\n * @return The type of the entity, NULL if the entity has no name.\n */"
    },
    "ecs_query_next_table": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "iter",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Fast alternative to ecs_query_next that only returns matched tables.\n * This operation only populates the ecs_iter_t::table field. To access the\n * matched components, call ecs_query_populate.\n * \n * If this operation is used with a query that has inout/out terms, those terms\n * will not be marked dirty unless ecs_query_populate is called. \n * \n * @param iter The iterator.\n * @returns True if more data is available, false if not.\n */"
    },
    "ecs_metric_copy": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "m",
          "type": {
            "name": "ecs_metric_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "typeAlias",
              "sizeOf": 1200,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_metric_t",
                "kind": "union",
                "sizeOf": 1200,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Copy measurement */"
    },
    "ecs_query_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Destroy a query.\n * This operation destroys a query and its resources. If the query is used as\n * the parent of subqueries, those subqueries will be orphaned and must be\n * deinitialized as well.\n *\n * @param query The query.\n */"
    },
    "ecs_get_typeid": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get the type for an id.\n * This operation returns the component id for an id, if the id is associated\n * with a type. For a regular component with a non-zero size (an entity with the\n * EcsComponent component) the operation will return the entity itself.\n * \n * For an entity that does not have the EcsComponent component, or with an\n * EcsComponent value with size 0, the operation will return 0.\n * \n * For a pair id the operation will return the type associated with the pair, by\n * applying the following rules in order:\n * - The first pair element is returned if it is a component\n * - 0 is returned if the relationship entity has the Tag property\n * - The second pair element is returned if it is a component\n * - 0 is returned.\n *\n * @param world The world.\n * @param id The id.\n * @return The type id of the id.\n */"
    },
    "ecs_get_parent": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get parent (target of ChildOf relationship) for entity.\n * This operation is the same as calling:\n *   ecs_get_target(world, entity, EcsChildOf, 0);\n * \n * @param world The world.\n * @param entity The entity.\n * @return The parent of the entity, 0 if the entity has no parent.\n */"
    },
    "ecs_doc_get_detail": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get detailed description from entity.\n * \n * @param world The world.\n * @param entity The entity from which to get the description.\n * @return The description.\n */"
    },
    "ecs_cpp_trim_module": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "type_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_value_copy": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Copy value.\n * \n * @param world The world.\n * @param type The type of the value to copy.\n * @param dst Pointer to the storage to copy to.\n * @param src Pointer to the value to copy.\n * @return Zero if success, nonzero if failed. \n */"
    },
    "ecs_set_stage_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "stages",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Configure world to have N stages.\n * This initializes N stages, which allows applications to defer operations to\n * multiple isolated defer queues. This is typically used for applications with\n * multiple threads, where each thread gets its own queue, and commands are\n * merged when threads are synchronized.\n *\n * Note that the ecs_set_threads function already creates the appropriate\n * number of stages. The set_stage_count() operation is useful for applications that\n * want to manage their own stages and/or threads.\n * \n * @param world The world.\n * @param stages The number of stages.\n */"
    },
    "ecs_ptr_to_expr_buf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "buf",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Serialize value into string buffer.\n * Same as ecs_ptr_to_expr, but serializes to an ecs_strbuf_t instance.\n * \n * @param world The world.\n * @param type The type of the value to serialize.\n * @param data The value to serialize.\n * @param buf The strbuf to append the string to.\n * @return Zero if success, non-zero if failed.\n */"
    },
    "ecs_is_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Returns whether the world is being deleted.\n *\n * @param world The world.\n * @return True if being deleted, false if not.\n */"
    },
    "ecs_lookup_child": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "parent",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Lookup a child entity by name.\n * Returns an entity that matches the specified name. Only looks for entities in\n * the provided parent. If no parent is provided, look in the current scope (\n * root if no scope is provided).\n *\n * @param world The world.\n * @param name The entity name.\n * @return The entity with the specified name, or 0 if no entity was found.\n */"
    },
    "ecs_set_pipeline": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "pipeline",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Set a custom pipeline.\n * This operation sets the pipeline to run when ecs_progress is invoked.\n *\n * @param world The world.\n * @param pipeline The pipeline to set.\n */"
    },
    "ecs_unit_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_unit_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_unit_desc_t",
              "kind": "typeAlias",
              "sizeOf": 56,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_unit_desc_t",
                "kind": "struct",
                "sizeOf": 56,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a new unit */"
    },
    "ecs_meta_set_string_literal": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Set field with string literal value (has enclosing \u0022\u0022) */"
    },
    "pinvoke_EcsPreFrame": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [],
      "comment": "// System tags"
    },
    "ecs_meta_member": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Move cursor to member */"
    },
    "ecs_sparse_get_dense": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_os_has_dl": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/** Are dynamic library functions available? */"
    },
    "ecs_lookup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Lookup an entity by name.\n * Returns an entity that matches the specified name. Only looks for entities in\n * the current scope (root if no scope is provided).\n *\n * @param world The world.\n * @param name The entity name.\n * @return The entity with the specified name, or 0 if no entity was found.\n */"
    },
    "ecs_rule_find_var": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Find variable index.\n * This operation looks up the index of a variable in the rule. This index can\n * be used in operations like ecs_iter_set_var and ecs_iter_get_var.\n * \n * @param rule The rule.\n * @param name The variable name.\n * @return The variable index.\n */"
    },
    "ecs_doc_set_link": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "link",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Add link to external documentation to entity.\n * \n * @param world The world.\n * @param entity The entity to which to add the link.\n * @param link The link to add.\n */"
    },
    "ecs_set_name": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Set the name of an entity.\n * This will set or overwrite the name of an entity. If no entity is provided,\n * a new entity will be created.\n *\n * The name is stored in (EcsIdentifier, EcsName).\n *\n * @param world The world.\n * @param entity The entity.\n * @param name The name.\n * @return The provided entity, or a new entity if 0 was provided.\n */"
    },
    "ecs_vec_copy": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_vec_t",
        "kind": "typeAlias",
        "sizeOf": 24,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_vec_t",
          "kind": "struct",
          "sizeOf": 24,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_world_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_world_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [],
      "comment": "/** Create a new world.\n * A world manages all the ECS data and supporting infrastructure. Applications \n * must have at least one world. Entities, component and system handles are \n * local to a world and should not be shared between worlds.\n * \n * This operation creates a world with all builtin modules loaded. \n *\n * @return A new world\n */"
    },
    "pinvoke_EcsSlotOf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "ecs_rule_str_w_profile": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Convert rule to string with profile.\n * To use this you must set the EcsIterProfile flag on an iterator before \n * starting uteration:\n *   it.flags |= EcsIterProfile \n *\n * @param rule The rule.\n * @return The string\n */"
    },
    "ecs_map_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "iter",
          "type": {
            "name": "ecs_map_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_iter_t",
              "kind": "typeAlias",
              "sizeOf": 32,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_iter_t",
                "kind": "struct",
                "sizeOf": 32,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Obtain next element in map from iterator. */"
    },
    "ecs_query_changed": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Returns whether the query data changed since the last iteration.\n * The operation will return true after:\n * - new entities have been matched with\n * - new tables have been matched/unmatched with\n * - matched entities were deleted\n * - matched components were changed\n * \n * The operation will not return true after a write-only (EcsOut) or filter\n * (EcsInOutNone) term has changed, when a term is not matched with the\n * current table (This subject) or for tag terms.\n * \n * The changed state of a table is reset after it is iterated. If a iterator was\n * not iterated until completion, tables may still be marked as changed.\n * \n * If no iterator is provided the operation will return the changed state of the\n * all matched tables of the query. \n * \n * If an iterator is provided, the operation will return the changed state of \n * the currently returned iterator result. The following preconditions must be\n * met before using an iterator with change detection:\n * \n * - The iterator is a query iterator (created with ecs_query_iter)\n * - The iterator must be valid (ecs_query_next must have returned true)\n * - The iterator must be instanced\n * \n * @param query The query (optional if \u0027it\u0027 is provided).\n * @param it The iterator result to test (optional if \u0027query\u0027 is provided).\n * @return true if entities changed, otherwise false.\n */"
    },
    "ecs_commit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "record",
          "type": {
            "name": "ecs_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_record_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_record_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "added",
          "type": {
            "name": "ecs_type_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "removed",
          "type": {
            "name": "ecs_type_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Commit (move) entity to a table.\n * This operation moves an entity from its current table to the specified\n * table. This may cause the following actions:\n * - Ctor for each component in the target table\n * - Move for each overlapping component\n * - Dtor for each component in the source table.\n * - OnAdd triggers for non-overlapping components in the target table\n * - OnRemove triggers for non-overlapping components in the source table.\n *\n * This operation is a faster than adding/removing components individually.\n *\n * The application must explicitly provide the difference in components between\n * tables as the added/removed parameters. This can usually be derived directly\n * from the result of ecs_table_add_id and esc_table_remove_id. These arrays are\n * required to properly execute OnAdd/OnRemove triggers.\n *\n * @param world The world.\n * @param entity The entity to commit.\n * @param record The entity\u0027s record (optional, providing it saves a lookup).\n * @param table The table to commit the entity to.\n * @return True if the entity got moved, false otherwise.\n */"
    },
    "ecs_measure_system_time": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "enable",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Measure system time. \n * System time measurements measure the time spent in each system.\n *\n * System time measurements add overhead to every system invocation and \n * therefore have a small but measurable impact on application performance.\n * System time measurements must be enabled before obtaining system statistics.\n *\n * @param world The world.\n * @param enable Whether to enable or disable system time measuring.\n */"
    },
    "ecs_doc_get_color": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get color from entity.\n * \n * @param world The world.\n * @param entity The entity from which to get the link.\n * @return The color.\n */"
    },
    "ecs_run_aperiodic": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "flags",
          "type": {
            "name": "ecs_flags32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ],
      "comment": "/** Force aperiodic actions.\n * The world may delay certain operations until they are necessary for the\n * application to function correctly. This may cause observable side effects\n * such as delayed triggering of events, which can be inconvenient when for\n * example running a test suite.\n * \n * The flags parameter specifies which aperiodic actions to run. Specify 0 to\n * run all actions. Supported flags start with \u0027EcsAperiodic\u0027. Flags identify\n * internal mechanisms and may change unannounced.\n * \n * @param world The world.\n * @param flags The flags specifying which actions to run.\n */"
    },
    "_ecs_log_pop": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "level",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Decrease log stack.\n * This operation decreases the indent_ value of the OS API and can be useful to\n * make nested behavior more visible.\n * \n * @param level The log level.\n */"
    },
    "ecs_init_w_args": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_world_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_world_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "argc",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "argv",
          "type": {
            "name": "char**",
            "kind": "array",
            "sizeOf": 8,
            "alignOf": 8,
            "sizeOfElement": 8,
            "innerType": {
              "name": "char*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "char",
                "kind": "primitive",
                "sizeOf": 1,
                "alignOf": 1
              }
            }
          }
        }
      ],
      "comment": "/** Create a new world with arguments.\n * Same as ecs_init, but allows passing in command line arguments. These can be\n * used to dynamically enable flecs features to an application. Currently these\n * arguments are not used.\n *\n * @return A new world\n */"
    },
    "ecs_quit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Signal exit\n * This operation signals that the application should quit. It will cause\n * ecs_progress to return false.\n *\n * @param world The world to quit.\n */"
    },
    "ecs_record_get_mut_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "record",
          "type": {
            "name": "ecs_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_record_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_record_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Same as ecs_record_get_id, but returns a mutable pointer.\n * For safe access to the component, obtain the record with ecs_write_begin.\n * \n * @param world The world.\n * @param record Record to the entity.\n * @param id The (component) id.\n * @return Pointer to component, or NULL if entity does not have the component.\n */"
    },
    "ecs_lookup_symbol": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "symbol",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "lookup_as_path",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Lookup an entity by its symbol name.\n * This looks up an entity by symbol stored in (EcsIdentifier, EcsSymbol). The\n * operation does not take into account hierarchies.\n *\n * This operation can be useful to resolve, for example, a type by its C \n * identifier, which does not include the Flecs namespacing.\n */"
    },
    "ecs_filter_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_iter_t",
        "kind": "typeAlias",
        "sizeOf": 608,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_iter_t",
          "kind": "struct",
          "sizeOf": 608,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Return a filter iterator.\n * A filter iterator lets an application iterate over entities that match the\n * specified filter.\n * \n * @param world The world.\n * @param filter The filter.\n * @return An iterator that can be used with ecs_filter_next.\n */"
    },
    "ecs_os_has_logging": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [],
      "comment": "/** Are logging functions available? */"
    },
    "FlecsScriptImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/* Module import */"
    },
    "ecs_os_set_api_defaults": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "ecs_query_stats_reduce": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_query_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_stats_t",
              "kind": "typeAlias",
              "sizeOf": 3624,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_query_stats_t",
                "kind": "struct",
                "sizeOf": 3624,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_query_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_stats_t",
              "kind": "typeAlias",
              "sizeOf": 3624,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_query_stats_t",
                "kind": "struct",
                "sizeOf": 3624,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Reduce source measurement window into single destination measurement. */"
    },
    "ecs_set_automerge": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "automerge",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Enable/disable automerging for world or stage.\n * When automerging is enabled, staged data will automatically be merged with\n * the world when staging ends. This happens at the end of progress(), at a\n * sync point or when readonly_end() is called.\n *\n * Applications can exercise more control over when data from a stage is merged\n * by disabling automerging. This requires an application to explicitly call\n * merge() on the stage.\n *\n * When this function is invoked on the world, it sets all current stages to\n * the provided value and sets the default for new stages. When this function is\n * invoked on a stage, automerging is only set for that specific stage.\n *\n * @param world The world.\n * @param automerge Whether to enable or disable automerging.\n */"
    },
    "ecs_vars_declare": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_expr_var_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_expr_var_t",
          "kind": "typeAlias",
          "sizeOf": 32,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_expr_var_t",
            "kind": "struct",
            "sizeOf": 32,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "vars",
          "type": {
            "name": "ecs_vars_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vars_t",
              "kind": "typeAlias",
              "sizeOf": 168,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vars_t",
                "kind": "struct",
                "sizeOf": 168,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Declare variable in current scope */"
    },
    "ecs_get_target": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "rel",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get the target of a relationship.\n * This will return a target (second element of a pair) of the entity for the \n * specified relationship. The index allows for iterating through the targets, if a \n * single entity has multiple targets for the same relationship.\n *\n * If the index is larger than the total number of instances the entity has for\n * the relationship, the operation will return 0.\n *\n * @param world The world.\n * @param entity The entity.\n * @param rel The relationship between the entity and the target.\n * @param index The index of the relationship instance.\n * @return The target for the relationship at the specified index.\n */"
    },
    "ecs_array_to_json": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Serialize array into JSON string.\n * This operation serializes a value of the provided type to a JSON string. The \n * memory pointed to must be large enough to contain a value of the used type.\n * \n * If count is 0, the function will serialize a single value, not wrapped in\n * array brackets. If count is \u003E= 1, the operation will serialize values to a\n * a comma-separated list inside of array brackets.\n * \n * @param world The world.\n * @param type The type of the value to serialize.\n * @param data The value to serialize.\n * @param count The number of elements to serialize.\n * @return String with JSON expression, or NULL if failed.\n */"
    },
    "ecs_value_move_ctor": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ],
      "comment": "/** Move construct value.\n * \n * @param world The world.\n * @param type The type of the value to move.\n * @param dst Pointer to the storage to move to.\n * @param src Pointer to the value to move.\n * @return Zero if success, nonzero if failed. \n */"
    },
    "ecs_os_warn": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "msg",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_value_new": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Construct a value in new storage \n * \n * @param world The world.\n * @param type The type of the value to create.\n * @return Pointer to type if success, NULL if failed.\n */"
    },
    "ecs_component_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_component_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_component_desc_t",
              "kind": "typeAlias",
              "sizeOf": 160,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_component_desc_t",
                "kind": "struct",
                "sizeOf": 160,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Find or create a component. \n * This operation creates a new component, or finds an existing one. The find or\n * create behavior is the same as ecs_entity_init.\n *\n * When an existing component is found, the size and alignment are verified with\n * the provided values. If the values do not match, the operation will fail.\n *\n * See the documentation of ecs_component_desc_t for more details. \n *\n * @param world The world.\n * @param desc Component init parameters.\n * @return A handle to the new or existing component, or 0 if failed.\n */"
    },
    "ecs_id_flag_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "id_flags",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Convert id flag to string.\n * This operation converts a id flag to a string.\n * \n * @param id_flags The id flag.\n * @return The id flag string, or NULL if no valid id is provided.\n */"
    },
    "ecs_pipeline_stats_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stats",
          "type": {
            "name": "ecs_pipeline_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_stats_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_pipeline_stats_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Free pipeline stats.\n * \n * @param stats The stats to free.\n */"
    },
    "ecs_start_timer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "tick_source",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Start timer.\n * This operation resets the timer and starts it with the specified timeout. The\n * entity must have the EcsTimer component (added by ecs_set_timeout and \n * ecs_set_interval). If the entity does not have the EcsTimer component this\n * operation will assert.\n *\n * @param world The world.\n * @param tick_source The timer to start.\n */"
    },
    "ecs_get_hooks_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_type_hooks_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_type_hooks_t",
          "kind": "typeAlias",
          "sizeOf": 120,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_type_hooks_t",
            "kind": "struct",
            "sizeOf": 120,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Get hooks for component.\n * \n * @param world The world.\n * @param id The component id for which to retrieve the hooks.\n * @return The hooks for the component, or NULL if not registered.\n */"
    },
    "ecs_meta_ptr_to_float": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "double",
        "kind": "primitive",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "type_kind",
          "type": {
            "name": "ecs_primitive_kind_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_primitive_kind_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Convert pointer of primitive kind to float. */"
    },
    "ecs_frame_end": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** End frame. \n * This operation must be called at the end of the frame, and always after\n * ecs_frame_begin.\n *\n * @param world The world.\n */"
    },
    "ecs_table_find": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_table_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_table_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "ids",
          "type": {
            "name": "ecs_id_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Find table from id array. \n * This operation finds or creates a table with the specified array of \n * (component) ids. The ids in the array must be sorted, and it may not contain\n * duplicate elements.\n * \n * @param world The world.\n * @param ids The id array.\n * @param id_count The number of elements in the id array.\n * @return The table with the specified (component) ids.\n */"
    },
    "ecs_iter_to_json_buf": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "iter",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "buf_out",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_iter_to_json_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_to_json_desc_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 1,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_to_json_desc_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 1
              }
            }
          }
        }
      ],
      "comment": "/** Serialize iterator into JSON string buffer.\n * Same as ecs_iter_to_json, but serializes to an ecs_strbuf_t instance.\n * \n * @param world The world.\n * @param iter The iterator to serialize.\n * @param buf_out The strbuf to append the string to.\n * @return Zero if success, non-zero if failed.\n */"
    },
    "ecs_search_relation": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "rel",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "flags",
          "type": {
            "name": "ecs_flags32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "subject_out",
          "type": {
            "name": "ecs_entity_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_entity_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_id_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "uint64_t",
                  "kind": "typeAlias",
                  "sizeOf": 8,
                  "alignOf": 8,
                  "innerType": {
                    "name": "unsigned long long",
                    "kind": "primitive",
                    "sizeOf": 8,
                    "alignOf": 8
                  }
                }
              }
            }
          }
        },
        {
          "name": "id_out",
          "type": {
            "name": "ecs_id_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "tr_out",
          "type": {
            "name": "ecs_table_record_t**",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_record_t*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_table_record_t",
                "kind": "opaqueType"
              }
            }
          }
        }
      ],
      "comment": "/** Search for component/relationship id in table type starting from an offset.\n * This operation is the same as ecs_search_offset, but has the additional\n * capability of traversing relationships to find a component. For example, if\n * an application wants to find a component for either the provided table or a\n * prefab (using the IsA relationship) of that table, it could use the operation \n * like this:\n * \n * int32_t index = ecs_search_relation(\n *   world,            // the world\n *   table,            // the table\n *   0,                // offset 0\n *   ecs_id(Position), // the component id\n *   EcsIsA,           // the relationship to traverse\n *   0,                // start at depth 0 (the table itself)\n *   0,                // no depth limit\n *   NULL,             // (optional) entity on which component was found\n *   NULL,             // see above\n *   NULL);            // internal type with information about matched id\n * \n * The operation searches depth first. If a table type has 2 IsA relationships, the\n * operation will first search the IsA tree of the first relationship.\n * \n * When choosing betwen ecs_search, ecs_search_offset and ecs_search_relation,\n * the simpler the function the better its performance.\n * \n * @param world The world.\n * @param table The table.\n * @param offset Offset from where to start searching.\n * @param id The id to search for.\n * @param rel The relationship to traverse (optional).\n * @param flags Whether to search EcsSelf and/or EcsUp.\n * @param subject_out If provided, it will be set to the matched entity.\n * @param id_out If provided, it will be set to the found id (optional).\n * @param tr_out Internal datatype.\n * @return The index of the id in the table type.\n */"
    },
    "ecs_strbuf_appendch": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "ch",
          "type": {
            "name": "char",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/* Append character to buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "ecs_page_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Progress a paged iterator.\n * Progresses an iterator created by ecs_page_iter.\n * \n * @param it The iterator.\n * @return true if iterator has more results, false if not.\n */"
    },
    "ecs_parse_identifier": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "token_out",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        }
      ],
      "comment": "/** Utility function to parse an identifier */"
    },
    "ecs_write_end": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "record",
          "type": {
            "name": "ecs_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_record_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_record_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** End exclusive write access to entity.\n * This operation ends exclusive access, and must be called after \n * ecs_write_begin.\n * \n * @param record Record to the entity.\n */"
    },
    "ecs_metric_reduce_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "m",
          "type": {
            "name": "ecs_metric_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "typeAlias",
              "sizeOf": 1200,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_metric_t",
                "kind": "union",
                "sizeOf": 1200,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "t",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Reduce last measurement into previous measurement */"
    },
    "ecs_default_ctor": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "ctx",
          "type": {
            "name": "ecs_type_info_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "typeAlias",
              "sizeOf": 144,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_info_t",
                "kind": "struct",
                "sizeOf": 144,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* Constructor that zeromem\u0027s a component value */"
    },
    "ecs_primitive_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_primitive_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_primitive_desc_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_primitive_desc_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a new primitive type */"
    },
    "ecs_mini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_world_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_world_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [],
      "comment": "/** Same as ecs_init, but with minimal set of modules loaded.\n *\n * @return A new tiny world\n */"
    },
    "ecs_set_interval": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "tick_source",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "interval",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/** Set timer interval.\n * This operation will continously invoke systems associated with the timer \n * after the interval period expires. If the entity contains an existing timer,\n * the interval value will be reset.\n *\n * The timer is synchronous, and is incremented each frame by delta_time.\n *\n * The tick_source entity will be be a tick source after this operation. Tick\n * sources can be read by getting the EcsTickSource component. If the tick\n * source ticked this frame, the \u0027tick\u0027 member will be true. When the tick \n * source is a system, the system will tick when the timer ticks. \n *\n * @param world The world.\n * @param tick_source The timer for which to set the interval (0 to create one).\n * @param interval The interval value.\n * @return The timer entity.\n */"
    },
    "ecs_new_from_path_w_sep": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "parent",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "path",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "sep",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "prefix",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Find or create entity from path.\n * This operation will find or create an entity from a path, and will create any\n * intermediate entities if required. If the entity already exists, no entities\n * will be created.\n *\n * If the path starts with the prefix, then the entity will be created from the\n * root scope.\n *\n * @param world The world.\n * @param parent The entity relative to which the entity should be created.\n * @param path The path to create the entity for.\n * @param sep The separator used in the path.\n * @param prefix The prefix used in the path.\n * @return The entity.\n */"
    },
    "ecs_term_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "term",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Free resources of term.\n * This operation frees all resources (such as identifiers) of a term. The term\n * itself is not freed.\n *\n * @param term The term to free.\n */"
    },
    "ecs_delete": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Delete an entity.\n * This operation will delete an entity and all of its components. The entity id\n * will be recycled. Repeatedly calling ecs_delete without ecs_new or\n * ecs_new_w_id will cause a memory leak as it will cause\n * the list with ids that can be recycled to grow unbounded.\n *\n * @param world The world.\n * @param entity The entity.\n */"
    },
    "ecs_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Delete a world.\n * This operation deletes the world, and everything it contains.\n *\n * @param world The world to delete.\n * @return Zero if successful, non-zero if failed.\n */"
    },
    "_ecs_log_push": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "level",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Increase log stack.\n * This operation increases the indent_ value of the OS API and can be useful to\n * make nested behavior more visible.\n * \n * @param level The log level.\n */"
    },
    "ecs_vec_grow": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "elem_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_clear": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Clear all components.\n * This operation will clear all components from an entity but will not delete\n * the entity itself. This effectively prevents the entity id from being \n * recycled.\n *\n * @param world The world.\n * @param entity The entity.\n */"
    },
    "ecs_filter_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Iterate tables matched by filter.\n * This operation progresses the filter iterator to the next table. The \n * iterator must have been initialized with \u0060ecs_filter_iter\u0060. This operation \n * must be invoked at least once before interpreting the contents of the \n * iterator.\n *\n * @param it The iterator\n * @return True if more data is available, false if not.\n */"
    },
    "ecs_strbuf_list_appendch": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "ch",
          "type": {
            "name": "char",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/* Append character to as new element in list. */"
    },
    "ecs_meta_set_char": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "char",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Set field with char value */"
    },
    "ecs_meta_dotmember": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Move cursor to member, supports dot-separated nested members */"
    },
    "ecs_table_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Returns the number of records in the table. \n * This operation returns the number of records that have been populated through\n * the regular (entity) API as well as the number of records that have been\n * inserted using the direct access API.\n *\n * @param table The table.\n * @return The number of records in a table.\n */"
    },
    "ecs_pipeline_stats_copy_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_pipeline_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_stats_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_pipeline_stats_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_pipeline_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_stats_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_pipeline_stats_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Copy last measurement to destination.\n * This operation copies the last measurement into the destination. It does not\n * modify the cursor.\n * \n * @param dst The metrics.\n * @param src The metrics to copy.\n */"
    },
    "ecs_unit_prefix_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_unit_prefix_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_unit_prefix_desc_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_unit_prefix_desc_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a new unit prefix */"
    },
    "ecs_rule_parse_vars": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Populate variables from key-value string.\n * Convenience function to set rule variables from a key-value string separated\n * by comma\u0027s. The string must have the followig format:\n *   var_a: value, var_b: value\n * \n * The key-value list may optionally be enclosed in parenthesis.\n * \n * @param rule The rule.\n * @param it The iterator for which to set the variables.\n * @param expr The key-value expression.\n */"
    },
    "ecs_vec_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_vec_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_vec_t",
          "kind": "typeAlias",
          "sizeOf": 24,
          "alignOf": 8,
          "innerType": {
            "name": "ecs_vec_t",
            "kind": "struct",
            "sizeOf": 24,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "elem_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_meta_get_unit": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get unit of current element. */"
    },
    "ecs_table_storage_to_type_index": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Convert index in table storage type to index in table type. */"
    },
    "ecs_meta_get_ptr": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get pointer to current field */"
    },
    "ecs_map_params_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "params",
          "type": {
            "name": "ecs_map_params_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_params_t",
              "kind": "typeAlias",
              "sizeOf": 56,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_params_t",
                "kind": "struct",
                "sizeOf": 56,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "pinvoke_EcsPostLoad": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "flecs_sparse_remove": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Remove an element */"
    },
    "ecs_should_log": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "level",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Should current level be logged.\n * This operation returns true when the specified log level should be logged \n * with the current log level.\n *\n * @param level The log level to check for.\n * @return Whether logging is enabled for the current level.\n */"
    },
    "ecs_table_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Convert table to string.\n * Same as ecs_type_str(world, ecs_table_get_type(table)). The result of this\n * operation must be freed with ecs_os_free.\n *\n * @param world The world.\n * @param table The table.\n * @return The stringified table type.\n */"
    },
    "ecs_meta_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Move cursor to next field */"
    },
    "ecs_map_params_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "params",
          "type": {
            "name": "ecs_map_params_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_params_t",
              "kind": "typeAlias",
              "sizeOf": 56,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_params_t",
                "kind": "struct",
                "sizeOf": 56,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/* Function/macro postfixes meaning:\n *   _ptr:    access ecs_map_val_t as void*\n *   _ref:    access ecs_map_val_t* as T**\n *   _deref:  dereferences a _ref\n *   _alloc:  if _ptr is NULL, alloc\n *   _free:   if _ptr is not NULL, free\n */"
    },
    "ecs_query_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Convert query to string.\n *\n * @param query The query.\n * @return The query string.\n */"
    },
    "ecs_get_stage": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_world_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_world_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "stage_id",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get stage-specific world pointer.\n * Flecs threads can safely invoke the API as long as they have a private \n * context to write to, also referred to as the stage. This function returns a\n * pointer to a stage, disguised as a world pointer.\n *\n * Note that this function does not(!) create a new world. It simply wraps the\n * existing world in a thread-specific context, which the API knows how to\n * unwrap. The reason the stage is returned as an ecs_world_t is so that it\n * can be passed transparently to the existing API functions, vs. having to \n * create a dediated API for threading.\n *\n * @param world The world.\n * @param stage_id The index of the stage to retrieve.\n * @return A thread-specific pointer to the world. \n */"
    },
    "ecs_cpp_get_constant_name": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "constant_name",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        },
        {
          "name": "func_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "back_len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ]
    },
    "ecs_entity_str": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Convert entity to string.\n * Same as combining:\n * - ecs_get_fullpath(world, entity)\n * - ecs_type_str(world, ecs_get_type(world, entity))\n * \n * The result of this operation must be freed with ecs_os_free.\n *\n * @param world The world.\n * @param entity The entity.\n * @return The entity path with stringified type.\n */"
    },
    "ecs_vars_push": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "vars",
          "type": {
            "name": "ecs_vars_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vars_t",
              "kind": "typeAlias",
              "sizeOf": 168,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vars_t",
                "kind": "struct",
                "sizeOf": 168,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Push variable scope */"
    },
    "ecs_meta_pop": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Pop a struct or collection scope (must follow a push) */"
    },
    "ecs_cpp_get_type_name": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "type_name",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        },
        {
          "name": "func_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "front_len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ]
    },
    "ecs_new_w_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create new entity with (component) id.\n * This operation creates a new entity with an optional (component) id. When 0\n * is passed to the id paramter, no component is added to the new entity.\n * \n * @param world The world.\n * @param id The component id to initialize the new entity with.\n * @return The new entity.\n */"
    },
    "ecs_ref_get_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "ref",
          "type": {
            "name": "ecs_ref_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_ref_t",
              "kind": "typeAlias",
              "sizeOf": 32,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_ref_t",
                "kind": "struct",
                "sizeOf": 32,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get component from ref.\n * Get component pointer from ref. The ref must be created with ecs_ref_init.\n * \n * @param world The world.\n * @param ref The ref.\n * @param id The component id.\n * @return The component pointer, NULL if the entity does not have the component.\n */"
    },
    "ecs_meta_set_int": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "ecs_meta_cursor_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_cursor_t",
              "kind": "typeAlias",
              "sizeOf": 2592,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_cursor_t",
                "kind": "struct",
                "sizeOf": 2592,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Set field with int value */"
    },
    "FlecsSystemImport": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ]
    },
    "ecs_rule_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Delete a rule. \n * \n * @param rule The rule.\n */"
    },
    "ecs_iter_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Progress any iterator.\n * This operation is useful in combination with iterators for which it is not\n * known what created them. Example use cases are functions that should accept\n * any kind of iterator (such as serializers) or iterators created from poly\n * objects.\n * \n * This operation is slightly slower than using a type-specific iterator (e.g.\n * ecs_filter_next, ecs_query_next) as it has to call a function pointer which\n * introduces a level of indirection.\n * \n * @param it The iterator.\n * @return True if iterator has more results, false if not.\n */"
    },
    "pinvoke_EcsPrefab": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [],
      "comment": "// Entity tags"
    },
    "ecs_vec_append": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_table_get_storage_table": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_table_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_table_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get storage type for table.\n *\n * @param table The table.\n * @return The storage type of the table (components only).\n */"
    },
    "ecs_system_stats_reduce_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stats",
          "type": {
            "name": "ecs_system_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_system_stats_t",
              "kind": "typeAlias",
              "sizeOf": 8448,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_system_stats_t",
                "kind": "struct",
                "sizeOf": 8448,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "old",
          "type": {
            "name": "ecs_system_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_system_stats_t",
              "kind": "typeAlias",
              "sizeOf": 8448,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_system_stats_t",
                "kind": "struct",
                "sizeOf": 8448,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Reduce last measurement into previous measurement, restore old value. */"
    },
    "flecs_hashmap_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_query_get_group_ctx": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "group_id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Get context of query group.\n * This operation returns the context of a query group as returned by the \n * on_group_create callback.\n * \n * @param query The query.\n * @param group_id The group for which to obtain the context.\n * @return The group context, NULL if the group doesn\u0027t exist.\n */"
    },
    "ecs_module_path_from_c": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "c_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_vec_init_if": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_search_offset": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "id_out",
          "type": {
            "name": "ecs_id_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Search for component id in table type starting from an offset.\n * This operation is the same as ecs_search, but starts searching from an offset\n * in the table type.\n * \n * This operation is typically called in a loop where the resulting index is\n * used in the next iteration as offset:\n * \n * int32_t index = -1;\n * while ((index = ecs_search_offset(world, table, offset, id, NULL))) {\n *   // do stuff\n * }\n * \n * Depending on how the operation is used it is either linear or constant time.\n * When the id has the form (id) or (rel, *) and the operation is invoked as \n * in the above example, it is guaranteed to be constant time.\n * \n * If the provided id has the form (*, tgt) the operation takes linear time. The\n * reason for this is that ids for an target are not packed together, as they\n * are sorted relationship first.\n * \n * If the id at the offset does not match the provided id, the operation will do\n * a linear search to find a matching id.\n * \n * @param world The world.\n * @param table The table.\n * @param offset Offset from where to start searching.\n * @param id The id to search for.\n * @param id_out If provided, it will be set to the found id (optional).\n * @return The index of the id in the table type.\n */"
    },
    "ecs_frame_begin": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "float",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "delta_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/** Begin frame. \n * When an application does not use ecs_progress to control the main loop, it\n * can still use Flecs features such as FPS limiting and time measurements. This\n * operation needs to be invoked whenever a new frame is about to get processed.\n *\n * Calls to ecs_frame_begin must always be followed by ecs_frame_end.\n *\n * The function accepts a delta_time parameter, which will get passed to \n * systems. This value is also used to compute the amount of time the function\n * needs to sleep to ensure it does not exceed the target_fps, when it is set.\n * When 0 is provided for delta_time, the time will be measured.\n *\n * This function should only be ran from the main thread.\n *\n * @param world The world.\n * @param delta_time Time elapsed since the last frame.\n * @return The provided delta_time, or measured time if 0 was provided.\n */"
    },
    "flecs_sparse_fini": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_system_stats_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "system",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "stats",
          "type": {
            "name": "ecs_system_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_system_stats_t",
              "kind": "typeAlias",
              "sizeOf": 8448,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_system_stats_t",
                "kind": "struct",
                "sizeOf": 8448,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get system statistics.\n * Obtain statistics for the provided system.\n *\n * @param world The world.\n * @param system The system.\n * @param stats Out parameter for statistics.\n * @return true if success, false if not a system.\n */"
    },
    "ecs_query_stats_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "stats",
          "type": {
            "name": "ecs_query_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_stats_t",
              "kind": "typeAlias",
              "sizeOf": 3624,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_query_stats_t",
                "kind": "struct",
                "sizeOf": 3624,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get query statistics.\n * Obtain statistics for the provided query.\n *\n * @param world The world.\n * @param query The query.\n * @param stats Out parameter for statistics.\n */"
    },
    "ecs_progress": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "delta_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      ],
      "comment": "/** Progress a world.\n * This operation progresses the world by running all systems that are both\n * enabled and periodic on their matching entities.\n *\n * An application can pass a delta_time into the function, which is the time\n * passed since the last frame. This value is passed to systems so they can\n * update entity values proportional to the elapsed time since their last\n * invocation.\n *\n * When an application passes 0 to delta_time, ecs_progress will automatically\n * measure the time passed since the last frame. If an application does not uses\n * time management, it should pass a non-zero value for delta_time (1.0 is\n * recommended). That way, no time will be wasted measuring the time.\n *\n * @param world The world to progress.\n * @param delta_time The time passed since the last frame.\n * @return false if ecs_quit has been called, true otherwise.\n */"
    },
    "ecs_term_chain_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_iter_t",
        "kind": "typeAlias",
        "sizeOf": 608,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_iter_t",
          "kind": "struct",
          "sizeOf": 608,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "term",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Return a chained term iterator.\n * A chained iterator applies a filter to the results of the input iterator. The\n * resulting iterator must be iterated with ecs_term_next.\n * \n * @param it The input iterator\n * @param term The term filter to apply to the iterator.\n * @return The chained iterator. \n */"
    },
    "ecs_observer_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_observer_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_observer_desc_t",
              "kind": "typeAlias",
              "sizeOf": 2648,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_observer_desc_t",
                "kind": "struct",
                "sizeOf": 2648,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create observer.\n * Observers are like triggers, but can subscribe for multiple terms. An \n * observer only triggers when the source of the event meets all terms.\n *\n * See the documentation for ecs_observer_desc_t for more details.\n *\n * @param world The world.\n * @param desc The observer creation parameters.\n */"
    },
    "ecs_log_enable_timestamp": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "enabled",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ],
      "comment": "/** Enable/disable logging timestamp.\n * By default timestamps are disabled. Note that enabling timestamps introduces\n * overhead as the logging code will need to obtain the current time.\n *\n * @param enabled Whether to enable tracing with timestamps.\n * @return Previous timestamp setting.\n */"
    },
    "ecs_field_w_size": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Obtain data for a query field.\n * This operation retrieves a pointer to an array of data that belongs to the\n * term in the query. The index refers to the location of the term in the query,\n * and starts counting from one.\n *\n * For example, the query \u0022Position, Velocity\u0022 will return the Position array\n * for index 1, and the Velocity array for index 2.\n *\n * When the specified field is not owned by the entity this function returns a\n * pointer instead of an array. This happens when the source of a field is not\n * the entity being iterated, such as a shared component (from a prefab), a\n * component from a parent, or another entity. The ecs_field_is_self operation\n * can be used to test dynamically if a field is owned.\n *\n * The provided size must be either 0 or must match the size of the datatype\n * of the returned array. If the size does not match, the operation may assert.\n * The size can be dynamically obtained with ecs_field_size.\n *\n * @param it The iterator.\n * @param size The type size of the requested data.\n * @param index The index of the field in the iterator.\n * @return A pointer to the data of the field.\n */"
    },
    "ecs_filter_find_this_var": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Find index for This variable.\n * This operation looks up the index of the This variable. This index can\n * be used in operations like ecs_iter_set_var and ecs_iter_get_var.\n * \n * The operation will return -1 if the variable was not found. This happens when\n * a filter only has terms that are not matched on the This variable, like a\n * filter that exclusively matches singleton components.\n * \n * @param filter The rule.\n * @return The index of the This variable.\n */"
    },
    "ecs_get_stage_count": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Get number of configured stages.\n * Return number of stages set by ecs_set_stage_count.\n *\n * @param world The world.\n * @return The number of stages used for threading.\n */"
    },
    "ecs_vec_remove_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_is_valid": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "e",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Test whether an entity is valid.\n * Entities that are valid can be used with API functions.\n *\n * An entity is valid if it is not 0 and if it is alive. If the provided id is\n * a pair, the contents of the pair will be checked for validity.\n *\n * is_valid will return true for ids that don\u0027t exist (alive or not alive). This\n * allows for using ids that have never been created by ecs_new or similar. In\n * this the function differs from ecs_is_alive, which will return false for\n * entities that do not yet exist.\n *\n * The operation will return false for an id that exists and is not alive, as\n * using this id with an API operation would cause it to assert.\n *\n * @param world The world.\n * @param e The entity.\n * @return True if the entity is valid, false if the entity is not valid.\n */"
    },
    "flecs_bcalloc": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_field_size": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "size_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Return field type size.\n * Return type size of the data returned by field. Returns 0 if field has no \n * data.\n * \n * @param it The iterator.\n * @param index The index of the field in the iterator.\n * @return The type size for the field.\n */"
    },
    "ecs_ensure": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Ensure id is alive.\n * This operation ensures that the provided id is alive. This is useful in\n * scenarios where an application has an existing id that has not been created\n * with ecs_new (such as a global constant or an id from a remote application).\n * \n * When this operation is successful it guarantees that the provided id exists, \n * is valid and is alive.\n *\n * Before this operation the id must either not be alive or have a generation\n * that is equal to the passed in entity.\n *\n * If the provided id has a non-zero generation count and the id does not exist\n * in the world, the id will be created with the specified generation.\n * \n * If the provided id is alive and has a generation count that does not match\n * the provided id, the operation will fail.\n *\n * @param world The world.\n * @param entity The entity id to make alive.\n */"
    },
    "_ecs_poly_is": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "object",
          "type": {
            "name": "ecs_poly_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_poly_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Test if pointer is of specified type.\n * Usage:\n *   ecs_poly_is(ptr, ecs_world_t)\n * \n * This operation only works for poly types.\n * \n * @param object The object to test.\n * @param type The id of the type.\n * @return True if the pointer is of the specified type.\n */"
    },
    "ecs_field_is_readonly": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Test whether the field is readonly.\n * This operation returns whether the field is readonly. Readonly fields are\n * annotated with [in], or are added as a const type in the C\u002B\u002B API.\n *\n * @param it The iterator.\n * @param index The index of the field in the iterator.\n * @return Whether the field is readonly.\n */"
    },
    "ecs_vec_set_min_size": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "elem_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_import_from_library": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "library_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "module_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Import a module from a library.\n * Similar to ecs_import, except that this operation will attempt to load the\n * module from a dynamic library.\n *\n * A library may contain multiple modules, which is why both a library name and\n * a module name need to be provided. If only a library name is provided, the\n * library name will be reused for the module name.\n *\n * The library will be looked up using a canonical name, which is in the same\n * form as a module, like \u0060flecs.components.transform\u0060. To transform this\n * identifier to a platform specific library name, the operation relies on the\n * module_to_dl callback of the os_api which the application has to override if\n * the default does not yield the correct library name.\n *\n * @param world The world.\n * @param library_name The name of the library to load.\n * @param module_name The name of the module to load.\n */"
    },
    "ecs_http_server_start": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "server",
          "type": {
            "name": "ecs_http_server_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Start server. \n * After this operation the server will be able to accept requests.\n * \n * @param server The server to start.\n * @return Zero if successful, non-zero if failed.\n */"
    },
    "ecs_rule_var_name": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "var_id",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Get variable name.\n * This operation returns the variable name for an index.\n * \n * @param rule The rule.\n * @param var_id The variable index.\n */"
    },
    "pinvoke_EcsPreUpdate": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "ecs_system_stats_repeat_last": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "stats",
          "type": {
            "name": "ecs_system_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_system_stats_t",
              "kind": "typeAlias",
              "sizeOf": 8448,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_system_stats_t",
                "kind": "struct",
                "sizeOf": 8448,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Repeat last measurement. */"
    },
    "ecs_field_is_writeonly": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Test whether the field is writeonly.\n * This operation returns whether this is a writeonly field. Writeonly terms are\n * annotated with [out].\n * \n * Serializers are not required to serialize the values of a writeonly field.\n *\n * @param it The iterator.\n * @param index The index of the field in the iterator.\n * @return Whether the field is writeonly.\n */"
    },
    "ecs_readonly_end": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** End readonly mode.\n * This operation ends readonly mode, and must be called after \n * ecs_readonly_begin. Operations that were deferred while the world was in\n * readonly mode will be flushed.\n *\n * @param world The world\n */"
    },
    "ecs_filter_move": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Move resources of one filter to another. */"
    },
    "ecs_enum_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_enum_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_enum_desc_t",
              "kind": "typeAlias",
              "sizeOf": 776,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_enum_desc_t",
                "kind": "struct",
                "sizeOf": 776,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a new enum type */"
    },
    "ecs_strbuf_reset": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/* Reset buffer without returning a string */"
    },
    "ecs_set_rate": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "tick_source",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "rate",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "source",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Set rate filter.\n * This operation initializes a rate filter. Rate filters sample tick sources\n * and tick at a configurable multiple. A rate filter is a tick source itself,\n * which means that rate filters can be chained.\n *\n * Rate filters enable deterministic system execution which cannot be achieved\n * with interval timers alone. For example, if timer A has interval 2.0 and\n * timer B has interval 4.0, it is not guaranteed that B will tick at exactly\n * twice the multiple of A. This is partly due to the indeterministic nature of\n * timers, and partly due to floating point rounding errors. \n *\n * Rate filters can be combined with timers (or other rate filters) to ensure \n * that a system ticks at an exact multiple of a tick source (which can be\n * another system). If a rate filter is created with a rate of 1 it will tick\n * at the exact same time as its source.\n *\n * If no tick source is provided, the rate filter will use the frame tick as\n * source, which corresponds with the number of times ecs_progress is called.\n *\n * The tick_source entity will be be a tick source after this operation. Tick\n * sources can be read by getting the EcsTickSource component. If the tick\n * source ticked this frame, the \u0027tick\u0027 member will be true. When the tick \n * source is a system, the system will tick when the timer ticks.  \n *\n * @param world The world.\n * @param tick_source The rate filter entity (0 to create one).\n * @param rate The rate to apply.\n * @param source The tick source (0 to use frames)\n * @return The filter entity.\n */"
    },
    "ecs_map_init_w_params": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "params",
          "type": {
            "name": "ecs_map_params_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_params_t",
              "kind": "typeAlias",
              "sizeOf": 56,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_map_params_t",
                "kind": "struct",
                "sizeOf": 56,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Initialize new map. */"
    },
    "flecs_sparse_new_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "sparse",
          "type": {
            "name": "ecs_sparse_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_sparse_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Generate or recycle a new id. */"
    },
    "ecs_defer_end": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** End block of operations to defer. \n * See defer_begin.\n *\n * This operation is thread safe.\n *\n * @param world The world.\n * @return true if world changed from deferred mode to non-deferred mode.\n */"
    },
    "ecs_http_get_param": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "const char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "const char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1,
          "isConst": true
        }
      },
      "parameters": [
        {
          "name": "req",
          "type": {
            "name": "ecs_http_request_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_request_t",
              "kind": "typeAlias",
              "sizeOf": 1072,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_http_request_t",
                "kind": "struct",
                "sizeOf": 1072,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Find query parameter in request. \n * \n * @param req The request.\n * @param name The parameter name.\n * @return The decoded parameter value, or NULL if not found.\n */"
    },
    "pinvoke_EcsPhase": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "ecs_table_has_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Test if table has id.\n * Same as ecs_table_get_index(world, table, id) != -1.\n * \n * @param world The world.\n * @param table The table.\n * @param id The id.\n * @return True if the table has the id, false if the table doesn\u0027t.\n */"
    },
    "ecs_id_get_flags": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_flags32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "sizeOf": 4,
          "alignOf": 4,
          "innerType": {
            "name": "unsigned int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Get flags associated with id.\n * This operation returns the internal flags (see api_flags.h) that are \n * associated with the provided id.\n * \n * @param world The world.\n * @param id The id.\n * @return Flags associated with the id, or 0 if the id is not in use.\n */"
    },
    "ecs_os_dbg": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "msg",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/* Logging */"
    },
    "ecs_world_stats_log": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "stats",
          "type": {
            "name": "ecs_world_stats_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_stats_t",
              "kind": "typeAlias",
              "sizeOf": 96024,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_world_stats_t",
                "kind": "struct",
                "sizeOf": 96024,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_remove_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Remove a (component) id from an entity.\n * This operation removes a single (component) id to an entity. If the entity \n * does not have the id, this operation has no side effects.\n *\n * @param world The world.\n * @param entity The entity.\n * @param id The id to remove.\n */"
    },
    "ecs_read_begin": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_record_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_record_t",
          "kind": "typeAlias",
          "sizeOf": 24,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_record_t",
            "kind": "struct",
            "sizeOf": 24,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Begin read access to entity.\n * This operation provides safe read access to the components of an entity.\n * Multiple simultaneous reads are allowed per entity.\n * \n * This operation ensures that code attempting to mutate the entity\u0027s table will\n * throw an assert. Note that for this to happen, asserts must be enabled. It is\n * up to the application to ensure that this does not happen, for example by\n * using a read-write mutex.\n * \n * This operation does *not* provide the same guarantees as a read-write mutex,\n * as it is possible to call ecs_read_begin after calling ecs_write_begin. It is\n * up to application has to ensure that this does not happen.\n * \n * This operation must be followed up with ecs_read_end.\n *\n * @param world The world.\n * @param entity The entity.\n * @return A record to the entity.\n */"
    },
    "ecs_query_get_group_info": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_query_group_info_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_query_group_info_t",
          "kind": "typeAlias",
          "sizeOf": 16,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_query_group_info_t",
            "kind": "struct",
            "sizeOf": 16,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "group_id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Get information about query group.\n * This operation returns information about a query group, including the group\n * context returned by the on_group_create callback.\n * \n * @param query The query.\n * @param group_id The group for which to obtain the group info.\n * @return The group info, NULL if the group doesn\u0027t exist.\n */"
    },
    "_flecs_hashmap_get": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "value_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_bulk_new_w_id": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_entity_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Create N new entities.\n * This operation is the same as ecs_new_w_id, but creates N entities\n * instead of one.\n * \n * @param world The world.\n * @param id The component id to create the entities with.\n * @param count The number of entities to create.\n * @return The first entity id of the newly created entities.\n */"
    },
    "_ecs_assert": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "condition",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "error_code",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "condition_str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "_flecs_hashmap_ensure": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "flecs_hashmap_result_t",
        "kind": "typeAlias",
        "sizeOf": 24,
        "alignOf": 8,
        "innerType": {
          "name": "flecs_hashmap_result_t",
          "kind": "struct",
          "sizeOf": 24,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "map",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "key",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "value_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "ecs_http_server_ctx": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "srv",
          "type": {
            "name": "ecs_http_server_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Get context provided in ecs_http_server_desc_t */"
    },
    "ecs_import_c": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "module",
          "type": {
            "name": "ecs_module_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_world_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "module_name_c",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Same as ecs_import, but with name to scope conversion.\n * PascalCase names are automatically converted to scoped names.\n *\n * @param world The world.\n * @param module The module import function.\n * @param module_name_c The name of the module.\n * @return The module entity.\n */"
    },
    "ecs_id_is_union": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Return whether represents a union.\n * This operation returns whether the specified type represents a union. Only\n * pair ids can be unions.\n * \n * An id represents a union when:\n * - The first element of the pair is EcsUnion/flecs::Union\n * - The first element of the pair has EcsUnion/flecs::Union\n *\n * @param world The world.\n * @param id The id.\n * @return Whether the provided id represents a union.\n */"
    },
    "ecs_strbuf_appendstr_zerocpy": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "ecs_strbuf_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "typeAlias",
              "sizeOf": 1104,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_t",
                "kind": "struct",
                "sizeOf": 1104,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "str",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        }
      ],
      "comment": "/* Append string to buffer, transfer ownership to buffer.\n * Returns false when max is reached, true when there is still space */"
    },
    "ecs_vars_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "vars",
          "type": {
            "name": "ecs_vars_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vars_t",
              "kind": "typeAlias",
              "sizeOf": 168,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vars_t",
                "kind": "struct",
                "sizeOf": 168,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Init variable storage */"
    },
    "ecs_rule_next_instanced": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Progress instanced iterator.\n * Should not be called unless you know what you\u0027re doing :-)\n * \n * @param it The iterator.\n */"
    },
    "flecs_dup": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 128,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_allocator_t",
                "kind": "struct",
                "sizeOf": 128,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_vec_size": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "vec",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_module_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "c_name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_component_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_component_desc_t",
              "kind": "typeAlias",
              "sizeOf": 160,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_component_desc_t",
                "kind": "struct",
                "sizeOf": 160,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Register a new module. */"
    },
    "ecs_time_sub": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_time_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 4,
        "innerType": {
          "name": "ecs_time_t",
          "kind": "struct",
          "sizeOf": 8,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "t1",
          "type": {
            "name": "ecs_time_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_time_t",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          }
        },
        {
          "name": "t2",
          "type": {
            "name": "ecs_time_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_time_t",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/* Calculate difference between two timestamps */"
    },
    "pinvoke_EcsOnLoad": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "ecs_is_deferred": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Test if deferring is enabled for current stage.\n * \n * @param world The world.\n * @return True if deferred, false if not.\n */"
    },
    "ecs_rest_server_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_http_server_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_http_server_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_http_server_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_desc_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_http_server_desc_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create HTTP server for REST API. \n * This allows for the creation of a REST server that can be managed by the\n * application without using Flecs systems.\n * \n * @param world The world.\n * @param desc The HTTP server descriptor.\n * @return The HTTP server, or NULL if failed.\n */"
    },
    "ecs_worker_iter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_iter_t",
        "kind": "typeAlias",
        "sizeOf": 608,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_iter_t",
          "kind": "struct",
          "sizeOf": 608,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Create a worker iterator.\n * Worker iterators can be used to equally divide the number of matched entities \n * across N resources (usually threads). Each resource will process the total\n * number of matched entities divided by \u0027count\u0027.\n * \n * Entities are distributed across resources such that the distribution is\n * stable between queries. Two queries that match the same table are guaranteed\n * to match the same entities in that table.\n * \n * The iterator must be iterated with ecs_worker_next.\n * \n * A worker iterator acts as a passthrough for data exposed by the parent\n * iterator, so that any data provided by the parent will also be provided by\n * the worker iterator.\n * \n * @param it The source iterator.\n * @param index The index of the current resource.\n * @param count The total number of resources to divide entities between.\n * @return A worker iterator.\n */"
    },
    "_flecs_hashmap_next": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "it",
          "type": {
            "name": "flecs_hashmap_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "flecs_hashmap_iter_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "flecs_hashmap_iter_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "key_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        },
        {
          "name": "key_out",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "value_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "_ecs_abort": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "error_code",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "file",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_rule_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_rule_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_rule_t",
          "kind": "opaqueType"
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_filter_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_desc_t",
              "kind": "typeAlias",
              "sizeOf": 2488,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_filter_desc_t",
                "kind": "struct",
                "sizeOf": 2488,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a rule.\n * A rule accepts the same descriptor as a filter, but has the additional\n * ability to use query variables.\n * \n * Query variables can be used to constrain wildcards across multiple terms to\n * the same entity. Regular ECS queries do this in a limited form, as querying\n * for Position, Velocity only returns entities that have both components.\n * \n * Query variables expand this to constrain entities that are resolved while the\n * query is being matched. Consider a query for all entities and the mission\n * they are on:\n *   (Mission, *)\n * \n * If an entity is on multiple missions, the wildcard will match it multiple\n * times. Now say we want to only list combat missions. Naively we could try:\n *   (Mission, *), CombatMission(*)\n * \n * But this doesn\u0027t work, as term 1 returns entities with missions, and term 2\n * returns all combat missions for all entities. Query variables make it \n * possible to apply CombatMission to the found mission:\n *   (Mission, $M), CombatMission($M)\n * \n * By using the same variable (\u0027M\u0027) we ensure that CombatMission is applied to\n * the mission found in the current result.\n * \n * Variables can be used in each part of the term (predicate, subject, object).\n * This is a valid query:\n *   Likes($X, $Y), Likes($Y, $X)\n * \n * This is also a valid query:\n *   _Component, Serializable(_Component)\n * \n * In the query expression syntax, variables are prefixed with a $. When using\n * the descriptor, specify the variable kind:\n *   desc.terms[0].second = { .name = \u0022X\u0022, .var = EcsVarIsVariable }\n * \n * Different terms with the same variable name are automatically correlated by\n * the query engine.\n * \n * A rule needs to be explicitly deleted with ecs_rule_fini.\n * \n * @param world The world.\n * @param desc The descriptor (see ecs_filter_desc_t)\n * @return The rule.\n */"
    },
    "ecs_set_entity_range": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "id_start",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "id_end",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Set a range for issueing new entity ids.\n * This function constrains the entity identifiers returned by ecs_new to the \n * specified range. This operation can be used to ensure that multiple processes\n * can run in the same simulation without requiring a central service that\n * coordinates issueing identifiers.\n * \n * If id_end is set to 0, the range is infinite. If id_end is set to a non-zero\n * value, it has to be larger than id_start. If id_end is set and ecs_new is\n * invoked after an id is issued that is equal to id_end, the application will\n * abort.\n * \n * @param world The world.\n * @param id_start The start of the range.\n * @param id_end The end of the range.\n */"
    },
    "ecs_rule_get_filter": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_filter_t*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_filter_t",
          "kind": "typeAlias",
          "sizeOf": 88,
          "alignOf": 8,
          "isConst": true,
          "innerType": {
            "name": "ecs_filter_t",
            "kind": "struct",
            "sizeOf": 88,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        }
      ],
      "comment": "/** Obtain filter from rule.\n * This operation returns the filter with which the rule was created.\n * \n * @param rule The rule.\n * @return The filter.\n */"
    },
    "ecs_opaque_init": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "desc",
          "type": {
            "name": "ecs_opaque_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_opaque_desc_t",
              "kind": "typeAlias",
              "sizeOf": 128,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_opaque_desc_t",
                "kind": "struct",
                "sizeOf": 128,
                "alignOf": 8
              }
            }
          }
        }
      ],
      "comment": "/** Create a new opaque type.\n * Opaque types are types of which the layout doesn\u0027t match what can be modelled\n * with the primitives of the meta framework, but which have a structure\n * that can be described with meta primitives. Typical examples are STL types\n * such as std::string or std::vector, types with a nontrivial layout, and types\n * that only expose getter/setter methods.\n * \n * An opaque type is a combination of a serialization function, and a handle to\n * a meta type which describes the structure of the serialized output. For\n * example, an opaque type for std::string would have a serializer function that\n * accesses .c_str(), and with type ecs_string_t.\n * \n * The serializer callback accepts a serializer object and a pointer to the \n * value of the opaque type to be serialized. The serializer has two methods:\n * \n * - value, which serializes a value (such as .c_str())\n * - member, which specifies a member to be serialized (in the case of a struct)\n */"
    },
    "pinvoke_EcsOnUpdate": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": []
    },
    "ecs_stop_timer": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "tick_source",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ],
      "comment": "/** Stop timer\n * This operation stops a timer from triggering. The entity must have the \n * EcsTimer component or this operation will assert.\n *\n * @param world The world.\n * @param tick_source The timer to stop.\n */"
    },
    "ecs_rule_var_is_entity": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "var_id",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ],
      "comment": "/** Test if variable is an entity.\n * Internally the rule engine has entity variables and table variables. When\n * iterating through rule variables (by using ecs_rule_variable_count) only\n * the values for entity variables are accessible. This operation enables an\n * appliction to check if a variable is an entity variable.\n * \n * @param rule The rule.\n * @param var_id The variable id.\n */"
    },
    "ecs_snapshot_free": {
      "callingConvention": "cdecl",
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "snapshot",
          "type": {
            "name": "ecs_snapshot_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_snapshot_t",
              "kind": "opaqueType"
            }
          }
        }
      ],
      "comment": "/** Free snapshot resources.\n * This frees resources associated with a snapshot without restoring it.\n *\n * @param snapshot The snapshot to free. \n */"
    }
  },
  "records": {
    "ecs_world_to_json_desc_t": {
      "size_of": 2,
      "align_of": 1,
      "fields": [
        {
          "name": "serialize_builtin",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "comment": "/* Exclude flecs modules \u0026 contents */"
        },
        {
          "name": "serialize_modules",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 1,
          "comment": "/* Exclude modules \u0026 contents */"
        }
      ],
      "comment": "/** Used with ecs_iter_to_json. */"
    },
    "EcsOpaque": {
      "size_of": 120,
      "align_of": 8,
      "fields": [
        {
          "name": "as_type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C Type that describes the serialized output */"
        },
        {
          "name": "serialize",
          "type": {
            "name": "ecs_meta_serialize_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int (const ecs_serializer_t *, const void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Serialize action */"
        },
        {
          "name": "assign_bool",
          "type": {
            "name": "void (void *, _Bool)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 16,
          "comment": "/** Assign bool value */"
        },
        {
          "name": "assign_char",
          "type": {
            "name": "void (void *, char)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 24,
          "comment": "/** Assign char value */"
        },
        {
          "name": "assign_int",
          "type": {
            "name": "void (void *, int64_t)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 32,
          "comment": "/** Assign int value */"
        },
        {
          "name": "assign_uint",
          "type": {
            "name": "void (void *, uint64_t)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 40,
          "comment": "/** Assign unsigned int value */"
        },
        {
          "name": "assign_float",
          "type": {
            "name": "void (void *, double)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 48,
          "comment": "/** Assign float value */"
        },
        {
          "name": "assign_string",
          "type": {
            "name": "void (void *, const char *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 56,
          "comment": "/** Assign string value */"
        },
        {
          "name": "assign_entity",
          "type": {
            "name": "void (void *, ecs_world_t *, ecs_entity_t)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 64,
          "comment": "/** Assign entity value */"
        },
        {
          "name": "assign_null",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 72,
          "comment": "/** Assign null value */"
        },
        {
          "name": "clear",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 80,
          "comment": "/** Clear collection elements */"
        },
        {
          "name": "ensure_element",
          "type": {
            "name": "void *(void *, size_t)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 88,
          "comment": "/** Ensure \u0026 get collection element */"
        },
        {
          "name": "ensure_member",
          "type": {
            "name": "void *(void *, const char *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 96,
          "comment": "/** Ensure \u0026 get element */"
        },
        {
          "name": "count",
          "type": {
            "name": "size_t (const void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 104,
          "comment": "/** Return number of elements */"
        },
        {
          "name": "resize",
          "type": {
            "name": "void (void *, size_t)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 112,
          "comment": "/** Resize to number of elements */"
        }
      ]
    },
    "ecs_bitmask_desc_t": {
      "size_of": 776,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C Existing entity to use for type (optional) */"
        },
        {
          "name": "constants",
          "type": {
            "name": "ecs_bitmask_constant_t[32]",
            "kind": "array",
            "sizeOf": 768,
            "alignOf": 8,
            "sizeOfElement": 24,
            "arraySize": 32,
            "innerType": {
              "name": "ecs_bitmask_constant_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_bitmask_constant_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/** Used with ecs_bitmask_init. */"
    },
    "ecs_value_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/* Utility to hold a value of a dynamic type */"
    },
    "ecs_world_stats_t_ANONYMOUS_FIELD10": {
      "size_of": 10800,
      "align_of": 8,
      "fields": [
        {
          "name": "request_received_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          }
        },
        {
          "name": "request_invalid_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1200
        },
        {
          "name": "request_handled_ok_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2400
        },
        {
          "name": "request_handled_error_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 3600
        },
        {
          "name": "request_not_handled_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 4800
        },
        {
          "name": "request_preflight_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 6000
        },
        {
          "name": "send_ok_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 7200
        },
        {
          "name": "send_error_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 8400
        },
        {
          "name": "busy_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 9600
        }
      ],
      "comment": "/* HTTP statistics */"
    },
    "EcsBitmask": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "constants",
          "type": {
            "name": "ecs_map_t",
            "kind": "typeAlias",
            "sizeOf": 40,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "struct",
              "sizeOf": 40,
              "alignOf": 8
            }
          },
          "comment": "/* map\u003Cu32_t, ecs_bitmask_constant_t\u003E */"
        }
      ]
    },
    "ecs_rule_op_profile_t": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "count",
          "type": {
            "name": "int32_t[2]",
            "kind": "array",
            "sizeOf": 8,
            "alignOf": 8,
            "sizeOfElement": 4,
            "arraySize": 2,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "comment": "/* 0 = enter, 1 = redo */"
        }
      ]
    },
    "ecs_unit_desc_t": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/** Existing entity to associate with unit (optional) */"
        },
        {
          "name": "symbol",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 8,
          "comment": "/** Unit symbol, e.g. \u0022m\u0022, \u0022%\u0022, \u0022g\u0022. (optional) */"
        },
        {
          "name": "quantity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 16,
          "comment": "/** Unit quantity, e.g. distance, percentage, weight. (optional) */"
        },
        {
          "name": "base",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 24,
          "comment": "/** Base unit, e.g. \u0022meters\u0022 (optional) */"
        },
        {
          "name": "over",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 32,
          "comment": "/** Over unit, e.g. \u0022per second\u0022 (optional) */"
        },
        {
          "name": "translation",
          "type": {
            "name": "ecs_unit_translation_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_unit_translation_t",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          },
          "offset_of": 40,
          "comment": "/** Translation to apply to derived unit (optional) */"
        },
        {
          "name": "prefix",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 48,
          "comment": "/** Prefix indicating order of magnitude relative to the derived unit. If set\n     * together with \u0022translation\u0022, the values must match. If translation is not\n     * set, setting prefix will autopopulate it.\n     * Additionally, setting the prefix will enforce that the symbol (if set)\n     * is consistent with the prefix symbol \u002B symbol of the derived unit. If the\n     * symbol is not set, it will be auto populated. */"
        }
      ],
      "comment": "/** Used with ecs_unit_init. */"
    },
    "ecs_allocator_t": {
      "size_of": 128,
      "align_of": 8,
      "fields": [
        {
          "name": "chunks",
          "type": {
            "name": "ecs_block_allocator_t",
            "kind": "typeAlias",
            "sizeOf": 48,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "struct",
              "sizeOf": 48,
              "alignOf": 8
            }
          }
        },
        {
          "name": "sizes",
          "type": {
            "name": "ecs_sparse_t",
            "kind": "struct",
            "sizeOf": 80,
            "alignOf": 8
          },
          "offset_of": 48,
          "comment": "/* \u003Csize, block_allocator_t\u003E */"
        }
      ]
    },
    "ecs_entity_to_json_desc_t": {
      "size_of": 12,
      "align_of": 1,
      "fields": [
        {
          "name": "serialize_path",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "comment": "/**\u003C Serialize full pathname */"
        },
        {
          "name": "serialize_meta_ids",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 1,
          "comment": "/**\u003C Serialize \u0027meta\u0027 ids (Name, ChildOf, etc) */"
        },
        {
          "name": "serialize_label",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 2,
          "comment": "/**\u003C Serialize doc name */"
        },
        {
          "name": "serialize_brief",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 3,
          "comment": "/**\u003C Serialize brief doc description */"
        },
        {
          "name": "serialize_link",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 4,
          "comment": "/**\u003C Serialize doc link (URL) */"
        },
        {
          "name": "serialize_color",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 5,
          "comment": "/**\u003C Serialize doc color */"
        },
        {
          "name": "serialize_id_labels",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 6,
          "comment": "/**\u003C Serialize labels of (component) ids */"
        },
        {
          "name": "serialize_base",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 7,
          "comment": "/**\u003C Serialize base components */"
        },
        {
          "name": "serialize_private",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 8,
          "comment": "/**\u003C Serialize private components */"
        },
        {
          "name": "serialize_hidden",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 9,
          "comment": "/**\u003C Serialize ids hidden by override */"
        },
        {
          "name": "serialize_values",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 10,
          "comment": "/**\u003C Serialize component values */"
        },
        {
          "name": "serialize_type_info",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 11,
          "comment": "/**\u003C Serialize type info (requires serialize_values) */"
        }
      ],
      "comment": "/** Used with ecs_iter_to_json. */"
    },
    "EcsDocDescription": {
      "size_of": 8,
      "align_of": 8,
      "fields": [
        {
          "name": "value",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        }
      ]
    },
    "ecs_observer_desc_t": {
      "size_of": 2648,
      "align_of": 8,
      "fields": [
        {
          "name": "_canary",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8,
          "comment": "/** Existing entity to associate with observer (optional) */"
        },
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_desc_t",
            "kind": "typeAlias",
            "sizeOf": 2488,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_desc_t",
              "kind": "struct",
              "sizeOf": 2488,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "/** Filter for observer */"
        },
        {
          "name": "events",
          "type": {
            "name": "ecs_entity_t[8]",
            "kind": "array",
            "sizeOf": 64,
            "alignOf": 8,
            "sizeOfElement": 8,
            "arraySize": 8,
            "innerType": {
              "name": "ecs_entity_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_id_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "uint64_t",
                  "kind": "typeAlias",
                  "sizeOf": 8,
                  "alignOf": 8,
                  "innerType": {
                    "name": "unsigned long long",
                    "kind": "primitive",
                    "sizeOf": 8,
                    "alignOf": 8
                  }
                }
              }
            }
          },
          "offset_of": 2504,
          "comment": "/** Events to observe (OnAdd, OnRemove, OnSet, UnSet) */"
        },
        {
          "name": "yield_existing",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 2568,
          "comment": "/** When observer is created, generate events from existing data. For example,\n     * EcsOnAdd Position would match all existing instances of Position.\n     * This is only supported for events that are iterable (see EcsIterable) */"
        },
        {
          "name": "callback",
          "type": {
            "name": "ecs_iter_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2576,
          "comment": "/** Callback to invoke on an event, invoked when the observer matches. */"
        },
        {
          "name": "run",
          "type": {
            "name": "ecs_run_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2584,
          "comment": "/** Callback invoked on an event. When left to NULL the default runner\n     * is used which matches the event with the observer\u0027s filter, and calls\n     * \u0027callback\u0027 when it matches. \n     * A reason to override the run function is to improve performance, if there\n     * are more efficient way to test whether an event matches the observer than\n     * the general purpose query matcher. */"
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 2592,
          "comment": "/** User context to pass to callback */"
        },
        {
          "name": "binding_ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 2600,
          "comment": "/** Context to be used for language bindings */"
        },
        {
          "name": "ctx_free",
          "type": {
            "name": "ecs_ctx_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2608,
          "comment": "/** Callback to free ctx */"
        },
        {
          "name": "binding_ctx_free",
          "type": {
            "name": "ecs_ctx_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2616,
          "comment": "/** Callback to free binding_ctx */"
        },
        {
          "name": "observable",
          "type": {
            "name": "ecs_poly_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_poly_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 2624,
          "comment": "/** Observable with which to register the observer */"
        },
        {
          "name": "last_event_id",
          "type": {
            "name": "int32_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 2632,
          "comment": "/** Optional shared last event id for multiple observers. Ensures only one\n     * of the observers with the shared id gets triggered for an event */"
        },
        {
          "name": "term_index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 2640,
          "comment": "/** Used for internal purposes */"
        }
      ],
      "comment": "/** Used with ecs_observer_init. \n * \n * \\ingroup observers\n */"
    },
    "ecs_world_stats_t_ANONYMOUS_FIELD8": {
      "size_of": 12000,
      "align_of": 8,
      "fields": [
        {
          "name": "alloc_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C Allocs per frame */"
        },
        {
          "name": "realloc_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1200,
          "comment": "/**\u003C Reallocs per frame */"
        },
        {
          "name": "free_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2400,
          "comment": "/**\u003C Frees per frame */"
        },
        {
          "name": "outstanding_alloc_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 3600,
          "comment": "/**\u003C Difference between allocs \u0026 frees */"
        },
        {
          "name": "block_alloc_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 4800,
          "comment": "/**\u003C Block allocations per frame */"
        },
        {
          "name": "block_free_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 6000,
          "comment": "/**\u003C Block frees per frame */"
        },
        {
          "name": "block_outstanding_alloc_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 7200,
          "comment": "/**\u003C Difference between allocs \u0026 frees */"
        },
        {
          "name": "stack_alloc_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 8400,
          "comment": "/**\u003C Page allocations per frame */"
        },
        {
          "name": "stack_free_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 9600,
          "comment": "/**\u003C Page frees per frame */"
        },
        {
          "name": "stack_outstanding_alloc_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 10800,
          "comment": "/**\u003C Difference between allocs \u0026 frees */"
        }
      ]
    },
    "ecs_block_allocator_chunk_header_t": {
      "size_of": 8,
      "align_of": 8,
      "fields": [
        {
          "name": "next",
          "type": {
            "name": "ecs_block_allocator_chunk_header_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_chunk_header_t",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "flecs_hashmap_result_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "key",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 8
        },
        {
          "name": "hash",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 16
        }
      ]
    },
    "ecs_bulk_desc_t": {
      "size_of": 296,
      "align_of": 8,
      "fields": [
        {
          "name": "_canary",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "entities",
          "type": {
            "name": "ecs_entity_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_entity_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_id_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "uint64_t",
                  "kind": "typeAlias",
                  "sizeOf": 8,
                  "alignOf": 8,
                  "innerType": {
                    "name": "unsigned long long",
                    "kind": "primitive",
                    "sizeOf": 8,
                    "alignOf": 8
                  }
                }
              }
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Entities to bulk insert. Entity ids provided by\n                             * the application application must be empty (cannot\n                             * have components). If no entity ids are provided, the\n                             * operation will create \u0027count\u0027 new entities. */"
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C Number of entities to create/populate */"
        },
        {
          "name": "ids",
          "type": {
            "name": "ecs_id_t[32]",
            "kind": "array",
            "sizeOf": 256,
            "alignOf": 8,
            "sizeOfElement": 8,
            "arraySize": 32,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C Ids to create the entities with */"
        },
        {
          "name": "data",
          "type": {
            "name": "void**",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "void",
                "kind": "primitive"
              }
            }
          },
          "offset_of": 280,
          "comment": "/**\u003C Array with component data to insert. Each element in \n                        * the array must correspond with an element in the ids\n                        * array. If an element in the ids array is a tag, the\n                        * data array must contain a NULL. An element may be\n                        * set to NULL for a component, in which case the\n                        * component will not be set by the operation. */"
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 288,
          "comment": "/**\u003C Table to insert the entities into. Should not be set\n                         * at the same time as ids. When \u0027table\u0027 is set at the\n                         * same time as \u0027data\u0027, the elements in the data array\n                         * must correspond with the ids in the table\u0027s type. */"
        }
      ],
      "comment": "/** Used with ecs_bulk_init \n * \n * \\ingroup entities\n */"
    },
    "ecs_query_desc_t": {
      "size_of": 2576,
      "align_of": 8,
      "fields": [
        {
          "name": "_canary",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_desc_t",
            "kind": "typeAlias",
            "sizeOf": 2488,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_desc_t",
              "kind": "struct",
              "sizeOf": 2488,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/** Filter for the query */"
        },
        {
          "name": "order_by_component",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 2496,
          "comment": "/** Component to be used by order_by */"
        },
        {
          "name": "order_by",
          "type": {
            "name": "ecs_order_by_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int (ecs_entity_t, const void *, ecs_entity_t, const void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2504,
          "comment": "/** Callback used for ordering query results. If order_by_id is 0, the \n     * pointer provided to the callback will be NULL. If the callback is not\n     * set, results will not be ordered. */"
        },
        {
          "name": "sort_table",
          "type": {
            "name": "ecs_sort_table_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_world_t *, ecs_table_t *, ecs_entity_t *, void *, int32_t, int32_t, int32_t, ecs_order_by_action_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2512,
          "comment": "/** Callback used for ordering query results. Same as order_by,\n     * but more efficient. */"
        },
        {
          "name": "group_by_id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "offset_of": 2520,
          "comment": "/** Id to be used by group_by. This id is passed to the group_by function and\n     * can be used identify the part of an entity type that should be used for\n     * grouping. */"
        },
        {
          "name": "group_by",
          "type": {
            "name": "ecs_group_by_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t (ecs_world_t *, ecs_table_t *, ecs_id_t, void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2528,
          "comment": "/** Callback used for grouping results. If the callback is not set, results\n     * will not be grouped. When set, this callback will be used to calculate a\n     * \u0022rank\u0022 for each entity (table) based on its components. This rank is then\n     * used to sort entities (tables), so that entities (tables) of the same\n     * rank are \u0022grouped\u0022 together when iterated. */"
        },
        {
          "name": "on_group_create",
          "type": {
            "name": "ecs_group_create_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void *(ecs_world_t *, uint64_t, void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2536,
          "comment": "/** Callback that is invoked when a new group is created. The return value of\n     * the callback is stored as context for a group. */"
        },
        {
          "name": "on_group_delete",
          "type": {
            "name": "ecs_group_delete_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_world_t *, uint64_t, void *, void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2544,
          "comment": "/** Callback that is invoked when an existing group is deleted. The return \n     * value of the on_group_create callback is passed as context parameter. */"
        },
        {
          "name": "group_by_ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 2552,
          "comment": "/** Context to pass to group_by */"
        },
        {
          "name": "group_by_ctx_free",
          "type": {
            "name": "ecs_ctx_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2560,
          "comment": "/** Function to free group_by_ctx */"
        },
        {
          "name": "parent",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 2568,
          "comment": "/** If set, the query will be created as a subquery. A subquery matches at\n     * most a subset of its parent query. Subqueries do not directly receive\n     * (table) notifications from the world. Instead parent queries forward\n     * results to subqueries. This can improve matching performance, as fewer\n     * queries need to be matched with new tables.\n     * Subqueries can be nested. */"
        }
      ],
      "comment": "/** Used with ecs_query_init. \n * \n * \\ingroup queries\n */"
    },
    "EcsTarget": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "target",
          "type": {
            "name": "ecs_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_record_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_record_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/** Target data for flattened relationships. */"
    },
    "ecs_expr_var_t": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "ecs_value_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_value_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 8
        },
        {
          "name": "owned",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 24,
          "comment": "/* Set to false if ecs_vars_t should not take ownership of var */"
        }
      ],
      "comment": "/** Storage for parser variables. Variables make it possible to parameterize\n * expression strings, and are referenced with the $ operator (e.g. $var). */"
    },
    "ecs_unit_translation_t": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "factor",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "comment": "/**\u003C Factor to apply (e.g. \u00221000\u0022, \u00221000000\u0022, \u00221024\u0022) */"
        },
        {
          "name": "power",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4,
          "comment": "/**\u003C Power to apply to factor (e.g. \u00221\u0022, \u00223\u0022, \u0022-9\u0022) */"
        }
      ],
      "comment": "/* Helper type to describe translation between two units. Note that this\n * is not intended as a generic approach to unit conversions (e.g. from celsius\n * to fahrenheit) but to translate between units that derive from the same base \n * (e.g. meters to kilometers). \n * \n * Note that power is applied to the factor. When describing a translation of\n * 1000, either use {factor = 1000, power = 1} or {factor = 1, power = 3}. */"
    },
    "ecs_entity_desc_t": {
      "size_of": 320,
      "align_of": 8,
      "fields": [
        {
          "name": "_canary",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Set to modify existing entity (optional) */"
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C Name of the entity. If no entity is provided, an\n                           * entity with this name will be looked up first. When\n                           * an entity is provided, the name will be verified\n                           * with the existing entity. */"
        },
        {
          "name": "sep",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C Optional custom separator for hierarchical names.\n                           * Leave to NULL for default (\u0027.\u0027) separator. Set to\n                           * an empty string to prevent tokenization of name. */"
        },
        {
          "name": "root_sep",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 32,
          "comment": "/**\u003C Optional, used for identifiers relative to root */"
        },
        {
          "name": "symbol",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 40,
          "comment": "/**\u003C Optional entity symbol. A symbol is an unscoped\n                           * identifier that can be used to lookup an entity. The\n                           * primary use case for this is to associate the entity\n                           * with a language identifier, such as a type or\n                           * function name, where these identifiers differ from\n                           * the name they are registered with in flecs. For\n                           * example, C type \u0022EcsPosition\u0022 might be registered\n                           * as \u0022flecs.components.transform.Position\u0022, with the\n                           * symbol set to \u0022EcsPosition\u0022. */"
        },
        {
          "name": "use_low_id",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 48,
          "comment": "/**\u003C When set to true, a low id (typically reserved for\n                           * components) will be used to create the entity, if\n                           * no id is specified. */"
        },
        {
          "name": "add",
          "type": {
            "name": "ecs_id_t[32]",
            "kind": "array",
            "sizeOf": 256,
            "alignOf": 8,
            "sizeOfElement": 8,
            "arraySize": 32,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 56,
          "comment": "/** Array of ids to add to the new or existing entity. */"
        },
        {
          "name": "add_expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 312,
          "comment": "/** String expression with components to add */"
        }
      ],
      "comment": "/** Used with ecs_entity_init \n * \n * \\ingroup entities\n */"
    },
    "ecs_strbuf_list_elem": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "separator",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 8
        }
      ]
    },
    "ecs_meta_cursor_t": {
      "size_of": 2592,
      "align_of": 8,
      "fields": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "scope",
          "type": {
            "name": "ecs_meta_scope_t[32]",
            "kind": "array",
            "sizeOf": 2560,
            "alignOf": 8,
            "sizeOfElement": 80,
            "arraySize": 32,
            "innerType": {
              "name": "ecs_meta_scope_t",
              "kind": "typeAlias",
              "sizeOf": 80,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_scope_t",
                "kind": "struct",
                "sizeOf": 80,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8
        },
        {
          "name": "depth",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 2568
        },
        {
          "name": "valid",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 2572
        },
        {
          "name": "is_primitive_scope",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 2573,
          "comment": "/**\u003C If in root scope, this allows for a push for primitive types */"
        },
        {
          "name": "lookup_action",
          "type": {
            "name": "ecs_entity_t (const ecs_world_t *, const char *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 2576,
          "comment": "/* Custom entity lookup action for overriding default ecs_lookup_fullpath */"
        },
        {
          "name": "lookup_ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 2584
        }
      ],
      "comment": "/** Type that enables iterating/populating a value using reflection data */"
    },
    "ecs_strbuf_element_embedded": {
      "size_of": 536,
      "align_of": 8,
      "fields": [
        {
          "name": "super",
          "type": {
            "name": "ecs_strbuf_element",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_element",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          }
        },
        {
          "name": "buf",
          "type": {
            "name": "char[512]",
            "kind": "array",
            "sizeOf": 512,
            "alignOf": 8,
            "sizeOfElement": 1,
            "arraySize": 512,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 24
        }
      ]
    },
    "ecs_world_stats_t_ANONYMOUS_FIELD7": {
      "size_of": 10800,
      "align_of": 8,
      "fields": [
        {
          "name": "world_time_raw",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C Actual time passed since simulation start (first time progress() is called) */"
        },
        {
          "name": "world_time",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1200,
          "comment": "/**\u003C Simulation time passed since simulation start. Takes into account time scaling */"
        },
        {
          "name": "frame_time",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2400,
          "comment": "/**\u003C Time spent processing a frame. Smaller than world_time_total when load is not 100% */"
        },
        {
          "name": "system_time",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 3600,
          "comment": "/**\u003C Time spent on running systems. */"
        },
        {
          "name": "emit_time",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 4800,
          "comment": "/**\u003C Time spent on notifying observers. */"
        },
        {
          "name": "merge_time",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 6000,
          "comment": "/**\u003C Time spent on merging commands. */"
        },
        {
          "name": "rematch_time",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 7200,
          "comment": "/**\u003C Time spent on rematching. */"
        },
        {
          "name": "fps",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 8400,
          "comment": "/**\u003C Frames per second. */"
        },
        {
          "name": "delta_time",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 9600,
          "comment": "/**\u003C Delta_time. */"
        }
      ],
      "comment": "/* Timing */"
    },
    "ecs_time_t": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "sec",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "nanosec",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        }
      ]
    },
    "ecs_from_json_desc_t": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "comment": "/* Name of expression (used for logging) */"
        },
        {
          "name": "expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 8,
          "comment": "/* Full expression (used for logging) */"
        },
        {
          "name": "lookup_action",
          "type": {
            "name": "ecs_entity_t (const ecs_world_t *, const char *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 16
        },
        {
          "name": "lookup_ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 24
        }
      ],
      "comment": "/** Used with ecs_ptr_from_json, ecs_entity_from_json. */"
    },
    "ecs_ref_t": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/* Entity */"
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8,
          "comment": "/* Component id */"
        },
        {
          "name": "tr",
          "type": {
            "name": "ecs_table_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_record_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 16,
          "comment": "/* Table record for component */"
        },
        {
          "name": "record",
          "type": {
            "name": "ecs_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_record_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_record_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 24,
          "comment": "/* Entity index record */"
        }
      ],
      "comment": "/** Cached reference. */"
    },
    "ecs_meta_type_op_t": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "kind",
          "type": {
            "name": "ecs_meta_type_op_kind_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_meta_type_op_kind_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "offset",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 4,
          "comment": "/**\u003C Offset of current field */"
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C Name of value (only used for struct members) */"
        },
        {
          "name": "op_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C Number of operations until next field or end */"
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 28,
          "comment": "/**\u003C Size of type of operation */"
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 32
        },
        {
          "name": "unit",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 40
        },
        {
          "name": "members",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          },
          "offset_of": 48,
          "comment": "/**\u003C string -\u003E member index (structs only) */"
        }
      ]
    },
    "ecs_iter_private_t": {
      "size_of": 328,
      "align_of": 8,
      "fields": [
        {
          "name": "iter",
          "type": {
            "name": "ecs_iter_private_t_ANONYMOUS_FIELD0",
            "kind": "union",
            "sizeOf": 296,
            "alignOf": 8,
            "isAnonymous": true
          },
          "comment": "/* Iterator specific data */"
        },
        {
          "name": "entity_iter",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 296,
          "comment": "/* Filter applied after matching a table */"
        },
        {
          "name": "cache",
          "type": {
            "name": "ecs_iter_cache_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_cache_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 304,
          "comment": "/* Inline arrays to reduce allocations */"
        }
      ],
      "comment": "/* Private iterator data. Used by iterator implementations to keep track of\n * progress \u0026 to provide builtin storage. */"
    },
    "ecs_filter_t": {
      "size_of": 88,
      "align_of": 8,
      "fields": [
        {
          "name": "hdr",
          "type": {
            "name": "ecs_header_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_header_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          }
        },
        {
          "name": "terms",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C Array containing terms for filter */"
        },
        {
          "name": "term_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C Number of elements in terms array */"
        },
        {
          "name": "field_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 28,
          "comment": "/**\u003C Number of fields in iterator for filter */"
        },
        {
          "name": "owned",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 32,
          "comment": "/**\u003C Is filter object owned by filter */"
        },
        {
          "name": "terms_owned",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 33,
          "comment": "/**\u003C Is terms array owned by filter */"
        },
        {
          "name": "flags",
          "type": {
            "name": "ecs_flags32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 36,
          "comment": "/**\u003C Filter flags */"
        },
        {
          "name": "variable_names",
          "type": {
            "name": "char*[1]",
            "kind": "array",
            "sizeOf": 8,
            "alignOf": 8,
            "sizeOfElement": 8,
            "arraySize": 1,
            "innerType": {
              "name": "char*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "char",
                "kind": "primitive",
                "sizeOf": 1,
                "alignOf": 1
              }
            }
          },
          "offset_of": 40,
          "comment": "/**\u003C Placeholder variable names array */"
        },
        {
          "name": "sizes",
          "type": {
            "name": "int32_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 48,
          "comment": "/**\u003C Field size (same for each result) */"
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 56,
          "comment": "/**\u003C Entity associated with filter (optional) */"
        },
        {
          "name": "iterable",
          "type": {
            "name": "ecs_iterable_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iterable_t",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 64,
          "comment": "/**\u003C Iterable mixin */"
        },
        {
          "name": "dtor",
          "type": {
            "name": "ecs_poly_dtor_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_poly_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 72,
          "comment": "/**\u003C Dtor mixin */"
        },
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 80,
          "comment": "/**\u003C World mixin */"
        }
      ],
      "comment": "/** Filters alllow for ad-hoc quick filtering of entity tables. */"
    },
    "ecs_parse_expr_desc_t": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 8
        },
        {
          "name": "lookup_action",
          "type": {
            "name": "ecs_entity_t (const ecs_world_t *, const char *, void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 16
        },
        {
          "name": "lookup_ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 24
        },
        {
          "name": "vars",
          "type": {
            "name": "ecs_vars_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vars_t",
              "kind": "typeAlias",
              "sizeOf": 168,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vars_t",
                "kind": "struct",
                "sizeOf": 168,
                "alignOf": 8
              }
            }
          },
          "offset_of": 32
        }
      ],
      "comment": "/** Used with ecs_parse_expr. */"
    },
    "ecs_counter_t": {
      "size_of": 1200,
      "align_of": 8,
      "fields": [
        {
          "name": "rate",
          "type": {
            "name": "ecs_gauge_t",
            "kind": "typeAlias",
            "sizeOf": 720,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_gauge_t",
              "kind": "struct",
              "sizeOf": 720,
              "alignOf": 4
            }
          },
          "comment": "/**\u003C Keep track of deltas too */"
        },
        {
          "name": "value",
          "type": {
            "name": "double[60]",
            "kind": "array",
            "sizeOf": 480,
            "alignOf": 8,
            "sizeOfElement": 8,
            "arraySize": 60,
            "innerType": {
              "name": "double",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 720
        }
      ],
      "comment": "/** Monotonically increasing counter */"
    },
    "EcsPrimitive": {
      "size_of": 4,
      "align_of": 4,
      "fields": [
        {
          "name": "kind",
          "type": {
            "name": "ecs_primitive_kind_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_primitive_kind_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_iter_cache_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "stack_cursor",
          "type": {
            "name": "ecs_stack_cursor_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_stack_cursor_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "comment": "/* Stack cursor to restore to */"
        },
        {
          "name": "used",
          "type": {
            "name": "ecs_flags8_t",
            "kind": "typeAlias",
            "sizeOf": 1,
            "alignOf": 1,
            "innerType": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "sizeOf": 1,
              "alignOf": 1,
              "innerType": {
                "name": "unsigned char",
                "kind": "primitive",
                "sizeOf": 1,
                "alignOf": 1
              }
            }
          },
          "offset_of": 16,
          "comment": "/* For which fields is the cache used */"
        },
        {
          "name": "allocated",
          "type": {
            "name": "ecs_flags8_t",
            "kind": "typeAlias",
            "sizeOf": 1,
            "alignOf": 1,
            "innerType": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "sizeOf": 1,
              "alignOf": 1,
              "innerType": {
                "name": "unsigned char",
                "kind": "primitive",
                "sizeOf": 1,
                "alignOf": 1
              }
            }
          },
          "offset_of": 17,
          "comment": "/* Which fields are allocated */"
        }
      ],
      "comment": "/* Inline iterator arrays to prevent allocations for small array sizes */"
    },
    "EcsMember": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "unit",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 16
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 24
        }
      ]
    },
    "EcsPipelineStats": {
      "size_of": 96,
      "align_of": 8,
      "fields": [
        {
          "name": "hdr",
          "type": {
            "name": "EcsStatsHeader",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "EcsStatsHeader",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          }
        },
        {
          "name": "stats",
          "type": {
            "name": "ecs_pipeline_stats_t",
            "kind": "typeAlias",
            "sizeOf": 88,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_pipeline_stats_t",
              "kind": "struct",
              "sizeOf": 88,
              "alignOf": 8
            }
          },
          "offset_of": 8
        }
      ]
    },
    "ecs_block_allocator_t": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "head",
          "type": {
            "name": "ecs_block_allocator_chunk_header_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_chunk_header_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_chunk_header_t",
                "kind": "struct",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "block_head",
          "type": {
            "name": "ecs_block_allocator_block_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_block_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_block_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8
        },
        {
          "name": "block_tail",
          "type": {
            "name": "ecs_block_allocator_block_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_block_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_block_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          },
          "offset_of": 16
        },
        {
          "name": "chunk_size",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 24
        },
        {
          "name": "data_size",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 28
        },
        {
          "name": "chunks_per_block",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 32
        },
        {
          "name": "block_size",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 36
        },
        {
          "name": "alloc_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 40
        }
      ]
    },
    "EcsStatsHeader": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "elapsed",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          }
        },
        {
          "name": "reduce_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        }
      ]
    },
    "EcsMetaTypeSerialized": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "ops",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C vector\u003Cecs_meta_type_op_t\u003E */"
        }
      ]
    },
    "flecs_hashmap_iter_t": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "it",
          "type": {
            "name": "ecs_map_iter_t",
            "kind": "typeAlias",
            "sizeOf": 32,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_iter_t",
              "kind": "struct",
              "sizeOf": 32,
              "alignOf": 8
            }
          }
        },
        {
          "name": "bucket",
          "type": {
            "name": "ecs_hm_bucket_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hm_bucket_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hm_bucket_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          },
          "offset_of": 32
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 40
        }
      ]
    },
    "ecs_http_reply_t": {
      "size_of": 2232,
      "align_of": 8,
      "fields": [
        {
          "name": "code",
          "type": {
            "name": "int",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "comment": "/**\u003C default = 200 */"
        },
        {
          "name": "body",
          "type": {
            "name": "ecs_strbuf_t",
            "kind": "typeAlias",
            "sizeOf": 1104,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "struct",
              "sizeOf": 1104,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C default = \u0022\u0022 */"
        },
        {
          "name": "status",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 1112,
          "comment": "/**\u003C default = OK */"
        },
        {
          "name": "content_type",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 1120,
          "comment": "/**\u003C default = application/json */"
        },
        {
          "name": "headers",
          "type": {
            "name": "ecs_strbuf_t",
            "kind": "typeAlias",
            "sizeOf": 1104,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_t",
              "kind": "struct",
              "sizeOf": 1104,
              "alignOf": 8
            }
          },
          "offset_of": 1128,
          "comment": "/**\u003C default = \u0022\u0022 */"
        }
      ],
      "comment": "/** A reply */"
    },
    "ecs_hm_bucket_t": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "keys",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          }
        },
        {
          "name": "values",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 24
        }
      ]
    },
    "EcsRest": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "port",
          "type": {
            "name": "uint16_t",
            "kind": "typeAlias",
            "sizeOf": 2,
            "alignOf": 2,
            "innerType": {
              "name": "unsigned short",
              "kind": "primitive",
              "sizeOf": 2,
              "alignOf": 2
            }
          },
          "comment": "/**\u003C Port of server (optional, default = 27750) */"
        },
        {
          "name": "ipaddr",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Interface address (optional, default = 0.0.0.0) */"
        },
        {
          "name": "impl",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 16
        }
      ]
    },
    "ecs_term_id_t": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C Entity id. If left to 0 and flags does not \n                                 * specify whether id is an entity or a variable\n                                 * the id will be initialized to EcsThis. \n                                 * To explicitly set the id to 0, leave the id\n                                 * member to 0 and set EcsIsEntity in flags. */"
        },
        {
          "name": "name",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Name. This can be either the variable name\n                                 * (when the EcsIsVariable flag is set) or an\n                                 * entity name. Entity names are used to \n                                 * initialize the id member during term \n                                 * finalization and will be freed when term.move\n                                 * is set to true. */"
        },
        {
          "name": "trav",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C Relationship to traverse when looking for the\n                                 * component. The relationship must have\n                                 * the Traversable property. Default is IsA. */"
        },
        {
          "name": "flags",
          "type": {
            "name": "ecs_flags32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C Term flags */"
        }
      ],
      "comment": "/** Type that describes a single identifier in a term */"
    },
    "ecs_filter_iter_t": {
      "size_of": 296,
      "align_of": 8,
      "fields": [
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "kind",
          "type": {
            "name": "ecs_iter_kind_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_iter_kind_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "term_iter",
          "type": {
            "name": "ecs_term_iter_t",
            "kind": "typeAlias",
            "sizeOf": 272,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_iter_t",
              "kind": "struct",
              "sizeOf": 272,
              "alignOf": 8
            }
          },
          "offset_of": 16
        },
        {
          "name": "matches_left",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 288
        },
        {
          "name": "pivot_term",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 292
        }
      ],
      "comment": "/** Filter-iterator specific data */"
    },
    "EcsVector": {
      "size_of": 8,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ]
    },
    "ecs_system_stats_t": {
      "size_of": 8448,
      "align_of": 8,
      "fields": [
        {
          "name": "first_",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "time_spent",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Time spent processing a system */"
        },
        {
          "name": "invoke_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1208,
          "comment": "/**\u003C Number of times system is invoked */"
        },
        {
          "name": "active",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2408,
          "comment": "/**\u003C Whether system is active (is matched with \u003E0 entities) */"
        },
        {
          "name": "enabled",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 3608,
          "comment": "/**\u003C Whether system is enabled */"
        },
        {
          "name": "last_",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 4808
        },
        {
          "name": "task",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 4816,
          "comment": "/**\u003C Is system a task */"
        },
        {
          "name": "query",
          "type": {
            "name": "ecs_query_stats_t",
            "kind": "typeAlias",
            "sizeOf": 3624,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_stats_t",
              "kind": "struct",
              "sizeOf": 3624,
              "alignOf": 8
            }
          },
          "offset_of": 4824
        }
      ],
      "comment": "/** Statistics for a single system (use ecs_system_stats_get) */"
    },
    "ecs_pipeline_stats_t": {
      "size_of": 88,
      "align_of": 8,
      "fields": [
        {
          "name": "canary_",
          "type": {
            "name": "int8_t",
            "kind": "typeAlias",
            "sizeOf": 1,
            "alignOf": 1,
            "innerType": {
              "name": "signed char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "comment": "/* Allow for initializing struct with {0} */"
        },
        {
          "name": "systems",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/** Vector with system ids of all systems in the pipeline. The systems are\n     * stored in the order they are executed. Merges are represented by a 0. */"
        },
        {
          "name": "system_stats",
          "type": {
            "name": "ecs_map_t",
            "kind": "typeAlias",
            "sizeOf": 40,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "struct",
              "sizeOf": 40,
              "alignOf": 8
            }
          },
          "offset_of": 32,
          "comment": "/** Map with system statistics. For each system in the systems vector, an\n     * entry in the map exists of type ecs_system_stats_t. */"
        },
        {
          "name": "t",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 72,
          "comment": "/** Current position in ringbuffer */"
        },
        {
          "name": "system_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 76,
          "comment": "/**\u003C Number of systems in pipeline */"
        },
        {
          "name": "active_system_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 80,
          "comment": "/**\u003C Number of active systems in pipeline */"
        },
        {
          "name": "rebuild_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 84,
          "comment": "/**\u003C Number of times pipeline has rebuilt */"
        }
      ],
      "comment": "/** Statistics for all systems in a pipeline. */"
    },
    "EcsPoly": {
      "size_of": 8,
      "align_of": 8,
      "fields": [
        {
          "name": "poly",
          "type": {
            "name": "ecs_poly_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_poly_t",
              "kind": "opaqueType"
            }
          },
          "comment": "/**\u003C Pointer to poly object */"
        }
      ],
      "comment": "/** Component for storing a poly object */"
    },
    "EcsMetricValue": {
      "size_of": 8,
      "align_of": 8,
      "fields": [
        {
          "name": "value",
          "type": {
            "name": "double",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ]
    },
    "ecs_header_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "magic",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "comment": "/* Magic number verifying it\u0027s a flecs object */"
        },
        {
          "name": "type",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4,
          "comment": "/* Magic number indicating which type of flecs object */"
        },
        {
          "name": "mixins",
          "type": {
            "name": "ecs_mixins_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_mixins_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 8,
          "comment": "/* Table with offsets to (optional) mixins */"
        }
      ],
      "comment": "/** Header for ecs_poly_t objects. */"
    },
    "ecs_enum_constant_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "comment": "/** Must be set when used with ecs_enum_desc_t */"
        },
        {
          "name": "value",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8,
          "comment": "/** May be set when used with ecs_enum_desc_t */"
        },
        {
          "name": "constant",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 16,
          "comment": "/** Should not be set by ecs_enum_desc_t */"
        }
      ]
    },
    "ecs_world_stats_t_ANONYMOUS_FIELD5": {
      "size_of": 13200,
      "align_of": 8,
      "fields": [
        {
          "name": "add_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          }
        },
        {
          "name": "remove_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1200
        },
        {
          "name": "delete_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2400
        },
        {
          "name": "clear_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 3600
        },
        {
          "name": "set_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 4800
        },
        {
          "name": "get_mut_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 6000
        },
        {
          "name": "modified_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 7200
        },
        {
          "name": "other_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 8400
        },
        {
          "name": "discard_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 9600
        },
        {
          "name": "batched_entity_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 10800
        },
        {
          "name": "batched_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 12000
        }
      ],
      "comment": "/* Commands */"
    },
    "ecs_rule_iter_t": {
      "size_of": 64,
      "align_of": 8,
      "fields": [
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "vars",
          "type": {
            "name": "ecs_var_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_var_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/* Variable storage */"
        },
        {
          "name": "rule_vars",
          "type": {
            "name": "ecs_rule_var_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_var_t",
              "kind": "opaqueType",
              "isConst": true
            }
          },
          "offset_of": 16
        },
        {
          "name": "ops",
          "type": {
            "name": "ecs_rule_op_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_op_t",
              "kind": "opaqueType",
              "isConst": true
            }
          },
          "offset_of": 24
        },
        {
          "name": "op_ctx",
          "type": {
            "name": "ecs_rule_op_ctx_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_op_ctx_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 32,
          "comment": "/* Operation-specific state */"
        },
        {
          "name": "written",
          "type": {
            "name": "uint64_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "offset_of": 40
        },
        {
          "name": "profile",
          "type": {
            "name": "ecs_rule_op_profile_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_op_profile_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 4,
              "innerType": {
                "name": "ecs_rule_op_profile_t",
                "kind": "struct",
                "sizeOf": 8,
                "alignOf": 4
              }
            }
          },
          "offset_of": 48
        },
        {
          "name": "redo",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 56
        },
        {
          "name": "op",
          "type": {
            "name": "int16_t",
            "kind": "typeAlias",
            "sizeOf": 2,
            "alignOf": 2,
            "innerType": {
              "name": "short",
              "kind": "primitive",
              "sizeOf": 2,
              "alignOf": 2
            }
          },
          "offset_of": 58
        },
        {
          "name": "sp",
          "type": {
            "name": "int16_t",
            "kind": "typeAlias",
            "sizeOf": 2,
            "alignOf": 2,
            "innerType": {
              "name": "short",
              "kind": "primitive",
              "sizeOf": 2,
              "alignOf": 2
            }
          },
          "offset_of": 60
        }
      ],
      "comment": "/** Rule-iterator specific data */"
    },
    "ecs_meta_scope_t": {
      "size_of": 80,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C The type being iterated */"
        },
        {
          "name": "ops",
          "type": {
            "name": "ecs_meta_type_op_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_meta_type_op_t",
              "kind": "typeAlias",
              "sizeOf": 56,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_meta_type_op_t",
                "kind": "struct",
                "sizeOf": 56,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C The type operations (see ecs_meta_type_op_t) */"
        },
        {
          "name": "op_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C Number of operations in ops array to process */"
        },
        {
          "name": "op_cur",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 20,
          "comment": "/**\u003C Current operation */"
        },
        {
          "name": "elem_cur",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C Current element (for collections) */"
        },
        {
          "name": "prev_depth",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 28,
          "comment": "/**\u003C Depth to restore, in case dotmember was used */"
        },
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 32,
          "comment": "/**\u003C Pointer to the value being iterated */"
        },
        {
          "name": "comp",
          "type": {
            "name": "EcsComponent*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "EcsComponent",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 4,
              "isConst": true,
              "innerType": {
                "name": "EcsComponent",
                "kind": "struct",
                "sizeOf": 8,
                "alignOf": 4
              }
            }
          },
          "offset_of": 40,
          "comment": "/**\u003C Pointer to component, in case size/alignment is needed */"
        },
        {
          "name": "opaque",
          "type": {
            "name": "EcsOpaque*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "EcsOpaque",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "EcsOpaque",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          },
          "offset_of": 48,
          "comment": "/**\u003C Opaque type interface */"
        },
        {
          "name": "vector",
          "type": {
            "name": "ecs_vec_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_vec_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 56,
          "comment": "/**\u003C Current vector, in case a vector is iterated */"
        },
        {
          "name": "members",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          },
          "offset_of": 64,
          "comment": "/**\u003C string -\u003E member index */"
        },
        {
          "name": "is_collection",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 72,
          "comment": "/**\u003C Is the scope iterating elements? */"
        },
        {
          "name": "is_inline_array",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 73,
          "comment": "/**\u003C Is the scope iterating an inline array? */"
        },
        {
          "name": "is_empty_scope",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 74,
          "comment": "/**\u003C Was scope populated (for collections) */"
        }
      ]
    },
    "EcsEnum": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "constants",
          "type": {
            "name": "ecs_map_t",
            "kind": "typeAlias",
            "sizeOf": 40,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "struct",
              "sizeOf": 40,
              "alignOf": 8
            }
          },
          "comment": "/* map\u003Ci32_t, ecs_enum_constant_t\u003E */"
        }
      ]
    },
    "ecs_world_stats_t_ANONYMOUS_FIELD4": {
      "size_of": 3600,
      "align_of": 8,
      "fields": [
        {
          "name": "query_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C Number of queries */"
        },
        {
          "name": "observer_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1200,
          "comment": "/**\u003C Number of observers */"
        },
        {
          "name": "system_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2400,
          "comment": "/**\u003C Number of systems */"
        }
      ],
      "comment": "/* Queries \u0026 events */"
    },
    "EcsMetricSource": {
      "size_of": 8,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ]
    },
    "ecs_app_desc_t": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "target_fps",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "comment": "/**\u003C Target FPS. */"
        },
        {
          "name": "delta_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4,
          "comment": "/**\u003C Frame time increment (0 for measured values) */"
        },
        {
          "name": "threads",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Number of threads. */"
        },
        {
          "name": "frames",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12,
          "comment": "/**\u003C Number of frames to run (0 for infinite) */"
        },
        {
          "name": "enable_rest",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 16,
          "comment": "/**\u003C Enables ECS access over HTTP, necessary for explorer */"
        },
        {
          "name": "enable_monitor",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 17,
          "comment": "/**\u003C Periodically collect statistics */"
        },
        {
          "name": "port",
          "type": {
            "name": "uint16_t",
            "kind": "typeAlias",
            "sizeOf": 2,
            "alignOf": 2,
            "innerType": {
              "name": "unsigned short",
              "kind": "primitive",
              "sizeOf": 2,
              "alignOf": 2
            }
          },
          "offset_of": 18,
          "comment": "/**\u003C HTTP port used by REST API */"
        },
        {
          "name": "init",
          "type": {
            "name": "ecs_app_init_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int (ecs_world_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C If set, function is ran before starting the\n                                 * main loop. */"
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 32,
          "comment": "/**\u003C Reserved for custom run/frame actions */"
        }
      ],
      "comment": "/** Used with ecs_app_run. */"
    },
    "ecs_strbuf_element_str": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "super",
          "type": {
            "name": "ecs_strbuf_element",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_element",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          }
        },
        {
          "name": "alloc_str",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 24
        }
      ]
    },
    "ecs_query_group_info_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "match_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "comment": "/**\u003C How often tables have been matched/unmatched */"
        },
        {
          "name": "table_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4,
          "comment": "/**\u003C Number of tables in group */"
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Group context, returned by on_group_create */"
        }
      ],
      "comment": "/** Type that contains information about a query group. */"
    },
    "ecs_observer_t": {
      "size_of": 272,
      "align_of": 8,
      "fields": [
        {
          "name": "hdr",
          "type": {
            "name": "ecs_header_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_header_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          }
        },
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_t",
            "kind": "typeAlias",
            "sizeOf": 88,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "struct",
              "sizeOf": 88,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C Query for observer */"
        },
        {
          "name": "events",
          "type": {
            "name": "ecs_entity_t[8]",
            "kind": "array",
            "sizeOf": 64,
            "alignOf": 8,
            "sizeOfElement": 8,
            "arraySize": 8,
            "innerType": {
              "name": "ecs_entity_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_id_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "uint64_t",
                  "kind": "typeAlias",
                  "sizeOf": 8,
                  "alignOf": 8,
                  "innerType": {
                    "name": "unsigned long long",
                    "kind": "primitive",
                    "sizeOf": 8,
                    "alignOf": 8
                  }
                }
              }
            }
          },
          "offset_of": 104,
          "comment": "/* Observer events */"
        },
        {
          "name": "event_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 168
        },
        {
          "name": "callback",
          "type": {
            "name": "ecs_iter_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 176,
          "comment": "/**\u003C See ecs_observer_desc_t::callback */"
        },
        {
          "name": "run",
          "type": {
            "name": "ecs_run_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 184,
          "comment": "/**\u003C See ecs_observer_desc_t::run */"
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 192,
          "comment": "/**\u003C Callback context */"
        },
        {
          "name": "binding_ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 200,
          "comment": "/**\u003C Binding context (for language bindings) */"
        },
        {
          "name": "ctx_free",
          "type": {
            "name": "ecs_ctx_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 208,
          "comment": "/**\u003C Callback to free ctx */"
        },
        {
          "name": "binding_ctx_free",
          "type": {
            "name": "ecs_ctx_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 216,
          "comment": "/**\u003C Callback to free binding_ctx */"
        },
        {
          "name": "observable",
          "type": {
            "name": "ecs_observable_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_observable_t",
              "kind": "typeAlias",
              "sizeOf": 440,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_observable_t",
                "kind": "struct",
                "sizeOf": 440,
                "alignOf": 8
              }
            }
          },
          "offset_of": 224,
          "comment": "/**\u003C Observable for observer */"
        },
        {
          "name": "last_event_id",
          "type": {
            "name": "int32_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 232,
          "comment": "/**\u003C Last handled event id */"
        },
        {
          "name": "last_event_id_storage",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 240
        },
        {
          "name": "register_id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "offset_of": 248,
          "comment": "/**\u003C Id observer is registered with (single term observers only) */"
        },
        {
          "name": "term_index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 256,
          "comment": "/**\u003C Index of the term in parent observer (single term observers only) */"
        },
        {
          "name": "is_monitor",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 260,
          "comment": "/**\u003C If true, the observer only triggers when the\n                                 * filter did not match with the entity before\n                                 * the event happened. */"
        },
        {
          "name": "is_multi",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 261,
          "comment": "/**\u003C If true, the observer triggers on more than one term */"
        },
        {
          "name": "dtor",
          "type": {
            "name": "ecs_poly_dtor_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_poly_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 264,
          "comment": "/* Mixins */"
        }
      ],
      "comment": "/* An observer reacts to events matching a filter */"
    },
    "ecs_world_info_t_ANONYMOUS_FIELD35": {
      "size_of": 88,
      "align_of": 8,
      "fields": [
        {
          "name": "add_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C add commands processed */"
        },
        {
          "name": "remove_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C remove commands processed */"
        },
        {
          "name": "delete_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C delete commands processed */"
        },
        {
          "name": "clear_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C clear commands processed */"
        },
        {
          "name": "set_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 32,
          "comment": "/**\u003C set commands processed */"
        },
        {
          "name": "get_mut_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 40,
          "comment": "/**\u003C get_mut/emplace commands processed */"
        },
        {
          "name": "modified_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 48,
          "comment": "/**\u003C modified commands processed */"
        },
        {
          "name": "other_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 56,
          "comment": "/**\u003C other commands processed */"
        },
        {
          "name": "discard_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 64,
          "comment": "/**\u003C commands discarded, happens when entity is no longer alive when running the command */"
        },
        {
          "name": "batched_entity_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 72,
          "comment": "/**\u003C entities for which commands were batched */"
        },
        {
          "name": "batched_command_count",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 80,
          "comment": "/**\u003C commands batched */"
        }
      ],
      "comment": "/* -- Command counts -- */"
    },
    "ecs_observable_t": {
      "size_of": 440,
      "align_of": 8,
      "fields": [
        {
          "name": "on_add",
          "type": {
            "name": "ecs_event_record_t",
            "kind": "typeAlias",
            "sizeOf": 72,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_event_record_t",
              "kind": "struct",
              "sizeOf": 72,
              "alignOf": 8
            }
          }
        },
        {
          "name": "on_remove",
          "type": {
            "name": "ecs_event_record_t",
            "kind": "typeAlias",
            "sizeOf": 72,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_event_record_t",
              "kind": "struct",
              "sizeOf": 72,
              "alignOf": 8
            }
          },
          "offset_of": 72
        },
        {
          "name": "on_set",
          "type": {
            "name": "ecs_event_record_t",
            "kind": "typeAlias",
            "sizeOf": 72,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_event_record_t",
              "kind": "struct",
              "sizeOf": 72,
              "alignOf": 8
            }
          },
          "offset_of": 144
        },
        {
          "name": "un_set",
          "type": {
            "name": "ecs_event_record_t",
            "kind": "typeAlias",
            "sizeOf": 72,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_event_record_t",
              "kind": "struct",
              "sizeOf": 72,
              "alignOf": 8
            }
          },
          "offset_of": 216
        },
        {
          "name": "on_wildcard",
          "type": {
            "name": "ecs_event_record_t",
            "kind": "typeAlias",
            "sizeOf": 72,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_event_record_t",
              "kind": "struct",
              "sizeOf": 72,
              "alignOf": 8
            }
          },
          "offset_of": 288
        },
        {
          "name": "events",
          "type": {
            "name": "ecs_sparse_t",
            "kind": "typeAlias",
            "sizeOf": 80,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_sparse_t",
              "kind": "struct",
              "sizeOf": 80,
              "alignOf": 8
            }
          },
          "offset_of": 360,
          "comment": "/* sparse\u003Cevent, ecs_event_record_t\u003E */"
        }
      ]
    },
    "ecs_world_stats_t_ANONYMOUS_FIELD2": {
      "size_of": 9600,
      "align_of": 8,
      "fields": [
        {
          "name": "count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C Number of ids (excluding wildcards) */"
        },
        {
          "name": "tag_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1200,
          "comment": "/**\u003C Number of tag ids (ids without data) */"
        },
        {
          "name": "component_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2400,
          "comment": "/**\u003C Number of components ids (ids with data) */"
        },
        {
          "name": "pair_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 3600,
          "comment": "/**\u003C Number of pair ids */"
        },
        {
          "name": "wildcard_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 4800,
          "comment": "/**\u003C Number of wildcard ids */"
        },
        {
          "name": "type_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 6000,
          "comment": "/**\u003C Number of registered types */"
        },
        {
          "name": "create_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 7200,
          "comment": "/**\u003C Number of times id has been created */"
        },
        {
          "name": "delete_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 8400,
          "comment": "/**\u003C Number of times id has been deleted */"
        }
      ],
      "comment": "/* Components and ids */"
    },
    "ecs_struct_desc_t": {
      "size_of": 1544,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C Existing entity to use for type (optional) */"
        },
        {
          "name": "members",
          "type": {
            "name": "ecs_member_t[32]",
            "kind": "array",
            "sizeOf": 1536,
            "alignOf": 8,
            "sizeOfElement": 48,
            "arraySize": 32,
            "innerType": {
              "name": "ecs_member_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_member_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/** Used with ecs_struct_init. */"
    },
    "ecs_filter_desc_t": {
      "size_of": 2488,
      "align_of": 8,
      "fields": [
        {
          "name": "_canary",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "terms",
          "type": {
            "name": "ecs_term_t[16]",
            "kind": "array",
            "sizeOf": 2432,
            "alignOf": 8,
            "sizeOfElement": 152,
            "arraySize": 16,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8,
          "comment": "/** Terms of the filter. If a filter has more terms than \n     * FLECS_TERM_DESC_MAX use terms_buffer */"
        },
        {
          "name": "terms_buffer",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          },
          "offset_of": 2440,
          "comment": "/** For filters with lots of terms an outside array can be provided. */"
        },
        {
          "name": "terms_buffer_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 2448,
          "comment": "/** Number of terms in array provided in terms_buffer. */"
        },
        {
          "name": "storage",
          "type": {
            "name": "ecs_filter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "typeAlias",
              "sizeOf": 88,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_filter_t",
                "kind": "struct",
                "sizeOf": 88,
                "alignOf": 8
              }
            }
          },
          "offset_of": 2456,
          "comment": "/** External storage to prevent allocation of the filter object */"
        },
        {
          "name": "instanced",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 2464,
          "comment": "/** When true, terms returned by an iterator may either contain 1 or N \n     * elements, where terms with N elements are owned, and terms with 1 element \n     * are shared, for example from a parent or base entity. When false, the \n     * iterator will at most return 1 element when the result contains both \n     * owned and shared terms. */"
        },
        {
          "name": "flags",
          "type": {
            "name": "ecs_flags32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 2468,
          "comment": "/** Flags for advanced usage */"
        },
        {
          "name": "expr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 2472,
          "comment": "/** Filter expression. Should not be set at the same time as terms array */"
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 2480,
          "comment": "/** Entity associated with query (optional) */"
        }
      ],
      "comment": "/** Used with ecs_filter_init. \n * \n * \\ingroup filters\n */"
    },
    "ecs_event_desc_t": {
      "size_of": 72,
      "align_of": 8,
      "fields": [
        {
          "name": "event",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/** The event id. Only triggers for the specified event will be notified */"
        },
        {
          "name": "ids",
          "type": {
            "name": "ecs_type_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8,
          "comment": "/** Component ids. Only triggers with a matching component id will be\n     * notified. Observers are guaranteed to get notified once, even if they\n     * match more than one id. */"
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 16,
          "comment": "/** The table for which to notify. */"
        },
        {
          "name": "other_table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 24,
          "comment": "/** Optional 2nd table to notify. This can be used to communicate the\n     * previous or next table, in case an entity is moved between tables. */"
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 32,
          "comment": "/** Limit notified entities to ones starting from offset (row) in table */"
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 36,
          "comment": "/** Limit number of notified entities to count. offset\u002Bcount must be less\n     * than the total number of entities in the table. If left to 0, it will be\n     * automatically determined by doing ecs_table_count(table) - offset. */"
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 40,
          "comment": "/** Single-entity alternative to setting table / offset / count */"
        },
        {
          "name": "param",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          },
          "offset_of": 48,
          "comment": "/** Optional context. Assigned to iter param member */"
        },
        {
          "name": "observable",
          "type": {
            "name": "ecs_poly_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_poly_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 56,
          "comment": "/** Observable (usually the world) */"
        },
        {
          "name": "flags",
          "type": {
            "name": "ecs_flags32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 64,
          "comment": "/** Event flags */"
        }
      ],
      "comment": "/**\n * @defgroup observer Observers\n * @brief Functions for working with events and observers.\n * @{\n */"
    },
    "ecs_http_key_value_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "key",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/** Helper type used for headers \u0026 URL query parameters */"
    },
    "ecs_block_allocator_block_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "memory",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "next",
          "type": {
            "name": "ecs_block_allocator_block_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_block_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "offset_of": 8
        }
      ]
    },
    "ecs_hashmap_t": {
      "size_of": 120,
      "align_of": 8,
      "fields": [
        {
          "name": "hash",
          "type": {
            "name": "ecs_hash_value_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t (const void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "compare",
          "type": {
            "name": "ecs_compare_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int (const void *, const void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 8
        },
        {
          "name": "key_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 16
        },
        {
          "name": "value_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 20
        },
        {
          "name": "hashmap_allocator",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "typeAlias",
              "sizeOf": 48,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_block_allocator_t",
                "kind": "struct",
                "sizeOf": 48,
                "alignOf": 8
              }
            }
          },
          "offset_of": 24
        },
        {
          "name": "bucket_allocator",
          "type": {
            "name": "ecs_block_allocator_t",
            "kind": "typeAlias",
            "sizeOf": 48,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "struct",
              "sizeOf": 48,
              "alignOf": 8
            }
          },
          "offset_of": 32
        },
        {
          "name": "impl",
          "type": {
            "name": "ecs_map_t",
            "kind": "typeAlias",
            "sizeOf": 40,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "struct",
              "sizeOf": 40,
              "alignOf": 8
            }
          },
          "offset_of": 80
        }
      ]
    },
    "ecs_map_t": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "bucket_shift",
          "type": {
            "name": "uint8_t",
            "kind": "typeAlias",
            "sizeOf": 1,
            "alignOf": 1,
            "innerType": {
              "name": "unsigned char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        },
        {
          "name": "shared_allocator",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 1
        },
        {
          "name": "buckets",
          "type": {
            "name": "ecs_bucket_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_bucket_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_bucket_t",
                "kind": "struct",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8
        },
        {
          "name": "bucket_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 20
        },
        {
          "name": "entry_allocator",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "struct",
              "sizeOf": 48,
              "alignOf": 8
            }
          },
          "offset_of": 24
        },
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          },
          "offset_of": 32
        }
      ]
    },
    "EcsUnitPrefix": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "symbol",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "comment": "/**\u003C Symbol of prefix (e.g. \u0022K\u0022, \u0022M\u0022, \u0022Ki\u0022) */"
        },
        {
          "name": "translation",
          "type": {
            "name": "ecs_unit_translation_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_unit_translation_t",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Translation of prefix */"
        }
      ]
    },
    "ecs_var_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "range",
          "type": {
            "name": "ecs_table_range_t",
            "kind": "typeAlias",
            "sizeOf": 16,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_range_t",
              "kind": "struct",
              "sizeOf": 16,
              "alignOf": 8
            }
          },
          "comment": "/* Set when variable stores a range of entities */"
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 16,
          "comment": "/* Set when variable stores single entity */"
        }
      ],
      "comment": "/** Value of query variable */"
    },
    "ecs_enum_desc_t": {
      "size_of": 776,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C Existing entity to use for type (optional) */"
        },
        {
          "name": "constants",
          "type": {
            "name": "ecs_enum_constant_t[32]",
            "kind": "array",
            "sizeOf": 768,
            "alignOf": 8,
            "sizeOfElement": 24,
            "arraySize": 32,
            "innerType": {
              "name": "ecs_enum_constant_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_enum_constant_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/** Used with ecs_enum_init. */"
    },
    "EcsComponent": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "comment": "/**\u003C Component size */"
        },
        {
          "name": "alignment",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 4,
          "comment": "/**\u003C Component alignment */"
        }
      ],
      "comment": "/** Component information. */"
    },
    "ecs_table_range_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8,
          "comment": "/* Leave both members to 0 to cover entire table */"
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12
        }
      ],
      "comment": "/** Range in table */"
    },
    "ecs_record_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "idr",
          "type": {
            "name": "ecs_id_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_record_t",
              "kind": "opaqueType"
            }
          },
          "comment": "/* Id record to (*, entity) for target entities */"
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 8,
          "comment": "/* Identifies a type (and table) in world */"
        },
        {
          "name": "row",
          "type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "unsigned int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16,
          "comment": "/* Table row of the entity */"
        },
        {
          "name": "dense",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 20,
          "comment": "/* Index in dense array */"
        }
      ],
      "comment": "/** Record for entity index */"
    },
    "ecs_page_iter_t": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "limit",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "remaining",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/* Page-iterator specific data */"
    },
    "ecs_world_stats_t_ANONYMOUS_FIELD1": {
      "size_of": 2400,
      "align_of": 8,
      "fields": [
        {
          "name": "count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C Number of entities */"
        },
        {
          "name": "not_alive_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1200,
          "comment": "/**\u003C Number of not alive (recyclable) entity ids */"
        }
      ],
      "comment": "/* Entities */"
    },
    "ecs_world_stats_t_ANONYMOUS_FIELD9": {
      "size_of": 15600,
      "align_of": 8,
      "fields": [
        {
          "name": "request_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          }
        },
        {
          "name": "entity_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1200
        },
        {
          "name": "entity_error_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2400
        },
        {
          "name": "query_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 3600
        },
        {
          "name": "query_error_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 4800
        },
        {
          "name": "query_name_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 6000
        },
        {
          "name": "query_name_error_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 7200
        },
        {
          "name": "query_name_from_cache_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 8400
        },
        {
          "name": "enable_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 9600
        },
        {
          "name": "enable_error_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 10800
        },
        {
          "name": "world_stats_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 12000
        },
        {
          "name": "pipeline_stats_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 13200
        },
        {
          "name": "stats_error_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 14400
        }
      ],
      "comment": "/* REST statistics */"
    },
    "ecs_worker_iter_t": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        }
      ],
      "comment": "/* Worker-iterator specific data */"
    },
    "ecs_term_t": {
      "size_of": 152,
      "align_of": 8,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "comment": "/**\u003C Component id to be matched by term. Can be\n                                 * set directly, or will be populated from the\n                                 * first/second members, which provide more\n                                 * flexibility. */"
        },
        {
          "name": "src",
          "type": {
            "name": "ecs_term_id_t",
            "kind": "typeAlias",
            "sizeOf": 32,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_id_t",
              "kind": "struct",
              "sizeOf": 32,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Source of term */"
        },
        {
          "name": "first",
          "type": {
            "name": "ecs_term_id_t",
            "kind": "typeAlias",
            "sizeOf": 32,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_id_t",
              "kind": "struct",
              "sizeOf": 32,
              "alignOf": 8
            }
          },
          "offset_of": 40,
          "comment": "/**\u003C Component or first element of pair */"
        },
        {
          "name": "second",
          "type": {
            "name": "ecs_term_id_t",
            "kind": "typeAlias",
            "sizeOf": 32,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_id_t",
              "kind": "struct",
              "sizeOf": 32,
              "alignOf": 8
            }
          },
          "offset_of": 72,
          "comment": "/**\u003C Second element of pair */"
        },
        {
          "name": "inout",
          "type": {
            "name": "ecs_inout_kind_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_inout_kind_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 104,
          "comment": "/**\u003C Access to contents matched by term */"
        },
        {
          "name": "oper",
          "type": {
            "name": "ecs_oper_kind_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_oper_kind_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 108,
          "comment": "/**\u003C Operator of term */"
        },
        {
          "name": "id_flags",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "offset_of": 112,
          "comment": "/**\u003C Id flags of term id */"
        },
        {
          "name": "name",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 120,
          "comment": "/**\u003C Name of term */"
        },
        {
          "name": "field_index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 128,
          "comment": "/**\u003C Index of field for term in iterator */"
        },
        {
          "name": "idr",
          "type": {
            "name": "ecs_id_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_record_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 136,
          "comment": "/**\u003C Cached pointer to internal index */"
        },
        {
          "name": "flags",
          "type": {
            "name": "ecs_flags16_t",
            "kind": "typeAlias",
            "sizeOf": 2,
            "alignOf": 2,
            "innerType": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "sizeOf": 2,
              "alignOf": 2,
              "innerType": {
                "name": "unsigned short",
                "kind": "primitive",
                "sizeOf": 2,
                "alignOf": 2
              }
            }
          },
          "offset_of": 144,
          "comment": "/**\u003C Flags that help eval, set by ecs_filter_init */"
        },
        {
          "name": "move",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 146,
          "comment": "/**\u003C Used by internals */"
        }
      ],
      "comment": "/** Type that describes a term (single element in a query) */"
    },
    "ecs_iter_private_t_ANONYMOUS_FIELD0": {
      "record_kind": "union",
      "size_of": 296,
      "align_of": 8,
      "fields": [
        {
          "name": "term",
          "type": {
            "name": "ecs_term_iter_t",
            "kind": "typeAlias",
            "sizeOf": 272,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_iter_t",
              "kind": "struct",
              "sizeOf": 272,
              "alignOf": 8
            }
          }
        },
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_iter_t",
            "kind": "typeAlias",
            "sizeOf": 296,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_iter_t",
              "kind": "struct",
              "sizeOf": 296,
              "alignOf": 8
            }
          }
        },
        {
          "name": "query",
          "type": {
            "name": "ecs_query_iter_t",
            "kind": "typeAlias",
            "sizeOf": 48,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_iter_t",
              "kind": "struct",
              "sizeOf": 48,
              "alignOf": 8
            }
          }
        },
        {
          "name": "rule",
          "type": {
            "name": "ecs_rule_iter_t",
            "kind": "typeAlias",
            "sizeOf": 64,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_rule_iter_t",
              "kind": "struct",
              "sizeOf": 64,
              "alignOf": 8
            }
          }
        },
        {
          "name": "snapshot",
          "type": {
            "name": "ecs_snapshot_iter_t",
            "kind": "typeAlias",
            "sizeOf": 120,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_snapshot_iter_t",
              "kind": "struct",
              "sizeOf": 120,
              "alignOf": 8
            }
          }
        },
        {
          "name": "page",
          "type": {
            "name": "ecs_page_iter_t",
            "kind": "typeAlias",
            "sizeOf": 12,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_page_iter_t",
              "kind": "struct",
              "sizeOf": 12,
              "alignOf": 4
            }
          }
        },
        {
          "name": "worker",
          "type": {
            "name": "ecs_worker_iter_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_worker_iter_t",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "EcsScript": {
      "size_of": 64,
      "align_of": 8,
      "fields": [
        {
          "name": "using_",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          }
        },
        {
          "name": "script",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 24
        },
        {
          "name": "prop_defaults",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 32
        },
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 56
        }
      ],
      "comment": "/* Script component */"
    },
    "ecs_table_cache_iter_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "cur",
          "type": {
            "name": "ecs_table_cache_hdr_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_cache_hdr_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "next",
          "type": {
            "name": "ecs_table_cache_hdr_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_cache_hdr_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 8
        },
        {
          "name": "next_list",
          "type": {
            "name": "ecs_table_cache_hdr_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_cache_hdr_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 16
        }
      ],
      "comment": "/* Convenience struct to iterate table array for id */"
    },
    "ecs_map_iter_t": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "map",
          "type": {
            "name": "ecs_map_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_map_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "bucket",
          "type": {
            "name": "ecs_bucket_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_bucket_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_bucket_t",
                "kind": "struct",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "offset_of": 8
        },
        {
          "name": "entry",
          "type": {
            "name": "ecs_bucket_entry_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_bucket_entry_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_bucket_entry_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 16
        },
        {
          "name": "res",
          "type": {
            "name": "ecs_map_data_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 24
        }
      ]
    },
    "ecs_expr_var_scope_t": {
      "size_of": 152,
      "align_of": 8,
      "fields": [
        {
          "name": "var_index",
          "type": {
            "name": "ecs_hashmap_t",
            "kind": "typeAlias",
            "sizeOf": 120,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "struct",
              "sizeOf": 120,
              "alignOf": 8
            }
          }
        },
        {
          "name": "vars",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 120
        },
        {
          "name": "parent",
          "type": {
            "name": "ecs_expr_var_scope_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_expr_var_scope_t",
              "kind": "struct",
              "sizeOf": 152,
              "alignOf": 8
            }
          },
          "offset_of": 144
        }
      ]
    },
    "ecs_member_t": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "comment": "/** Must be set when used with ecs_struct_desc_t */"
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16,
          "comment": "/** May be set when used with ecs_struct_desc_t */"
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 20
        },
        {
          "name": "unit",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 24,
          "comment": "/** May be set when used with ecs_struct_desc_t, will be auto-populated if\n     * type entity is also a unit */"
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 32,
          "comment": "/** Should not be set by ecs_struct_desc_t */"
        },
        {
          "name": "member",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 40
        }
      ],
      "comment": "/** Element type of members vector in EcsStruct */"
    },
    "ecs_bucket_entry_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "key",
          "type": {
            "name": "ecs_map_key_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "value",
          "type": {
            "name": "ecs_map_val_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_data_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8
        },
        {
          "name": "next",
          "type": {
            "name": "ecs_bucket_entry_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_bucket_entry_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 16
        }
      ],
      "comment": "/* Map type */"
    },
    "ecs_bitmask_constant_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "comment": "/** Must be set when used with ecs_bitmask_desc_t */"
        },
        {
          "name": "value",
          "type": {
            "name": "ecs_flags32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 8,
          "comment": "/** May be set when used with ecs_bitmask_desc_t */"
        },
        {
          "name": "constant",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 16,
          "comment": "/** Should not be set by ecs_bitmask_desc_t */"
        }
      ]
    },
    "ecs_unit_prefix_desc_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/** Existing entity to associate with unit prefix (optional) */"
        },
        {
          "name": "symbol",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 8,
          "comment": "/** Unit symbol, e.g. \u0022m\u0022, \u0022%\u0022, \u0022g\u0022. (optional) */"
        },
        {
          "name": "translation",
          "type": {
            "name": "ecs_unit_translation_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_unit_translation_t",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          },
          "offset_of": 16,
          "comment": "/** Translation to apply to derived unit (optional) */"
        }
      ],
      "comment": "/** Used with ecs_unit_prefix_init. */"
    },
    "ecs_gauge_t": {
      "size_of": 720,
      "align_of": 4,
      "fields": [
        {
          "name": "avg",
          "type": {
            "name": "float[60]",
            "kind": "array",
            "sizeOf": 240,
            "alignOf": 8,
            "sizeOfElement": 4,
            "arraySize": 60,
            "innerType": {
              "name": "float",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "min",
          "type": {
            "name": "float[60]",
            "kind": "array",
            "sizeOf": 240,
            "alignOf": 8,
            "sizeOfElement": 4,
            "arraySize": 60,
            "innerType": {
              "name": "float",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 240
        },
        {
          "name": "max",
          "type": {
            "name": "float[60]",
            "kind": "array",
            "sizeOf": 240,
            "alignOf": 8,
            "sizeOfElement": 4,
            "arraySize": 60,
            "innerType": {
              "name": "float",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 480
        }
      ],
      "comment": "/** Simple value that indicates current state */"
    },
    "EcsArray": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        }
      ]
    },
    "ecs_sparse_t": {
      "size_of": 80,
      "align_of": 8,
      "fields": [
        {
          "name": "dense",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "comment": "/* Dense array with indices to sparse array. The\n                              * dense array stores both alive and not alive\n                              * sparse indices. The \u0027count\u0027 member keeps\n                              * track of which indices are alive. */"
        },
        {
          "name": "pages",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 24,
          "comment": "/* Chunks with sparse arrays \u0026 data */"
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 48,
          "comment": "/* Element size */"
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 52,
          "comment": "/* Number of alive entries */"
        },
        {
          "name": "max_id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 56,
          "comment": "/* Local max index (if no global is set) */"
        },
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          },
          "offset_of": 64
        },
        {
          "name": "page_allocator",
          "type": {
            "name": "ecs_block_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_block_allocator_t",
              "kind": "struct",
              "sizeOf": 48,
              "alignOf": 8
            }
          },
          "offset_of": 72
        }
      ]
    },
    "ecs_os_api_t": {
      "size_of": 296,
      "align_of": 8,
      "fields": [
        {
          "name": "init_",
          "type": {
            "name": "ecs_os_api_init_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "comment": "/* API init / deinit */"
        },
        {
          "name": "fini_",
          "type": {
            "name": "ecs_os_api_fini_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 8
        },
        {
          "name": "malloc_",
          "type": {
            "name": "ecs_os_api_malloc_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void *(ecs_size_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "/* Memory management */"
        },
        {
          "name": "realloc_",
          "type": {
            "name": "ecs_os_api_realloc_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void *(void *, ecs_size_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 24
        },
        {
          "name": "calloc_",
          "type": {
            "name": "ecs_os_api_calloc_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void *(ecs_size_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 32
        },
        {
          "name": "free_",
          "type": {
            "name": "ecs_os_api_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 40
        },
        {
          "name": "strdup_",
          "type": {
            "name": "ecs_os_api_strdup_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char *(const char *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 48,
          "comment": "/* Strings */"
        },
        {
          "name": "thread_new_",
          "type": {
            "name": "ecs_os_api_thread_new_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_os_thread_t (ecs_os_thread_callback_t, void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 56,
          "comment": "/* Threads */"
        },
        {
          "name": "thread_join_",
          "type": {
            "name": "ecs_os_api_thread_join_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void *(ecs_os_thread_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 64
        },
        {
          "name": "thread_self_",
          "type": {
            "name": "ecs_os_api_thread_self_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_os_thread_id_t (void)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 72
        },
        {
          "name": "ainc_",
          "type": {
            "name": "ecs_os_api_ainc_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int32_t (int32_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 80,
          "comment": "/* Atomic incremenet / decrement */"
        },
        {
          "name": "adec_",
          "type": {
            "name": "ecs_os_api_ainc_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int32_t (int32_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 88
        },
        {
          "name": "lainc_",
          "type": {
            "name": "ecs_os_api_lainc_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int64_t (int64_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 96
        },
        {
          "name": "ladec_",
          "type": {
            "name": "ecs_os_api_lainc_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int64_t (int64_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 104
        },
        {
          "name": "mutex_new_",
          "type": {
            "name": "ecs_os_api_mutex_new_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_os_mutex_t (void)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 112,
          "comment": "/* Mutex */"
        },
        {
          "name": "mutex_free_",
          "type": {
            "name": "ecs_os_api_mutex_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_os_mutex_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 120
        },
        {
          "name": "mutex_lock_",
          "type": {
            "name": "ecs_os_api_mutex_lock_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_os_mutex_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 128
        },
        {
          "name": "mutex_unlock_",
          "type": {
            "name": "ecs_os_api_mutex_lock_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_os_mutex_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 136
        },
        {
          "name": "cond_new_",
          "type": {
            "name": "ecs_os_api_cond_new_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_os_cond_t (void)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 144,
          "comment": "/* Condition variable */"
        },
        {
          "name": "cond_free_",
          "type": {
            "name": "ecs_os_api_cond_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_os_cond_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 152
        },
        {
          "name": "cond_signal_",
          "type": {
            "name": "ecs_os_api_cond_signal_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_os_cond_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 160
        },
        {
          "name": "cond_broadcast_",
          "type": {
            "name": "ecs_os_api_cond_broadcast_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_os_cond_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 168
        },
        {
          "name": "cond_wait_",
          "type": {
            "name": "ecs_os_api_cond_wait_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_os_cond_t, ecs_os_mutex_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 176
        },
        {
          "name": "sleep_",
          "type": {
            "name": "ecs_os_api_sleep_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (int32_t, int32_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 184,
          "comment": "/* Time */"
        },
        {
          "name": "now_",
          "type": {
            "name": "ecs_os_api_now_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t (void)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 192
        },
        {
          "name": "get_time_",
          "type": {
            "name": "ecs_os_api_get_time_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_time_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 200
        },
        {
          "name": "log_",
          "type": {
            "name": "ecs_os_api_log_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (int32_t, const char *, int32_t, const char *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 208,
          "comment": "/* Logging function. The level should be interpreted as: */\n                           /* \u003E0: Debug tracing. Only enabled in debug builds. */\n                           /*  0: Tracing. Enabled in debug/release builds. */\n                           /* -2: Warning. An issue occurred, but operation was successful. */\n                           /* -3: Error. An issue occurred, and operation was unsuccessful. */\n                           /* -4: Fatal. An issue occurred, and application must quit. */"
        },
        {
          "name": "abort_",
          "type": {
            "name": "ecs_os_api_abort_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 216,
          "comment": "/* Application termination */"
        },
        {
          "name": "dlopen_",
          "type": {
            "name": "ecs_os_api_dlopen_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_os_dl_t (const char *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 224,
          "comment": "/* Dynamic library loading */"
        },
        {
          "name": "dlproc_",
          "type": {
            "name": "ecs_os_api_dlproc_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_os_proc_t (ecs_os_dl_t, const char *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 232
        },
        {
          "name": "dlclose_",
          "type": {
            "name": "ecs_os_api_dlclose_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_os_dl_t)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 240
        },
        {
          "name": "module_to_dl_",
          "type": {
            "name": "ecs_os_api_module_to_path_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char *(const char *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 248,
          "comment": "/* Overridable function that translates from a logical module id to a\n     * shared library filename */"
        },
        {
          "name": "module_to_etc_",
          "type": {
            "name": "ecs_os_api_module_to_path_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char *(const char *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 256,
          "comment": "/* Overridable function that translates from a logical module id to a\n     * path that contains module-specif resources or assets */"
        },
        {
          "name": "log_level_",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 264,
          "comment": "/* Trace level */"
        },
        {
          "name": "log_indent_",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 268,
          "comment": "/* Trace indentation */"
        },
        {
          "name": "log_last_error_",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 272,
          "comment": "/* Last error code */"
        },
        {
          "name": "log_last_timestamp_",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 280,
          "comment": "/* Last recorded timestamp */"
        },
        {
          "name": "flags_",
          "type": {
            "name": "ecs_flags32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 288,
          "comment": "/* OS API flags */"
        }
      ],
      "comment": "/* Prefix members of struct with \u0027ecs_\u0027 as some system headers may define \n * macros for functions like \u0022strdup\u0022, \u0022log\u0022 or \u0022_free\u0022 */"
    },
    "ecs_serializer_t": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "value",
          "type": {
            "name": "int (const ecs_serializer_t *, ecs_entity_t, const void *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "comment": "/* Serialize value */"
        },
        {
          "name": "member",
          "type": {
            "name": "int (const ecs_serializer_t *, const char *)",
            "kind": "functionPointer",
            "sizeOf": 8,
            "alignOf": 8
          },
          "offset_of": 8,
          "comment": "/* Serialize member */"
        },
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          },
          "offset_of": 16
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 24
        }
      ],
      "comment": "/** Serializer interface */"
    },
    "EcsTickSource": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "tick",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "comment": "/**\u003C True if providing tick */"
        },
        {
          "name": "time_elapsed",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4,
          "comment": "/**\u003C Time elapsed since last tick */"
        }
      ],
      "comment": "/** Component used to provide a tick source to systems */"
    },
    "ecs_script_desc_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/* Set to customize entity handle associated with script */"
        },
        {
          "name": "filename",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 8,
          "comment": "/* Set to load script from file */"
        },
        {
          "name": "str",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 16,
          "comment": "/* Set to parse script from string */"
        }
      ],
      "comment": "/** Used with ecs_script_init */"
    },
    "EcsIdentifier": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "value",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "comment": "/**\u003C Identifier string */"
        },
        {
          "name": "length",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Length of identifier */"
        },
        {
          "name": "hash",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C Hash of current value */"
        },
        {
          "name": "index_hash",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C Hash of existing record in current index */"
        },
        {
          "name": "index",
          "type": {
            "name": "ecs_hashmap_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_hashmap_t",
              "kind": "typeAlias",
              "sizeOf": 120,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_hashmap_t",
                "kind": "struct",
                "sizeOf": 120,
                "alignOf": 8
              }
            }
          },
          "offset_of": 32,
          "comment": "/**\u003C Current index */"
        }
      ],
      "comment": "/** A (string) identifier. Used as pair with EcsName and EcsSymbol tags */"
    },
    "ecs_http_request_t": {
      "size_of": 1072,
      "align_of": 8,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "method",
          "type": {
            "name": "ecs_http_method_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_http_method_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "path",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 16
        },
        {
          "name": "body",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 24
        },
        {
          "name": "headers",
          "type": {
            "name": "ecs_http_key_value_t[32]",
            "kind": "array",
            "sizeOf": 512,
            "alignOf": 8,
            "sizeOfElement": 16,
            "arraySize": 32,
            "innerType": {
              "name": "ecs_http_key_value_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_http_key_value_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          },
          "offset_of": 32
        },
        {
          "name": "params",
          "type": {
            "name": "ecs_http_key_value_t[32]",
            "kind": "array",
            "sizeOf": 512,
            "alignOf": 8,
            "sizeOfElement": 16,
            "arraySize": 32,
            "innerType": {
              "name": "ecs_http_key_value_t",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_http_key_value_t",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          },
          "offset_of": 544
        },
        {
          "name": "header_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 1056
        },
        {
          "name": "param_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 1060
        },
        {
          "name": "conn",
          "type": {
            "name": "ecs_http_connection_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_connection_t",
              "kind": "typeAlias",
              "sizeOf": 160,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_http_connection_t",
                "kind": "struct",
                "sizeOf": 160,
                "alignOf": 8
              }
            }
          },
          "offset_of": 1064
        }
      ],
      "comment": "/** A request */"
    },
    "EcsUnit": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "symbol",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          }
        },
        {
          "name": "prefix",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Order of magnitude prefix relative to derived */"
        },
        {
          "name": "base",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C Base unit (e.g. \u0022meters\u0022) */"
        },
        {
          "name": "over",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C Over unit (e.g. \u0022per second\u0022) */"
        },
        {
          "name": "translation",
          "type": {
            "name": "ecs_unit_translation_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_unit_translation_t",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          },
          "offset_of": 32,
          "comment": "/**\u003C Translation for derived unit */"
        }
      ]
    },
    "ecs_query_stats_t": {
      "size_of": 3624,
      "align_of": 8,
      "fields": [
        {
          "name": "first_",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "matched_table_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Matched non-empty tables */"
        },
        {
          "name": "matched_empty_table_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1208,
          "comment": "/**\u003C Matched empty tables */"
        },
        {
          "name": "matched_entity_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2408,
          "comment": "/**\u003C Number of matched entities */"
        },
        {
          "name": "last_",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 3608
        },
        {
          "name": "t",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 3616,
          "comment": "/** Current position in ringbuffer */"
        }
      ],
      "comment": "/** Statistics for a single query (use ecs_query_stats_get) */"
    },
    "ecs_type_info_t": {
      "size_of": 144,
      "align_of": 8,
      "fields": [
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "comment": "/**\u003C Size of type */"
        },
        {
          "name": "alignment",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 4,
          "comment": "/**\u003C Alignment of type */"
        },
        {
          "name": "hooks",
          "type": {
            "name": "ecs_type_hooks_t",
            "kind": "typeAlias",
            "sizeOf": 120,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_hooks_t",
              "kind": "struct",
              "sizeOf": 120,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Type hooks */"
        },
        {
          "name": "component",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 128,
          "comment": "/**\u003C Handle to component (do not set) */"
        },
        {
          "name": "name",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 136,
          "comment": "/**\u003C Type name. */"
        }
      ],
      "comment": "/** Type that contains component information (passed to ctors/dtors/...) \n * \n * \\ingroup components\n */"
    },
    "EcsTimer": {
      "size_of": 20,
      "align_of": 4,
      "fields": [
        {
          "name": "timeout",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "comment": "/**\u003C Timer timeout period */"
        },
        {
          "name": "time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 4,
          "comment": "/**\u003C Incrementing time value */"
        },
        {
          "name": "overshoot",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 8,
          "comment": "/**\u003C Used to correct returned interval time */"
        },
        {
          "name": "fired_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12,
          "comment": "/**\u003C Number of times ticked */"
        },
        {
          "name": "active",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 16,
          "comment": "/**\u003C Is the timer active or not */"
        },
        {
          "name": "single_shot",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 17,
          "comment": "/**\u003C Is this a single shot timer */"
        }
      ],
      "comment": "/** Component used for one shot/interval timer functionality */"
    },
    "EcsWorldStats": {
      "size_of": 96032,
      "align_of": 8,
      "fields": [
        {
          "name": "hdr",
          "type": {
            "name": "EcsStatsHeader",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 4,
            "innerType": {
              "name": "EcsStatsHeader",
              "kind": "struct",
              "sizeOf": 8,
              "alignOf": 4
            }
          }
        },
        {
          "name": "stats",
          "type": {
            "name": "ecs_world_stats_t",
            "kind": "typeAlias",
            "sizeOf": 96024,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_stats_t",
              "kind": "struct",
              "sizeOf": 96024,
              "alignOf": 8
            }
          },
          "offset_of": 8
        }
      ]
    },
    "ecs_metric_desc_t": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/* Entity associated with metric */"
        },
        {
          "name": "member",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8,
          "comment": "/* Entity associated with member that stores metric value. Must not be set\n     * at the same time as id. Cannot be combined with EcsCounterId. */"
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "offset_of": 16,
          "comment": "/* Tracks whether entities have the specified component id. Must not be set\n     * at the same time as member. */"
        },
        {
          "name": "targets",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 24,
          "comment": "/* If id is a (R, *) wildcard and relationship R has the OneOf property, the\n     * setting this value to true will track individual targets. \n     * If the kind is EcsCountId and the id is a (R, *) wildcard, this value\n     * will create a metric per target. */"
        },
        {
          "name": "kind",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 32,
          "comment": "/* Must be EcsGauge, EcsCounter, EcsCounterIncrement or EcsCounterId */"
        },
        {
          "name": "brief",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 40,
          "comment": "/* Description of metric. Will only be set if FLECS_DOC addon is enabled */"
        }
      ]
    },
    "ecs_array_desc_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C Existing entity to use for type (optional) */"
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16
        }
      ],
      "comment": "/** Used with ecs_array_init. */"
    },
    "ecs_vector_desc_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C Existing entity to use for type (optional) */"
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/** Used with ecs_vector_init. */"
    },
    "ecs_vars_t": {
      "size_of": 168,
      "align_of": 8,
      "fields": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "root",
          "type": {
            "name": "ecs_expr_var_scope_t",
            "kind": "typeAlias",
            "sizeOf": 152,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_expr_var_scope_t",
              "kind": "struct",
              "sizeOf": 152,
              "alignOf": 8
            }
          },
          "offset_of": 8
        },
        {
          "name": "cur",
          "type": {
            "name": "ecs_expr_var_scope_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_expr_var_scope_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_expr_var_scope_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          },
          "offset_of": 160
        }
      ]
    },
    "ecs_map_params_t": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "allocator",
          "type": {
            "name": "ecs_allocator_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_allocator_t",
              "kind": "struct",
              "sizeOf": 128,
              "alignOf": 8
            }
          }
        },
        {
          "name": "entry_allocator",
          "type": {
            "name": "ecs_block_allocator_t",
            "kind": "struct",
            "sizeOf": 48,
            "alignOf": 8
          },
          "offset_of": 8
        }
      ]
    },
    "ecs_stack_cursor_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "cur",
          "type": {
            "name": "ecs_stack_page_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_stack_page_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "sp",
          "type": {
            "name": "int16_t",
            "kind": "typeAlias",
            "sizeOf": 2,
            "alignOf": 2,
            "innerType": {
              "name": "short",
              "kind": "primitive",
              "sizeOf": 2,
              "alignOf": 2
            }
          },
          "offset_of": 8
        }
      ]
    },
    "ecs_snapshot_iter_t": {
      "size_of": 120,
      "align_of": 8,
      "fields": [
        {
          "name": "filter",
          "type": {
            "name": "ecs_filter_t",
            "kind": "typeAlias",
            "sizeOf": 88,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_filter_t",
              "kind": "struct",
              "sizeOf": 88,
              "alignOf": 8
            }
          }
        },
        {
          "name": "tables",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 88,
          "comment": "/* ecs_table_leaf_t */"
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 112
        }
      ],
      "comment": "/** Snapshot-iterator specific data */"
    },
    "ecs_query_iter_t": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "query",
          "type": {
            "name": "ecs_query_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "node",
          "type": {
            "name": "ecs_query_table_node_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_table_node_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 8
        },
        {
          "name": "prev",
          "type": {
            "name": "ecs_query_table_node_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_table_node_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 16
        },
        {
          "name": "last",
          "type": {
            "name": "ecs_query_table_node_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_table_node_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 24
        },
        {
          "name": "sparse_smallest",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 32
        },
        {
          "name": "sparse_first",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 36
        },
        {
          "name": "bitset_first",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 40
        },
        {
          "name": "skip_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 44
        }
      ],
      "comment": "/** Query-iterator specific data */"
    },
    "EcsMetaType": {
      "size_of": 16,
      "align_of": 4,
      "fields": [
        {
          "name": "kind",
          "type": {
            "name": "ecs_type_kind_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_type_kind_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "existing",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 4,
          "comment": "/**\u003C Did the type exist or is it populated from reflection */"
        },
        {
          "name": "partial",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 5,
          "comment": "/**\u003C Is the reflection data a partial type description */"
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Computed size */"
        },
        {
          "name": "alignment",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 12,
          "comment": "/**\u003C Computed alignment */"
        }
      ],
      "comment": "/** Component that is automatically added to every type with the right kind. */"
    },
    "ecs_strbuf_t": {
      "size_of": 1104,
      "align_of": 8,
      "fields": [
        {
          "name": "buf",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "comment": "/* When set by an application, append will write to this buffer */"
        },
        {
          "name": "max",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8,
          "comment": "/* The maximum number of characters that may be printed */"
        },
        {
          "name": "size",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12,
          "comment": "/* Size of elements minus current element */"
        },
        {
          "name": "elementCount",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 16,
          "comment": "/* The number of elements in use */"
        },
        {
          "name": "firstElement",
          "type": {
            "name": "ecs_strbuf_element_embedded",
            "kind": "typeAlias",
            "sizeOf": 536,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_element_embedded",
              "kind": "struct",
              "sizeOf": 536,
              "alignOf": 8
            }
          },
          "offset_of": 24,
          "comment": "/* Always allocate at least one element */"
        },
        {
          "name": "current",
          "type": {
            "name": "ecs_strbuf_element*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_element",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_element",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 560,
          "comment": "/* The current element being appended to */"
        },
        {
          "name": "list_stack",
          "type": {
            "name": "ecs_strbuf_list_elem[32]",
            "kind": "array",
            "sizeOf": 512,
            "alignOf": 8,
            "sizeOfElement": 16,
            "arraySize": 32,
            "innerType": {
              "name": "ecs_strbuf_list_elem",
              "kind": "typeAlias",
              "sizeOf": 16,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_strbuf_list_elem",
                "kind": "struct",
                "sizeOf": 16,
                "alignOf": 8
              }
            }
          },
          "offset_of": 568,
          "comment": "/* Stack that keeps track of number of list elements, used for conditionally\n     * inserting a separator */"
        },
        {
          "name": "list_sp",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 1080
        },
        {
          "name": "content",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 1088,
          "comment": "/* This is set to the output string after calling ecs_strbuf_get */"
        },
        {
          "name": "length",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 1096,
          "comment": "/* This is set to the output string length after calling ecs_strbuf_get */"
        }
      ]
    },
    "ecs_world_stats_t": {
      "size_of": 96024,
      "align_of": 8,
      "fields": [
        {
          "name": "first_",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "entities",
          "type": {
            "name": "ecs_world_stats_t_ANONYMOUS_FIELD1",
            "kind": "struct",
            "sizeOf": 2400,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 8
        },
        {
          "name": "ids",
          "type": {
            "name": "ecs_world_stats_t_ANONYMOUS_FIELD2",
            "kind": "struct",
            "sizeOf": 9600,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 2408
        },
        {
          "name": "tables",
          "type": {
            "name": "ecs_world_stats_t_ANONYMOUS_FIELD3",
            "kind": "struct",
            "sizeOf": 9600,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 12008
        },
        {
          "name": "queries",
          "type": {
            "name": "ecs_world_stats_t_ANONYMOUS_FIELD4",
            "kind": "struct",
            "sizeOf": 3600,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 21608
        },
        {
          "name": "commands",
          "type": {
            "name": "ecs_world_stats_t_ANONYMOUS_FIELD5",
            "kind": "struct",
            "sizeOf": 13200,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 25208
        },
        {
          "name": "frame",
          "type": {
            "name": "ecs_world_stats_t_ANONYMOUS_FIELD6",
            "kind": "struct",
            "sizeOf": 8400,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 38408
        },
        {
          "name": "performance",
          "type": {
            "name": "ecs_world_stats_t_ANONYMOUS_FIELD7",
            "kind": "struct",
            "sizeOf": 10800,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 46808
        },
        {
          "name": "memory",
          "type": {
            "name": "ecs_world_stats_t_ANONYMOUS_FIELD8",
            "kind": "struct",
            "sizeOf": 12000,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 57608
        },
        {
          "name": "rest",
          "type": {
            "name": "ecs_world_stats_t_ANONYMOUS_FIELD9",
            "kind": "struct",
            "sizeOf": 15600,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 69608
        },
        {
          "name": "http",
          "type": {
            "name": "ecs_world_stats_t_ANONYMOUS_FIELD10",
            "kind": "struct",
            "sizeOf": 10800,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 85208
        },
        {
          "name": "last_",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 96008
        },
        {
          "name": "t",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 96016,
          "comment": "/** Current position in ringbuffer */"
        }
      ]
    },
    "ecs_type_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "array",
          "type": {
            "name": "ecs_id_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/** An array with (component) ids */"
    },
    "ecs_metric_t": {
      "record_kind": "union",
      "size_of": 1200,
      "align_of": 8,
      "fields": [
        {
          "name": "gauge",
          "type": {
            "name": "ecs_gauge_t",
            "kind": "typeAlias",
            "sizeOf": 720,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_gauge_t",
              "kind": "struct",
              "sizeOf": 720,
              "alignOf": 4
            }
          }
        },
        {
          "name": "counter",
          "type": {
            "name": "ecs_counter_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_counter_t",
              "kind": "struct",
              "sizeOf": 1200,
              "alignOf": 8
            }
          }
        }
      ],
      "comment": "/** Make all metrics the same size, so we can iterate over fields */"
    },
    "ecs_bucket_t": {
      "size_of": 8,
      "align_of": 8,
      "fields": [
        {
          "name": "first",
          "type": {
            "name": "ecs_bucket_entry_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_bucket_entry_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_bucket_entry_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "EcsStruct": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "members",
          "type": {
            "name": "ecs_vec_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_vec_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "comment": "/* vector\u003Cecs_member_t\u003E */"
        }
      ]
    },
    "ecs_component_desc_t": {
      "size_of": 160,
      "align_of": 8,
      "fields": [
        {
          "name": "_canary",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8,
          "comment": "/** Existing entity to associate with observer (optional) */"
        },
        {
          "name": "type",
          "type": {
            "name": "ecs_type_info_t",
            "kind": "typeAlias",
            "sizeOf": 144,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "struct",
              "sizeOf": 144,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "/** Parameters for type (size, hooks, ...) */"
        }
      ],
      "comment": "/** Used with ecs_component_init. \n * \n * \\ingroup components\n */"
    },
    "ecs_http_server_desc_t": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "callback",
          "type": {
            "name": "ecs_http_reply_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "_Bool (const ecs_http_request_t *, ecs_http_reply_t *, void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C Function called for each request  */"
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Passed to callback (optional) */"
        },
        {
          "name": "port",
          "type": {
            "name": "uint16_t",
            "kind": "typeAlias",
            "sizeOf": 2,
            "alignOf": 2,
            "innerType": {
              "name": "unsigned short",
              "kind": "primitive",
              "sizeOf": 2,
              "alignOf": 2
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C HTTP port */"
        },
        {
          "name": "ipaddr",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C Interface to listen on (optional) */"
        },
        {
          "name": "send_queue_wait_ms",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 32,
          "comment": "/**\u003C Send queue wait time when empty */"
        }
      ],
      "comment": "/** Used with ecs_http_server_init. */"
    },
    "ecs_event_record_t": {
      "size_of": 72,
      "align_of": 8,
      "fields": [
        {
          "name": "any",
          "type": {
            "name": "ecs_event_id_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_event_id_record_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "wildcard",
          "type": {
            "name": "ecs_event_id_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_event_id_record_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 8
        },
        {
          "name": "wildcard_pair",
          "type": {
            "name": "ecs_event_id_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_event_id_record_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 16
        },
        {
          "name": "event_ids",
          "type": {
            "name": "ecs_map_t",
            "kind": "typeAlias",
            "sizeOf": 40,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_map_t",
              "kind": "struct",
              "sizeOf": 40,
              "alignOf": 8
            }
          },
          "offset_of": 24,
          "comment": "/* map\u003Cid, ecs_event_id_record_t\u003E */"
        },
        {
          "name": "event",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 64
        }
      ],
      "comment": "/** Mixin for emitting events to triggers/observers */\n/** All observers for a specific event */"
    },
    "ecs_primitive_desc_t": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C Existing entity to use for type (optional) */"
        },
        {
          "name": "kind",
          "type": {
            "name": "ecs_primitive_kind_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "ecs_primitive_kind_t",
              "kind": "enum",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/** Used with ecs_primitive_init. */"
    },
    "ecs_system_desc_t": {
      "size_of": 2664,
      "align_of": 8,
      "fields": [
        {
          "name": "_canary",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8,
          "comment": "/** Existing entity to associate with system (optional) */"
        },
        {
          "name": "query",
          "type": {
            "name": "ecs_query_desc_t",
            "kind": "typeAlias",
            "sizeOf": 2576,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_desc_t",
              "kind": "struct",
              "sizeOf": 2576,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "/** System query parameters */"
        },
        {
          "name": "run",
          "type": {
            "name": "ecs_run_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2592,
          "comment": "/** Callback that is invoked when a system is ran. \n     * When left to NULL, the default system runner is used, which calls the \n     * \u0022callback\u0022 action for each result returned from the system\u0027s query. \n     * \n     * It should not be assumed that the input iterator can always be iterated\n     * with ecs_query_next. When a system is multithreaded and/or paged, the\n     * iterator can be either a worker or paged iterator. Future use cases may\n     * introduce additional inputs for a system, such as rules and filters. The\n     * correct function to use for iteration is ecs_iter_next.\n     * \n     * An implementation can test whether the iterator is a query iterator by\n     * testing whether the it-\u003Enext value is equal to ecs_query_next. */"
        },
        {
          "name": "callback",
          "type": {
            "name": "ecs_iter_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2600,
          "comment": "/** Callback that is ran for each result returned by the system\u0027s query. This\n     * means that this callback can be invoked multiple times per system per\n     * frame, typically once for each matching table. */"
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 2608,
          "comment": "/** Context to be passed to callback (as ecs_iter_t::param) */"
        },
        {
          "name": "binding_ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 2616,
          "comment": "/** Binding context, for when system is implemented in other language */"
        },
        {
          "name": "ctx_free",
          "type": {
            "name": "ecs_ctx_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2624,
          "comment": "/** Functions that are invoked during system cleanup to free context data.\n     * When set, functions are called unconditionally, even when the ctx\n     * pointers are NULL. */"
        },
        {
          "name": "binding_ctx_free",
          "type": {
            "name": "ecs_ctx_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 2632
        },
        {
          "name": "interval",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 2640,
          "comment": "/** Interval in seconds at which the system should run */"
        },
        {
          "name": "rate",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 2644,
          "comment": "/** Rate at which the system should run */"
        },
        {
          "name": "tick_source",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 2648,
          "comment": "/** External tick soutce that determines when system ticks */"
        },
        {
          "name": "multi_threaded",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 2656,
          "comment": "/** If true, system will be ran on multiple threads */"
        },
        {
          "name": "no_readonly",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 2657,
          "comment": "/** If true, system will have access to actuall world. Cannot be true at the\n     * same time as multi_threaded. */"
        }
      ],
      "comment": "/** Use with ecs_system_init */"
    },
    "ecs_iter_t": {
      "size_of": 608,
      "align_of": 8,
      "fields": [
        {
          "name": "world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          },
          "comment": "/* The world */"
        },
        {
          "name": "real_world",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 8,
          "comment": "/* Actual world. This differs from world when in readonly mode */"
        },
        {
          "name": "entities",
          "type": {
            "name": "ecs_entity_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_entity_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_id_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "uint64_t",
                  "kind": "typeAlias",
                  "sizeOf": 8,
                  "alignOf": 8,
                  "innerType": {
                    "name": "unsigned long long",
                    "kind": "primitive",
                    "sizeOf": 8,
                    "alignOf": 8
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "comment": "/* Entity identifiers */"
        },
        {
          "name": "ptrs",
          "type": {
            "name": "void**",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "void",
                "kind": "primitive"
              }
            }
          },
          "offset_of": 24,
          "comment": "/* Pointers to components. Array if from this, pointer if not. */"
        },
        {
          "name": "sizes",
          "type": {
            "name": "ecs_size_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_size_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int32_t",
                "kind": "typeAlias",
                "sizeOf": 4,
                "alignOf": 4,
                "innerType": {
                  "name": "int",
                  "kind": "primitive",
                  "sizeOf": 4,
                  "alignOf": 4
                }
              }
            }
          },
          "offset_of": 32,
          "comment": "/* Component sizes */"
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 40,
          "comment": "/* Current table */"
        },
        {
          "name": "other_table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 48,
          "comment": "/* Prev or next table when adding/removing */"
        },
        {
          "name": "ids",
          "type": {
            "name": "ecs_id_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 56,
          "comment": "/* (Component) ids */"
        },
        {
          "name": "variables",
          "type": {
            "name": "ecs_var_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_var_t",
              "kind": "typeAlias",
              "sizeOf": 24,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_var_t",
                "kind": "struct",
                "sizeOf": 24,
                "alignOf": 8
              }
            }
          },
          "offset_of": 64,
          "comment": "/* Values of variables (if any) */"
        },
        {
          "name": "columns",
          "type": {
            "name": "int32_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 72,
          "comment": "/* Query term to table column mapping */"
        },
        {
          "name": "sources",
          "type": {
            "name": "ecs_entity_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_entity_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_id_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "uint64_t",
                  "kind": "typeAlias",
                  "sizeOf": 8,
                  "alignOf": 8,
                  "innerType": {
                    "name": "unsigned long long",
                    "kind": "primitive",
                    "sizeOf": 8,
                    "alignOf": 8
                  }
                }
              }
            }
          },
          "offset_of": 80,
          "comment": "/* Entity on which the id was matched (0 if same as entities) */"
        },
        {
          "name": "match_indices",
          "type": {
            "name": "int32_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 88,
          "comment": "/* Indices of current match for term. Allows an iterator to iterate\n                                   * all permutations of wildcards in query. */"
        },
        {
          "name": "references",
          "type": {
            "name": "ecs_ref_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_ref_t",
              "kind": "typeAlias",
              "sizeOf": 32,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_ref_t",
                "kind": "struct",
                "sizeOf": 32,
                "alignOf": 8
              }
            }
          },
          "offset_of": 96,
          "comment": "/* Cached refs to components (if iterating a cache) */"
        },
        {
          "name": "constrained_vars",
          "type": {
            "name": "ecs_flags64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "offset_of": 104,
          "comment": "/* Bitset that marks constrained variables */"
        },
        {
          "name": "group_id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 112,
          "comment": "/* Group id for table, if group_by is used */"
        },
        {
          "name": "field_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 120,
          "comment": "/* Number of fields in iterator */"
        },
        {
          "name": "system",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 128,
          "comment": "/* The system (if applicable) */"
        },
        {
          "name": "event",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 136,
          "comment": "/* The event (if applicable) */"
        },
        {
          "name": "event_id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "offset_of": 144,
          "comment": "/* The (component) id for the event */"
        },
        {
          "name": "terms",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          },
          "offset_of": 152,
          "comment": "/* Terms of query being evaluated */"
        },
        {
          "name": "table_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 160,
          "comment": "/* Active table count for query */"
        },
        {
          "name": "term_index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 164,
          "comment": "/* Index of term that emitted an event.\n                                   * This field will be set to the \u0027index\u0027 field\n                                   * of an observer term. */"
        },
        {
          "name": "variable_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 168,
          "comment": "/* Number of variables for query */"
        },
        {
          "name": "variable_names",
          "type": {
            "name": "char**",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char*",
              "kind": "pointer",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "char",
                "kind": "primitive",
                "sizeOf": 1,
                "alignOf": 1
              }
            }
          },
          "offset_of": 176,
          "comment": "/* Names of variables (if any) */"
        },
        {
          "name": "param",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 184,
          "comment": "/* Param passed to ecs_run */"
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 192,
          "comment": "/* System context */"
        },
        {
          "name": "binding_ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 200,
          "comment": "/* Binding context */"
        },
        {
          "name": "delta_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 208,
          "comment": "/* Time elapsed since last frame */"
        },
        {
          "name": "delta_system_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 212,
          "comment": "/* Time elapsed since last system invocation */"
        },
        {
          "name": "frame_offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 216,
          "comment": "/* Offset relative to start of iteration */"
        },
        {
          "name": "offset",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 220,
          "comment": "/* Offset relative to current table */"
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 224,
          "comment": "/* Number of entities to iterate */"
        },
        {
          "name": "instance_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 228,
          "comment": "/* Number of entities to iterate before next table */"
        },
        {
          "name": "flags",
          "type": {
            "name": "ecs_flags32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "unsigned int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 232,
          "comment": "/* Iterator flags */"
        },
        {
          "name": "interrupted_by",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 240,
          "comment": "/* When set, system execution is interrupted */"
        },
        {
          "name": "priv",
          "type": {
            "name": "ecs_iter_private_t",
            "kind": "typeAlias",
            "sizeOf": 328,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_private_t",
              "kind": "struct",
              "sizeOf": 328,
              "alignOf": 8
            }
          },
          "offset_of": 248,
          "comment": "/* Private data */"
        },
        {
          "name": "next",
          "type": {
            "name": "ecs_iter_next_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "_Bool (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 576,
          "comment": "/* Function to progress iterator */"
        },
        {
          "name": "callback",
          "type": {
            "name": "ecs_iter_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 584,
          "comment": "/* Callback of system or observer */"
        },
        {
          "name": "fini",
          "type": {
            "name": "ecs_iter_fini_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 592,
          "comment": "/* Function to cleanup iterator resources */"
        },
        {
          "name": "chain_it",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          },
          "offset_of": 600,
          "comment": "/* Optional, allows for creating iterator chains */"
        }
      ],
      "comment": "/** Iterator */"
    },
    "ecs_world_info_t": {
      "size_of": 296,
      "align_of": 8,
      "fields": [
        {
          "name": "last_component_id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C Last issued component entity id */"
        },
        {
          "name": "min_id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C First allowed entity id */"
        },
        {
          "name": "max_id",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C Last allowed entity id */"
        },
        {
          "name": "delta_time_raw",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 24,
          "comment": "/**\u003C Raw delta time (no time scaling) */"
        },
        {
          "name": "delta_time",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 28,
          "comment": "/**\u003C Time passed to or computed by ecs_progress */"
        },
        {
          "name": "time_scale",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 32,
          "comment": "/**\u003C Time scale applied to delta_time */"
        },
        {
          "name": "target_fps",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 36,
          "comment": "/**\u003C Target fps */"
        },
        {
          "name": "frame_time_total",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 40,
          "comment": "/**\u003C Total time spent processing a frame */"
        },
        {
          "name": "system_time_total",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 44,
          "comment": "/**\u003C Total time spent in systems */"
        },
        {
          "name": "emit_time_total",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 48,
          "comment": "/**\u003C Total time spent notifying observers */"
        },
        {
          "name": "merge_time_total",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 52,
          "comment": "/**\u003C Total time spent in merges */"
        },
        {
          "name": "world_time_total",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 56,
          "comment": "/**\u003C Time elapsed in simulation */"
        },
        {
          "name": "world_time_total_raw",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 60,
          "comment": "/**\u003C Time elapsed in simulation (no scaling) */"
        },
        {
          "name": "rematch_time_total",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 64,
          "comment": "/**\u003C Time spent on query rematching */"
        },
        {
          "name": "frame_count_total",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 72,
          "comment": "/**\u003C Total number of frames */"
        },
        {
          "name": "merge_count_total",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 80,
          "comment": "/**\u003C Total number of merges */"
        },
        {
          "name": "rematch_count_total",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 88,
          "comment": "/**\u003C Total number of rematches */"
        },
        {
          "name": "id_create_total",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 96,
          "comment": "/**\u003C Total number of times a new id was created */"
        },
        {
          "name": "id_delete_total",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 104,
          "comment": "/**\u003C Total number of times an id was deleted */"
        },
        {
          "name": "table_create_total",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 112,
          "comment": "/**\u003C Total number of times a table was created */"
        },
        {
          "name": "table_delete_total",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 120,
          "comment": "/**\u003C Total number of times a table was deleted */"
        },
        {
          "name": "pipeline_build_count_total",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 128,
          "comment": "/**\u003C Total number of pipeline builds */"
        },
        {
          "name": "systems_ran_frame",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 136,
          "comment": "/**\u003C Total number of systems ran in last frame */"
        },
        {
          "name": "observers_ran_frame",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 144,
          "comment": "/**\u003C Total number of times observer was invoked */"
        },
        {
          "name": "id_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 152,
          "comment": "/**\u003C Number of ids in the world (excluding wildcards) */"
        },
        {
          "name": "tag_id_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 156,
          "comment": "/**\u003C Number of tag (no data) ids in the world */"
        },
        {
          "name": "component_id_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 160,
          "comment": "/**\u003C Number of component (data) ids in the world */"
        },
        {
          "name": "pair_id_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 164,
          "comment": "/**\u003C Number of pair ids in the world */"
        },
        {
          "name": "wildcard_id_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 168,
          "comment": "/**\u003C Number of wildcard ids */"
        },
        {
          "name": "table_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 172,
          "comment": "/**\u003C Number of tables */"
        },
        {
          "name": "tag_table_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 176,
          "comment": "/**\u003C Number of tag-only tables */"
        },
        {
          "name": "trivial_table_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 180,
          "comment": "/**\u003C Number of tables with trivial components (no lifecycle callbacks) */"
        },
        {
          "name": "empty_table_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 184,
          "comment": "/**\u003C Number of tables without entities */"
        },
        {
          "name": "table_record_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 188,
          "comment": "/**\u003C Total number of table records (entries in table caches) */"
        },
        {
          "name": "table_storage_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 192,
          "comment": "/**\u003C Total number of table storages */"
        },
        {
          "name": "cmd",
          "type": {
            "name": "ecs_world_info_t_ANONYMOUS_FIELD35",
            "kind": "struct",
            "sizeOf": 88,
            "alignOf": 8,
            "isAnonymous": true
          },
          "offset_of": 200
        },
        {
          "name": "name_prefix",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          },
          "offset_of": 288,
          "comment": "/**\u003C Value set by ecs_set_name_prefix. Used\n                                       * to remove library prefixes of symbol\n                                       * names (such as Ecs, ecs_) when \n                                       * registering them as names. */"
        }
      ],
      "comment": "/** Type that contains information about the world. */"
    },
    "ecs_http_connection_t": {
      "size_of": 160,
      "align_of": 8,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "server",
          "type": {
            "name": "ecs_http_server_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_server_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 8
        },
        {
          "name": "host",
          "type": {
            "name": "char[128]",
            "kind": "array",
            "sizeOf": 128,
            "alignOf": 8,
            "sizeOfElement": 1,
            "arraySize": 128,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 16
        },
        {
          "name": "port",
          "type": {
            "name": "char[16]",
            "kind": "array",
            "sizeOf": 16,
            "alignOf": 8,
            "sizeOfElement": 1,
            "arraySize": 16,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 144
        }
      ],
      "comment": "/** A connection manages communication with the remote host */"
    },
    "ecs_term_iter_t": {
      "size_of": 272,
      "align_of": 8,
      "fields": [
        {
          "name": "term",
          "type": {
            "name": "ecs_term_t",
            "kind": "typeAlias",
            "sizeOf": 152,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "struct",
              "sizeOf": 152,
              "alignOf": 8
            }
          }
        },
        {
          "name": "self_index",
          "type": {
            "name": "ecs_id_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_record_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 152
        },
        {
          "name": "set_index",
          "type": {
            "name": "ecs_id_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_record_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 160
        },
        {
          "name": "cur",
          "type": {
            "name": "ecs_id_record_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_record_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 168
        },
        {
          "name": "it",
          "type": {
            "name": "ecs_table_cache_iter_t",
            "kind": "typeAlias",
            "sizeOf": 24,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_cache_iter_t",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 176
        },
        {
          "name": "index",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 200
        },
        {
          "name": "observed_table_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 204
        },
        {
          "name": "table",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          },
          "offset_of": 208
        },
        {
          "name": "cur_match",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 216
        },
        {
          "name": "match_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 220
        },
        {
          "name": "last_column",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 224
        },
        {
          "name": "empty_tables",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 228
        },
        {
          "name": "id",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          },
          "offset_of": 232,
          "comment": "/* Storage */"
        },
        {
          "name": "column",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 240
        },
        {
          "name": "subject",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "offset_of": 248
        },
        {
          "name": "size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 256
        },
        {
          "name": "ptr",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 264
        }
      ],
      "comment": "/** Term-iterator specific data */"
    },
    "ecs_strbuf_element": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "buffer_embedded",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        },
        {
          "name": "pos",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 4
        },
        {
          "name": "buf",
          "type": {
            "name": "char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1
            }
          },
          "offset_of": 8
        },
        {
          "name": "next",
          "type": {
            "name": "ecs_strbuf_element*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_strbuf_element",
              "kind": "struct",
              "sizeOf": 24,
              "alignOf": 8
            }
          },
          "offset_of": 16
        }
      ]
    },
    "EcsRateFilter": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "src",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/**\u003C Source of the rate filter */"
        },
        {
          "name": "rate",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C Rate of the rate filter */"
        },
        {
          "name": "tick_count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12,
          "comment": "/**\u003C Number of times the rate filter ticked */"
        },
        {
          "name": "time_elapsed",
          "type": {
            "name": "float",
            "kind": "primitive",
            "sizeOf": 4,
            "alignOf": 4
          },
          "offset_of": 16,
          "comment": "/**\u003C Time elapsed since last tick */"
        }
      ],
      "comment": "/** Apply a rate filter to a tick source */"
    },
    "ecs_world_stats_t_ANONYMOUS_FIELD3": {
      "size_of": 9600,
      "align_of": 8,
      "fields": [
        {
          "name": "count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C Number of tables */"
        },
        {
          "name": "empty_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1200,
          "comment": "/**\u003C Number of empty tables */"
        },
        {
          "name": "tag_only_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2400,
          "comment": "/**\u003C Number of tables with only tags */"
        },
        {
          "name": "trivial_only_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 3600,
          "comment": "/**\u003C Number of tables with only trivial components */"
        },
        {
          "name": "record_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 4800,
          "comment": "/**\u003C Number of table cache records */"
        },
        {
          "name": "storage_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 6000,
          "comment": "/**\u003C Number of table storages */"
        },
        {
          "name": "create_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 7200,
          "comment": "/**\u003C Number of times table has been created */"
        },
        {
          "name": "delete_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 8400,
          "comment": "/**\u003C Number of times table has been deleted */"
        }
      ],
      "comment": "/* Tables */"
    },
    "ecs_flatten_desc_t": {
      "size_of": 2,
      "align_of": 1,
      "fields": [
        {
          "name": "keep_names",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "comment": "/* When true, the flatten operation will not remove names from entities in\n     * the flattened tree. This may fail if entities from different subtrees\n     * have the same name. */"
        },
        {
          "name": "lose_depth",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 1,
          "comment": "/* When true, the flattened tree won\u0027t contain information about the \n     * original depth of the entities. This can reduce fragmentation, but may\n     * cause existing code, such as cascade queries, to no longer work. */"
        }
      ]
    },
    "ecs_pipeline_desc_t": {
      "size_of": 2584,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          },
          "comment": "/* Existing entity to associate with pipeline (optional) */"
        },
        {
          "name": "query",
          "type": {
            "name": "ecs_query_desc_t",
            "kind": "typeAlias",
            "sizeOf": 2576,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_query_desc_t",
              "kind": "struct",
              "sizeOf": 2576,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/* Query descriptor. The first term of the query must match the EcsSystem\n     * component. */"
        }
      ],
      "comment": "/* Pipeline descriptor (used with ecs_pipeline_init) */"
    },
    "ecs_world_stats_t_ANONYMOUS_FIELD6": {
      "size_of": 8400,
      "align_of": 8,
      "fields": [
        {
          "name": "frame_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C Number of frames processed. */"
        },
        {
          "name": "merge_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 1200,
          "comment": "/**\u003C Number of merges executed. */"
        },
        {
          "name": "rematch_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 2400,
          "comment": "/**\u003C Number of query rematches */"
        },
        {
          "name": "pipeline_build_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 3600,
          "comment": "/**\u003C Number of system pipeline rebuilds (occurs when an inactive system becomes active). */"
        },
        {
          "name": "systems_ran",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 4800,
          "comment": "/**\u003C Number of systems ran. */"
        },
        {
          "name": "observers_ran",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 6000,
          "comment": "/**\u003C Number of times an observer was invoked. */"
        },
        {
          "name": "event_emit_count",
          "type": {
            "name": "ecs_metric_t",
            "kind": "typeAlias",
            "sizeOf": 1200,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_metric_t",
              "kind": "union",
              "sizeOf": 1200,
              "alignOf": 8
            }
          },
          "offset_of": 7200,
          "comment": "/**\u003C Number of events emitted */"
        }
      ],
      "comment": "/* Frame data */"
    },
    "ecs_iter_to_json_desc_t": {
      "size_of": 16,
      "align_of": 1,
      "fields": [
        {
          "name": "serialize_term_ids",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "comment": "/**\u003C Serialize term (query) component ids */"
        },
        {
          "name": "serialize_ids",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 1,
          "comment": "/**\u003C Serialize actual (matched) component ids */"
        },
        {
          "name": "serialize_sources",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 2,
          "comment": "/**\u003C Serialize sources */"
        },
        {
          "name": "serialize_variables",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 3,
          "comment": "/**\u003C Serialize variables */"
        },
        {
          "name": "serialize_is_set",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 4,
          "comment": "/**\u003C Serialize is_set (for optional terms) */"
        },
        {
          "name": "serialize_values",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 5,
          "comment": "/**\u003C Serialize component values */"
        },
        {
          "name": "serialize_entities",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 6,
          "comment": "/**\u003C Serialize entities (for This terms) */"
        },
        {
          "name": "serialize_entity_labels",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 7,
          "comment": "/**\u003C Serialize doc name for entities */"
        },
        {
          "name": "serialize_entity_ids",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 8,
          "comment": "/**\u003C Serialize numerical ids for entities */"
        },
        {
          "name": "serialize_entity_names",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 9,
          "comment": "/**\u003C Serialize names (not paths) for entities */"
        },
        {
          "name": "serialize_variable_labels",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 10,
          "comment": "/**\u003C Serialize doc name for variables */"
        },
        {
          "name": "serialize_variable_ids",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 11,
          "comment": "/**\u003C Serialize numerical ids for variables */"
        },
        {
          "name": "serialize_colors",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 12,
          "comment": "/**\u003C Serialize doc color for entities */"
        },
        {
          "name": "measure_eval_duration",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 13,
          "comment": "/**\u003C Serialize evaluation duration */"
        },
        {
          "name": "serialize_type_info",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 14,
          "comment": "/**\u003C Serialize type information */"
        },
        {
          "name": "serialize_table",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          },
          "offset_of": 15,
          "comment": "/**\u003C Serialize entire table vs. matched components */"
        }
      ],
      "comment": "/** Used with ecs_iter_to_json. */"
    },
    "ecs_vec_t": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "array",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 8
        },
        {
          "name": "size",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          },
          "offset_of": 12
        },
        {
          "name": "elem_size",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          },
          "offset_of": 16
        }
      ],
      "comment": "/** A component column. */"
    },
    "ecs_opaque_desc_t": {
      "size_of": 128,
      "align_of": 8,
      "fields": [
        {
          "name": "entity",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "type",
          "type": {
            "name": "EcsOpaque",
            "kind": "typeAlias",
            "sizeOf": 120,
            "alignOf": 8,
            "innerType": {
              "name": "EcsOpaque",
              "kind": "struct",
              "sizeOf": 120,
              "alignOf": 8
            }
          },
          "offset_of": 8
        }
      ],
      "comment": "/** Used with ecs_opaque_init. */"
    },
    "ecs_type_hooks_t": {
      "size_of": 120,
      "align_of": 8,
      "fields": [
        {
          "name": "ctor",
          "type": {
            "name": "ecs_xtor_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *, int32_t, const ecs_type_info_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C ctor */"
        },
        {
          "name": "dtor",
          "type": {
            "name": "ecs_xtor_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *, int32_t, const ecs_type_info_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 8,
          "comment": "/**\u003C dtor */"
        },
        {
          "name": "copy",
          "type": {
            "name": "ecs_copy_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *, const void *, int32_t, const ecs_type_info_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 16,
          "comment": "/**\u003C copy assignment */"
        },
        {
          "name": "move",
          "type": {
            "name": "ecs_move_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *, void *, int32_t, const ecs_type_info_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 24,
          "comment": "/**\u003C move assignment */"
        },
        {
          "name": "copy_ctor",
          "type": {
            "name": "ecs_copy_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *, const void *, int32_t, const ecs_type_info_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 32,
          "comment": "/** Ctor \u002B copy */"
        },
        {
          "name": "move_ctor",
          "type": {
            "name": "ecs_move_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *, void *, int32_t, const ecs_type_info_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 40,
          "comment": "/** Ctor \u002B move */"
        },
        {
          "name": "ctor_move_dtor",
          "type": {
            "name": "ecs_move_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *, void *, int32_t, const ecs_type_info_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 48,
          "comment": "/** Ctor \u002B move \u002B dtor (or move_ctor \u002B dtor).\n     * This combination is typically used when a component is moved from one\n     * location to a new location, like when it is moved to a new table. If\n     * not set explicitly it will be derived from other callbacks. */"
        },
        {
          "name": "move_dtor",
          "type": {
            "name": "ecs_move_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *, void *, int32_t, const ecs_type_info_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 56,
          "comment": "/** Move \u002B dtor.\n     * This combination is typically used when a component is moved from one\n     * location to an existing location, like what happens during a remove. If\n     * not set explicitly it will be derived from other callbacks. */"
        },
        {
          "name": "on_add",
          "type": {
            "name": "ecs_iter_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 64,
          "comment": "/** Callback that is invoked when an instance of a component is added. This\n     * callback is invoked before triggers are invoked. */"
        },
        {
          "name": "on_set",
          "type": {
            "name": "ecs_iter_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 72,
          "comment": "/** Callback that is invoked when an instance of the component is set. This\n     * callback is invoked before triggers are invoked, and enable the component\n     * to respond to changes on itself before others can. */"
        },
        {
          "name": "on_remove",
          "type": {
            "name": "ecs_iter_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (ecs_iter_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 80,
          "comment": "/** Callback that is invoked when an instance of the component is removed. \n     * This callback is invoked after the triggers are invoked, and before the\n     * destructor is invoked. */"
        },
        {
          "name": "ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 88,
          "comment": "/**\u003C User defined context */"
        },
        {
          "name": "binding_ctx",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          },
          "offset_of": 96,
          "comment": "/**\u003C Language binding context */"
        },
        {
          "name": "ctx_free",
          "type": {
            "name": "ecs_ctx_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 104,
          "comment": "/**\u003C Callback to free ctx */"
        },
        {
          "name": "binding_ctx_free",
          "type": {
            "name": "ecs_ctx_free_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "offset_of": 112,
          "comment": "/**\u003C Callback to free binding_ctx */"
        }
      ],
      "comment": "/** Type that contains component lifecycle callbacks. \n * \n * \\ingroup components\n */"
    },
    "ecs_iterable_t": {
      "size_of": 8,
      "align_of": 8,
      "fields": [
        {
          "name": "init",
          "type": {
            "name": "ecs_iter_init_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void (const ecs_world_t *, const ecs_poly_t *, ecs_iter_t *, ecs_term_t *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          },
          "comment": "/**\u003C Callback that creates iterator. */"
        }
      ],
      "comment": "/** Iterable mixin.\n * Allows its container to be iterated. */"
    }
  },
  "enums": {
    "ecs_primitive_kind_t": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "EcsBool",
          "value": 1
        },
        {
          "name": "EcsChar",
          "value": 2
        },
        {
          "name": "EcsByte",
          "value": 3
        },
        {
          "name": "EcsU8",
          "value": 4
        },
        {
          "name": "EcsU16",
          "value": 5
        },
        {
          "name": "EcsU32",
          "value": 6
        },
        {
          "name": "EcsU64",
          "value": 7
        },
        {
          "name": "EcsI8",
          "value": 8
        },
        {
          "name": "EcsI16",
          "value": 9
        },
        {
          "name": "EcsI32",
          "value": 10
        },
        {
          "name": "EcsI64",
          "value": 11
        },
        {
          "name": "EcsF32",
          "value": 12
        },
        {
          "name": "EcsF64",
          "value": 13
        },
        {
          "name": "EcsUPtr",
          "value": 14
        },
        {
          "name": "EcsIPtr",
          "value": 15
        },
        {
          "name": "EcsString",
          "value": 16
        },
        {
          "name": "EcsEntity",
          "value": 17
        },
        {
          "name": "EcsPrimitiveKindLast",
          "value": 17
        }
      ]
    },
    "ecs_type_kind_t": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "EcsPrimitiveType"
        },
        {
          "name": "EcsBitmaskType",
          "value": 1
        },
        {
          "name": "EcsEnumType",
          "value": 2
        },
        {
          "name": "EcsStructType",
          "value": 3
        },
        {
          "name": "EcsArrayType",
          "value": 4
        },
        {
          "name": "EcsVectorType",
          "value": 5
        },
        {
          "name": "EcsOpaqueType",
          "value": 6
        },
        {
          "name": "EcsTypeKindLast",
          "value": 6
        }
      ],
      "comment": "/** Type kinds supported by reflection type system */"
    },
    "ecs_http_method_t": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "EcsHttpGet"
        },
        {
          "name": "EcsHttpPost",
          "value": 1
        },
        {
          "name": "EcsHttpPut",
          "value": 2
        },
        {
          "name": "EcsHttpDelete",
          "value": 3
        },
        {
          "name": "EcsHttpOptions",
          "value": 4
        },
        {
          "name": "EcsHttpMethodUnsupported",
          "value": 5
        }
      ],
      "comment": "/** Supported request methods */"
    },
    "ecs_oper_kind_t": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "EcsAnd"
        },
        {
          "name": "EcsOr",
          "value": 1
        },
        {
          "name": "EcsNot",
          "value": 2
        },
        {
          "name": "EcsOptional",
          "value": 3
        },
        {
          "name": "EcsAndFrom",
          "value": 4
        },
        {
          "name": "EcsOrFrom",
          "value": 5
        },
        {
          "name": "EcsNotFrom",
          "value": 6
        }
      ],
      "comment": "/** Specify operator for term */"
    },
    "ecs_inout_kind_t": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "EcsInOutDefault"
        },
        {
          "name": "EcsInOutNone",
          "value": 1
        },
        {
          "name": "EcsInOut",
          "value": 2
        },
        {
          "name": "EcsIn",
          "value": 3
        },
        {
          "name": "EcsOut",
          "value": 4
        }
      ],
      "comment": "/** Specify read/write access for term */"
    },
    "ecs_iter_kind_t": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "EcsIterEvalCondition"
        },
        {
          "name": "EcsIterEvalTables",
          "value": 1
        },
        {
          "name": "EcsIterEvalChain",
          "value": 2
        },
        {
          "name": "EcsIterEvalNone",
          "value": 3
        }
      ]
    },
    "ecs_meta_type_op_kind_t": {
      "typeInteger": {
        "name": "unsigned int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "values": [
        {
          "name": "EcsOpArray"
        },
        {
          "name": "EcsOpVector",
          "value": 1
        },
        {
          "name": "EcsOpOpaque",
          "value": 2
        },
        {
          "name": "EcsOpPush",
          "value": 3
        },
        {
          "name": "EcsOpPop",
          "value": 4
        },
        {
          "name": "EcsOpScope",
          "value": 5
        },
        {
          "name": "EcsOpEnum",
          "value": 6
        },
        {
          "name": "EcsOpBitmask",
          "value": 7
        },
        {
          "name": "EcsOpPrimitive",
          "value": 8
        },
        {
          "name": "EcsOpBool",
          "value": 9
        },
        {
          "name": "EcsOpChar",
          "value": 10
        },
        {
          "name": "EcsOpByte",
          "value": 11
        },
        {
          "name": "EcsOpU8",
          "value": 12
        },
        {
          "name": "EcsOpU16",
          "value": 13
        },
        {
          "name": "EcsOpU32",
          "value": 14
        },
        {
          "name": "EcsOpU64",
          "value": 15
        },
        {
          "name": "EcsOpI8",
          "value": 16
        },
        {
          "name": "EcsOpI16",
          "value": 17
        },
        {
          "name": "EcsOpI32",
          "value": 18
        },
        {
          "name": "EcsOpI64",
          "value": 19
        },
        {
          "name": "EcsOpF32",
          "value": 20
        },
        {
          "name": "EcsOpF64",
          "value": 21
        },
        {
          "name": "EcsOpUPtr",
          "value": 22
        },
        {
          "name": "EcsOpIPtr",
          "value": 23
        },
        {
          "name": "EcsOpString",
          "value": 24
        },
        {
          "name": "EcsOpEntity",
          "value": 25
        },
        {
          "name": "EcsMetaTypeOpKindLast",
          "value": 25
        }
      ],
      "comment": "/* Serializer utilities */"
    }
  },
  "typeAliases": {
    "ecs_os_thread_callback_t": {
      "underlyingType": {
        "name": "void *(void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Threads */"
    },
    "ecs_os_api_get_time_t": {
      "underlyingType": {
        "name": "void (ecs_time_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_flags64_t": {
      "underlyingType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      }
    },
    "ecs_os_dl_t": {
      "underlyingType": {
        "name": "uintptr_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      }
    },
    "ecs_move_t": {
      "underlyingType": {
        "name": "void (void *, void *, int32_t, const ecs_type_info_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Move is invoked when a component is moved to another component. */"
    },
    "ecs_os_api_lainc_t": {
      "underlyingType": {
        "name": "int64_t (int64_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_init_t": {
      "underlyingType": {
        "name": "void (void)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* OS API init */"
    },
    "ecs_os_api_free_t": {
      "underlyingType": {
        "name": "void (void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_flags32_t": {
      "underlyingType": {
        "name": "uint32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "unsigned int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      }
    },
    "ecs_http_reply_action_t": {
      "underlyingType": {
        "name": "_Bool (const ecs_http_request_t *, ecs_http_reply_t *, void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Request callback.\n * Invoked for each valid request. The function should populate the reply and\n * return true. When the function returns false, the server will reply with a \n * 404 (Not found) code. */"
    },
    "ecs_os_thread_t": {
      "underlyingType": {
        "name": "uintptr_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "comment": "/* Use handle types that _at least_ can store pointers */"
    },
    "ecs_app_run_action_t": {
      "underlyingType": {
        "name": "int (ecs_world_t *, ecs_app_desc_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Callback type for run action. */"
    },
    "ecs_size_t": {
      "underlyingType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "comment": "/* Keep unsigned integers out of the codebase as they do more harm than good */"
    },
    "ecs_compare_action_t": {
      "underlyingType": {
        "name": "int (const void *, const void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Callback used for sorting values */"
    },
    "ecs_poly_dtor_t": {
      "underlyingType": {
        "name": "void (ecs_poly_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Destructor function for poly objects */"
    },
    "ecs_copy_t": {
      "underlyingType": {
        "name": "void (void *, const void *, int32_t, const ecs_type_info_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Copy is invoked when a component is copied into another component. */"
    },
    "ecs_meta_serialize_t": {
      "underlyingType": {
        "name": "int (const ecs_serializer_t *, const void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Callback invoked serializing an opaque type. */"
    },
    "ecs_group_by_action_t": {
      "underlyingType": {
        "name": "uint64_t (ecs_world_t *, ecs_table_t *, ecs_id_t, void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Callback used for grouping tables in a query */"
    },
    "ecs_os_api_mutex_lock_t": {
      "underlyingType": {
        "name": "void (ecs_os_mutex_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_log_t": {
      "underlyingType": {
        "name": "void (int32_t, const char *, int32_t, const char *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Logging */"
    },
    "ecs_os_api_fini_t": {
      "underlyingType": {
        "name": "void (void)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* OS API deinit */"
    },
    "ecs_os_thread_id_t": {
      "underlyingType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "comment": "/* 64 bit thread id */"
    },
    "ecs_os_api_realloc_t": {
      "underlyingType": {
        "name": "void *(void *, ecs_size_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_proc_t": {
      "underlyingType": {
        "name": "void (void)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Generic function pointer type */"
    },
    "ecs_flags8_t": {
      "underlyingType": {
        "name": "uint8_t",
        "kind": "typeAlias",
        "sizeOf": 1,
        "alignOf": 1,
        "innerType": {
          "name": "unsigned char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "comment": "/* Utility types to indicate usage as bitmask */"
    },
    "ecs_os_api_now_t": {
      "underlyingType": {
        "name": "uint64_t (void)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_iter_init_action_t": {
      "underlyingType": {
        "name": "void (const ecs_world_t *, const ecs_poly_t *, ecs_iter_t *, ecs_term_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Function prototype for creating an iterator from a poly.\n * Used to create iterators from poly objects with the iterable mixin. When a\n * filter is provided, an array of two iterators must be passed to the function.\n * This allows the mixin implementation to create a chained iterator when\n * necessary, which requires two iterator objects.\n * \n * @param world The world or stage for which to create the iterator.\n * @param iterable An iterable poly object.\n * @param it The iterator to create (out parameter)\n * @param filter Optional term to filter results.\n */"
    },
    "ecs_iter_action_t": {
      "underlyingType": {
        "name": "void (ecs_iter_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Function prototype for iterables.\n * A system may invoke a callback multiple times, typically once for each\n * matched table.\n * \n * @param it The iterator containing the data for the current match.\n */"
    },
    "ecs_os_api_thread_join_t": {
      "underlyingType": {
        "name": "void *(ecs_os_thread_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_malloc_t": {
      "underlyingType": {
        "name": "void *(ecs_size_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Memory management */"
    },
    "ecs_map_key_t": {
      "underlyingType": {
        "name": "ecs_map_data_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      }
    },
    "ecs_run_action_t": {
      "underlyingType": {
        "name": "void (ecs_iter_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Function prototype for runnables (systems, observers).\n * The run callback overrides the default behavior for iterating through the\n * results of a runnable object.\n * \n * The default runnable iterates the iterator, and calls an iter_action (see\n * below) for each returned result.\n * \n * @param it The iterator to be iterated by the runnable.\n */"
    },
    "ecs_map_data_t": {
      "underlyingType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      }
    },
    "ecs_xtor_t": {
      "underlyingType": {
        "name": "void (void *, int32_t, const ecs_type_info_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Constructor/destructor callback */"
    },
    "ecs_iter_fini_action_t": {
      "underlyingType": {
        "name": "void (ecs_iter_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Function prototype for freeing an iterator.\n * Free iterator resources.\n * \n * @param it The iterator to free.\n */"
    },
    "ecs_os_api_cond_signal_t": {
      "underlyingType": {
        "name": "void (ecs_os_cond_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_thread_new_t": {
      "underlyingType": {
        "name": "ecs_os_thread_t (ecs_os_thread_callback_t, void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_dlclose_t": {
      "underlyingType": {
        "name": "void (ecs_os_dl_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_dlproc_t": {
      "underlyingType": {
        "name": "ecs_os_proc_t (ecs_os_dl_t, const char *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_cond_broadcast_t": {
      "underlyingType": {
        "name": "void (ecs_os_cond_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_ctx_free_t": {
      "underlyingType": {
        "name": "void (void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Function to cleanup context data */"
    },
    "ecs_flags16_t": {
      "underlyingType": {
        "name": "uint16_t",
        "kind": "typeAlias",
        "sizeOf": 2,
        "alignOf": 2,
        "innerType": {
          "name": "unsigned short",
          "kind": "primitive",
          "sizeOf": 2,
          "alignOf": 2
        }
      }
    },
    "ecs_os_api_module_to_path_t": {
      "underlyingType": {
        "name": "char *(const char *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_entity_t": {
      "underlyingType": {
        "name": "ecs_id_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "comment": "/** An entity identifier. */"
    },
    "ecs_order_by_action_t": {
      "underlyingType": {
        "name": "int (ecs_entity_t, const void *, ecs_entity_t, const void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Callback used for comparing components */"
    },
    "ecs_id_t": {
      "underlyingType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "comment": "/** An id. Ids are the things that can be added to an entity. An id can be an\n * entity or pair, and can have optional id flags. */"
    },
    "ecs_os_api_thread_self_t": {
      "underlyingType": {
        "name": "ecs_os_thread_id_t (void)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_strdup_t": {
      "underlyingType": {
        "name": "char *(const char *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_mutex_new_t": {
      "underlyingType": {
        "name": "ecs_os_mutex_t (void)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Mutex */"
    },
    "ecs_sort_table_action_t": {
      "underlyingType": {
        "name": "void (ecs_world_t *, ecs_table_t *, ecs_entity_t *, void *, int32_t, int32_t, int32_t, ecs_order_by_action_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Callback used for sorting the entire table of components */"
    },
    "ecs_iter_next_action_t": {
      "underlyingType": {
        "name": "_Bool (ecs_iter_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Function prototype for iterating an iterator.\n * Stored inside initialized iterators. This allows an application to * iterate \n * an iterator without needing to know what created it.\n * \n * @param it The iterator to iterate.\n * @return True if iterator has no more results, false if it does.\n */"
    },
    "ecs_os_mutex_t": {
      "underlyingType": {
        "name": "uintptr_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      }
    },
    "ecs_os_api_cond_wait_t": {
      "underlyingType": {
        "name": "void (ecs_os_cond_t, ecs_os_mutex_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_ainc_t": {
      "underlyingType": {
        "name": "int32_t (int32_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Atomic increment / decrement */"
    },
    "ecs_group_create_action_t": {
      "underlyingType": {
        "name": "void *(ecs_world_t *, uint64_t, void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Callback invoked when a query creates a new group. */"
    },
    "ecs_os_api_abort_t": {
      "underlyingType": {
        "name": "void (void)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Application termination */"
    },
    "ecs_group_delete_action_t": {
      "underlyingType": {
        "name": "void (ecs_world_t *, uint64_t, void *, void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Callback invoked when a query deletes an existing group. */"
    },
    "ecs_fini_action_t": {
      "underlyingType": {
        "name": "void (ecs_world_t *, void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Action callback on world exit */"
    },
    "ecs_app_init_action_t": {
      "underlyingType": {
        "name": "int (ecs_world_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Callback type for init action. */"
    },
    "ecs_os_api_calloc_t": {
      "underlyingType": {
        "name": "void *(ecs_size_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_cond_new_t": {
      "underlyingType": {
        "name": "ecs_os_cond_t (void)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Condition variable */"
    },
    "ecs_map_val_t": {
      "underlyingType": {
        "name": "ecs_map_data_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      }
    },
    "ecs_os_api_cond_free_t": {
      "underlyingType": {
        "name": "void (ecs_os_cond_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_api_dlopen_t": {
      "underlyingType": {
        "name": "ecs_os_dl_t (const char *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/* Dynamic libraries */"
    },
    "ecs_hash_value_action_t": {
      "underlyingType": {
        "name": "uint64_t (const void *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Callback used for hashing values */"
    },
    "ecs_module_action_t": {
      "underlyingType": {
        "name": "void (ecs_world_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Initialization action for modules */"
    },
    "ecs_os_api_mutex_free_t": {
      "underlyingType": {
        "name": "void (ecs_os_mutex_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_app_frame_action_t": {
      "underlyingType": {
        "name": "int (ecs_world_t *, const ecs_app_desc_t *)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      },
      "comment": "/** Callback type for frame action. */"
    },
    "ecs_os_api_sleep_t": {
      "underlyingType": {
        "name": "void (int32_t, int32_t)",
        "kind": "functionPointer",
        "sizeOf": 8,
        "alignOf": 8
      }
    },
    "ecs_os_cond_t": {
      "underlyingType": {
        "name": "uintptr_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      }
    }
  },
  "opaqueTypes": {
    "ecs_table_t": {
      "comment": "/** A table is where entities and components are stored */"
    },
    "ecs_rule_op_t": {},
    "ecs_rule_var_t": {},
    "ecs_event_id_record_t": {},
    "ecs_poly_t": {
      "comment": "/** A poly object.\n * A poly (short for polymorph) object is an object that has a variable list of\n * capabilities, determined by a mixin table. This is the current list of types\n * in the flecs API that can be used as an ecs_poly_t:\n * \n * - ecs_world_t\n * - ecs_stage_t\n * - ecs_query_t\n * - ecs_filter_t\n * - ecs_rule_t\n * - (more to come)\n * \n * Functions that accept an ecs_poly_t argument can accept objects of these\n * types. If the object does not have the requested mixin the API will throw an\n * assert.\n * \n * The poly/mixin framework enables partially overlapping features to be\n * implemented once, and enables objects of different types to interact with\n * each other depending on what mixins they have, rather than their type\n * (in some ways it\u0027s like a mini-ECS). Additionally, each poly object has a\n * header that enables the API to do sanity checking on the input arguments.\n */"
    },
    "ecs_snapshot_t": {
      "comment": "/** A snapshot stores the state of a world in a particular point in time. */"
    },
    "ecs_world_t": {
      "comment": "/** A world is the container for all ECS data and supporting features. */"
    },
    "ecs_mixins_t": {
      "comment": "/** Type that stores poly mixins */"
    },
    "ecs_stack_page_t": {
      "comment": "/* Cursor to stack allocator (used internally) */"
    },
    "ecs_table_record_t": {},
    "ecs_http_server_t": {
      "comment": "/** HTTP server */"
    },
    "ecs_query_t": {
      "comment": "/** A query allows for cached iteration over ECS data */"
    },
    "ecs_id_record_t": {
      "comment": "/* Internal index that stores tables tables for a (component) id */"
    },
    "ecs_query_table_node_t": {
      "comment": "/* Cached query table data */"
    },
    "ecs_table_cache_hdr_t": {},
    "ecs_rule_op_ctx_t": {},
    "ecs_rule_t": {
      "comment": "/** A rule implements a non-trivial filter */"
    }
  },
  "functionPointers": {
    "ecs_os_thread_id_t (void)": {
      "type": {
        "name": "ecs_os_thread_id_t (void)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "ecs_os_thread_id_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": []
    },
    "void (ecs_world_t *, ecs_table_t *, ecs_entity_t *, void *, int32_t, int32_t, int32_t, ecs_order_by_action_t)": {
      "type": {
        "name": "void (ecs_world_t *, ecs_table_t *, ecs_entity_t *, void *, int32_t, int32_t, int32_t, ecs_order_by_action_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_entity_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_entity_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_id_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "uint64_t",
                  "kind": "typeAlias",
                  "sizeOf": 8,
                  "alignOf": 8,
                  "innerType": {
                    "name": "unsigned long long",
                    "kind": "primitive",
                    "sizeOf": 8,
                    "alignOf": 8
                  }
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_order_by_action_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int (ecs_entity_t, const void *, ecs_entity_t, const void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "void *(ecs_size_t)": {
      "type": {
        "name": "void *(ecs_size_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "_Bool (const ecs_http_request_t *, ecs_http_reply_t *, void *)": {
      "type": {
        "name": "_Bool (const ecs_http_request_t *, ecs_http_reply_t *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_http_request_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_request_t",
              "kind": "typeAlias",
              "sizeOf": 1072,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_http_request_t",
                "kind": "struct",
                "sizeOf": 1072,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_http_reply_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_http_reply_t",
              "kind": "typeAlias",
              "sizeOf": 2232,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_http_reply_t",
                "kind": "struct",
                "sizeOf": 2232,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (void *, int64_t)": {
      "type": {
        "name": "void (void *, int64_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "uint64_t (void)": {
      "type": {
        "name": "uint64_t (void)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": []
    },
    "int (ecs_world_t *, ecs_app_desc_t *)": {
      "type": {
        "name": "int (ecs_world_t *, ecs_app_desc_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_app_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_app_desc_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_app_desc_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (ecs_os_dl_t)": {
      "type": {
        "name": "void (ecs_os_dl_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_os_dl_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uintptr_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "int (const void *, const void *)": {
      "type": {
        "name": "int (const void *, const void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ]
    },
    "void (void *, const void *, int32_t, const ecs_type_info_t *)": {
      "type": {
        "name": "void (void *, const void *, int32_t, const ecs_type_info_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_type_info_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "typeAlias",
              "sizeOf": 144,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_info_t",
                "kind": "struct",
                "sizeOf": 144,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (ecs_time_t *)": {
      "type": {
        "name": "void (ecs_time_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_time_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_time_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 4,
              "innerType": {
                "name": "ecs_time_t",
                "kind": "struct",
                "sizeOf": 8,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "void *(ecs_os_thread_t)": {
      "type": {
        "name": "void *(ecs_os_thread_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_os_thread_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uintptr_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "ecs_os_dl_t (const char *)": {
      "type": {
        "name": "ecs_os_dl_t (const char *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "ecs_os_dl_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uintptr_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "void (const ecs_world_t *, const ecs_poly_t *, ecs_iter_t *, ecs_term_t *)": {
      "type": {
        "name": "void (const ecs_world_t *, const ecs_poly_t *, ecs_iter_t *, ecs_term_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_poly_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_poly_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_term_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_term_t",
              "kind": "typeAlias",
              "sizeOf": 152,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_term_t",
                "kind": "struct",
                "sizeOf": 152,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (void *, void *, int32_t, const ecs_type_info_t *)": {
      "type": {
        "name": "void (void *, void *, int32_t, const ecs_type_info_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_type_info_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "typeAlias",
              "sizeOf": 144,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_info_t",
                "kind": "struct",
                "sizeOf": 144,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void *(void *)": {
      "type": {
        "name": "void *(void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (void *, size_t)": {
      "type": {
        "name": "void (void *, size_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ]
    },
    "void (void *, int32_t, const ecs_type_info_t *)": {
      "type": {
        "name": "void (void *, int32_t, const ecs_type_info_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_type_info_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_type_info_t",
              "kind": "typeAlias",
              "sizeOf": 144,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_type_info_t",
                "kind": "struct",
                "sizeOf": 144,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (void *, ecs_world_t *, ecs_entity_t)": {
      "type": {
        "name": "void (void *, ecs_world_t *, ecs_entity_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        }
      ]
    },
    "void (ecs_os_cond_t)": {
      "type": {
        "name": "void (ecs_os_cond_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_os_cond_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uintptr_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (ecs_world_t *, uint64_t, void *, void *)": {
      "type": {
        "name": "void (ecs_world_t *, uint64_t, void *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "ecs_os_proc_t (ecs_os_dl_t, const char *)": {
      "type": {
        "name": "ecs_os_proc_t (ecs_os_dl_t, const char *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "ecs_os_proc_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void (void)",
          "kind": "functionPointer",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_os_dl_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uintptr_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "int (ecs_world_t *)": {
      "type": {
        "name": "int (ecs_world_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ]
    },
    "int (const ecs_serializer_t *, ecs_entity_t, const void *)": {
      "type": {
        "name": "int (const ecs_serializer_t *, ecs_entity_t, const void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_serializer_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_serializer_t",
              "kind": "struct",
              "sizeOf": 32,
              "alignOf": 8,
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ]
    },
    "int32_t (int32_t *)": {
      "type": {
        "name": "int32_t (int32_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "sizeOf": 4,
        "alignOf": 4,
        "innerType": {
          "name": "int",
          "kind": "primitive",
          "sizeOf": 4,
          "alignOf": 4
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "int32_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "void (void *, const char *)": {
      "type": {
        "name": "void (void *, const char *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "ecs_os_thread_t (ecs_os_thread_callback_t, void *)": {
      "type": {
        "name": "ecs_os_thread_t (ecs_os_thread_callback_t, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "ecs_os_thread_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uintptr_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_os_thread_callback_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void *(void *)",
              "kind": "functionPointer",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "int (const ecs_serializer_t *, const char *)": {
      "type": {
        "name": "int (const ecs_serializer_t *, const char *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_serializer_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_serializer_t",
              "kind": "struct",
              "sizeOf": 32,
              "alignOf": 8,
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "int (ecs_world_t *, const ecs_app_desc_t *)": {
      "type": {
        "name": "int (ecs_world_t *, const ecs_app_desc_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_app_desc_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_app_desc_t",
              "kind": "typeAlias",
              "sizeOf": 40,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_app_desc_t",
                "kind": "struct",
                "sizeOf": 40,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (void *, char)": {
      "type": {
        "name": "void (void *, char)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "char",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ]
    },
    "void *(void *, ecs_size_t)": {
      "type": {
        "name": "void *(void *, ecs_size_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_size_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int32_t",
              "kind": "typeAlias",
              "sizeOf": 4,
              "alignOf": 4,
              "innerType": {
                "name": "int",
                "kind": "primitive",
                "sizeOf": 4,
                "alignOf": 4
              }
            }
          }
        }
      ]
    },
    "int (ecs_entity_t, const void *, ecs_entity_t, const void *)": {
      "type": {
        "name": "int (ecs_entity_t, const void *, ecs_entity_t, const void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_entity_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_id_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "sizeOf": 8,
                "alignOf": 8,
                "innerType": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "sizeOf": 8,
                  "alignOf": 8
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ]
    },
    "int (const ecs_serializer_t *, const void *)": {
      "type": {
        "name": "int (const ecs_serializer_t *, const void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "int",
        "kind": "primitive",
        "sizeOf": 4,
        "alignOf": 4
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_serializer_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_serializer_t",
              "kind": "typeAlias",
              "sizeOf": 32,
              "alignOf": 8,
              "isConst": true,
              "innerType": {
                "name": "ecs_serializer_t",
                "kind": "struct",
                "sizeOf": 32,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ]
    },
    "_Bool (ecs_iter_t *)": {
      "type": {
        "name": "_Bool (ecs_iter_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "_Bool",
        "kind": "primitive",
        "sizeOf": 1,
        "alignOf": 1
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (void *, double)": {
      "type": {
        "name": "void (void *, double)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "double",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ]
    },
    "void *(void *, size_t)": {
      "type": {
        "name": "void *(void *, size_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      ]
    },
    "ecs_entity_t (const ecs_world_t *, const char *, void *)": {
      "type": {
        "name": "ecs_entity_t (const ecs_world_t *, const char *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "ecs_entity_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "ecs_id_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType",
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (ecs_poly_t *)": {
      "type": {
        "name": "void (ecs_poly_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_poly_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_poly_t",
              "kind": "opaqueType"
            }
          }
        }
      ]
    },
    "void (void)": {
      "type": {
        "name": "void (void)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": []
    },
    "uint64_t (ecs_world_t *, ecs_table_t *, ecs_id_t, void *)": {
      "type": {
        "name": "uint64_t (ecs_world_t *, ecs_table_t *, ecs_id_t, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_table_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_table_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_id_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "size_t (const void *)": {
      "type": {
        "name": "size_t (const void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "size_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ]
    },
    "void (int32_t, int32_t)": {
      "type": {
        "name": "void (int32_t, int32_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        }
      ]
    },
    "ecs_os_mutex_t (void)": {
      "type": {
        "name": "ecs_os_mutex_t (void)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "ecs_os_mutex_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uintptr_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": []
    },
    "uint64_t (const void *)": {
      "type": {
        "name": "uint64_t (const void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "unsigned long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "const void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const void",
              "kind": "primitive",
              "isConst": true
            }
          }
        }
      ]
    },
    "void *(ecs_world_t *, uint64_t, void *)": {
      "type": {
        "name": "void *(ecs_world_t *, uint64_t, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "ecs_os_cond_t (void)": {
      "type": {
        "name": "ecs_os_cond_t (void)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "ecs_os_cond_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "uintptr_t",
          "kind": "typeAlias",
          "sizeOf": 8,
          "alignOf": 8,
          "innerType": {
            "name": "unsigned long",
            "kind": "primitive",
            "sizeOf": 8,
            "alignOf": 8
          }
        }
      },
      "parameters": []
    },
    "void (void *)": {
      "type": {
        "name": "void (void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "int64_t (int64_t *)": {
      "type": {
        "name": "int64_t (int64_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "int64_t",
        "kind": "typeAlias",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "long long",
          "kind": "primitive",
          "sizeOf": 8,
          "alignOf": 8
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "int64_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "int64_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "long long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (int32_t, const char *, int32_t, const char *)": {
      "type": {
        "name": "void (int32_t, const char *, int32_t, const char *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "sizeOf": 4,
            "alignOf": 4,
            "innerType": {
              "name": "int",
              "kind": "primitive",
              "sizeOf": 4,
              "alignOf": 4
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "void (ecs_world_t *, void *)": {
      "type": {
        "name": "void (ecs_world_t *, void *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        }
      ]
    },
    "void (ecs_os_mutex_t)": {
      "type": {
        "name": "void (ecs_os_mutex_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_os_mutex_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uintptr_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (ecs_os_cond_t, ecs_os_mutex_t)": {
      "type": {
        "name": "void (ecs_os_cond_t, ecs_os_mutex_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_os_cond_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uintptr_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "ecs_os_mutex_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "uintptr_t",
              "kind": "typeAlias",
              "sizeOf": 8,
              "alignOf": 8,
              "innerType": {
                "name": "unsigned long",
                "kind": "primitive",
                "sizeOf": 8,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void *(void *, const char *)": {
      "type": {
        "name": "void *(void *, const char *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "void",
          "kind": "primitive"
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    },
    "void (ecs_iter_t *)": {
      "type": {
        "name": "void (ecs_iter_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_iter_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_iter_t",
              "kind": "typeAlias",
              "sizeOf": 608,
              "alignOf": 8,
              "innerType": {
                "name": "ecs_iter_t",
                "kind": "struct",
                "sizeOf": 608,
                "alignOf": 8
              }
            }
          }
        }
      ]
    },
    "void (void *, uint64_t)": {
      "type": {
        "name": "void (void *, uint64_t)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "unsigned long long",
              "kind": "primitive",
              "sizeOf": 8,
              "alignOf": 8
            }
          }
        }
      ]
    },
    "void (ecs_world_t *)": {
      "type": {
        "name": "void (ecs_world_t *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "ecs_world_t*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "ecs_world_t",
              "kind": "opaqueType"
            }
          }
        }
      ]
    },
    "void (void *, _Bool)": {
      "type": {
        "name": "void (void *, _Bool)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "void",
        "kind": "primitive"
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "void",
              "kind": "primitive"
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "_Bool",
            "kind": "primitive",
            "sizeOf": 1,
            "alignOf": 1
          }
        }
      ]
    },
    "char *(const char *)": {
      "type": {
        "name": "char *(const char *)",
        "kind": "functionPointer",
        "sizeOf": 1,
        "alignOf": 4
      },
      "returnType": {
        "name": "char*",
        "kind": "pointer",
        "sizeOf": 8,
        "alignOf": 8,
        "innerType": {
          "name": "char",
          "kind": "primitive",
          "sizeOf": 1,
          "alignOf": 1
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "const char*",
            "kind": "pointer",
            "sizeOf": 8,
            "alignOf": 8,
            "innerType": {
              "name": "const char",
              "kind": "primitive",
              "sizeOf": 1,
              "alignOf": 1,
              "isConst": true
            }
          }
        }
      ]
    }
  },
  "enumConstants": {}
}