// <auto-generated>
//  This code was generated by the following tool on 2023-05-01 01:18:03 GMT+00:00:
//      https://github.com/bottlenoselabs/c2cs (v5.0.5.0)
//
//  Changes to this file may cause incorrect behavior and will be lost if the code is
//      regenerated. To extend or add functionality use a partial class in a new file.
// </auto-generated>
// ReSharper disable All

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS8981
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static flecs_hub.flecs.Runtime;
[assembly: DefaultDllImportSearchPathsAttribute(DllImportSearchPath.SafeDirectories)]


namespace flecs_hub
{
    public static unsafe partial class flecs
    {
        private const string LibraryName = "flecs";

        #region API

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsCoreDocImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsDocImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsMetaImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsMetricsImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsMonitorImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsPipelineImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsRestImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsScriptImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsSystemImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsTimerImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsUnitsImport(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_abort(int error_code, CString file, int line, CString fmt);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool _ecs_assert(CBool condition, int error_code, CString condition_str, CString file, int line, CString fmt);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_deprecated(CString file, int line, CString msg);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_log(int level, CString file, int line, CString fmt);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_log_pop(int level);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_log_push(int level);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_logv(int level, CString file, int line, CString fmt, void* args);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_map_get_deref(ecs_map_t* map, ecs_map_key_t key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_parser_error(CString name, CString expr, long column, CString fmt);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_parser_errorv(CString name, CString expr, long column, CString fmt, void* args);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool _ecs_poly_is(ecs_poly_t* @object, int type);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_print(int level, CString file, int line, CString fmt);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_printv(int level, CString file, int line, CString fmt, void* args);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern flecs_hashmap_result_t _flecs_hashmap_ensure(ecs_hashmap_t* map, ecs_size_t key_size, void* key, ecs_size_t value_size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_hashmap_get(ecs_hashmap_t* map, ecs_size_t key_size, void* key, ecs_size_t value_size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _flecs_hashmap_init(ecs_hashmap_t* hm, ecs_size_t key_size, ecs_size_t value_size, ecs_hash_value_action_t hash, ecs_compare_action_t compare, ecs_allocator_t* allocator);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_hashmap_next(flecs_hashmap_iter_t* it, ecs_size_t key_size, void* key_out, ecs_size_t value_size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _flecs_hashmap_remove(ecs_hashmap_t* map, ecs_size_t key_size, void* key, ecs_size_t value_size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _flecs_hashmap_remove_w_hash(ecs_hashmap_t* map, ecs_size_t key_size, void* key, ecs_size_t value_size, ulong hash);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _flecs_hashmap_set(ecs_hashmap_t* map, ecs_size_t key_size, void* key, ecs_size_t value_size, void* value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_add_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_add_path_w_sep(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t parent, CString path, CString sep, CString prefix);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_app_run(ecs_world_t* world, ecs_app_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_app_run_frame(ecs_world_t* world, ecs_app_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_app_set_frame_action(ecs_app_frame_action_t callback);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_app_set_run_action(ecs_app_run_action_t callback);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_array_init(ecs_world_t* world, ecs_array_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_array_to_json(ecs_world_t* world, ecs_entity_t type, void* data, int count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_array_to_json_buf(ecs_world_t* world, ecs_entity_t type, void* data, int count, ecs_strbuf_t* buf_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_asprintf(CString fmt);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_astresc(CChar delimiter, CString @in);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_async_stage_free(ecs_world_t* stage);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_async_stage_new(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_atfini(ecs_world_t* world, ecs_fini_action_t action, void* ctx);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_bitmask_init(ecs_world_t* world, ecs_bitmask_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t* ecs_bulk_init(ecs_world_t* world, ecs_bulk_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t* ecs_bulk_new_w_id(ecs_world_t* world, ecs_id_t id, int count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_children(ecs_world_t* world, ecs_entity_t parent);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_children_next(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_chresc(CString @out, CChar @in, CChar delimiter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_chrparse(CString @in, CString @out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_clear(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_clone(ecs_world_t* world, ecs_entity_t dst, ecs_entity_t src, CBool copy_value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_commit(ecs_world_t* world, ecs_entity_t entity, ecs_record_t* @record, ecs_table_t* table, ecs_type_t* added, ecs_type_t* removed);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_component_init(ecs_world_t* world, ecs_component_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_count_id(ecs_world_t* world, ecs_id_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_cpp_component_register(ecs_world_t* world, ecs_entity_t id, CString name, CString symbol, ecs_size_t size, ecs_size_t alignment, CBool implicit_name, CBool* existing_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_cpp_component_register_explicit(ecs_world_t* world, ecs_entity_t s_id, ecs_entity_t id, CString name, CString type_name, CString symbol, ulong size, ulong alignment, CBool is_component, CBool* existing_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_cpp_component_validate(ecs_world_t* world, ecs_entity_t id, CString name, CString symbol, ulong size, ulong alignment, CBool implicit_name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_cpp_enum_constant_register(ecs_world_t* world, ecs_entity_t parent, ecs_entity_t id, CString name, int value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_cpp_enum_init(ecs_world_t* world, ecs_entity_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_cpp_get_constant_name(CString constant_name, CString func_name, ulong len, ulong back_len);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_cpp_get_symbol_name(CString symbol_name, CString type_name, ulong len);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_cpp_get_type_name(CString type_name, CString func_name, ulong len, ulong front_len);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_cpp_reset_count_get();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_cpp_reset_count_inc();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_cpp_trim_module(ecs_world_t* world, CString type_name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_default_ctor(void* ptr, int count, ecs_type_info_t* ctx);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_defer_begin(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_defer_end(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_defer_resume(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_defer_suspend(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_delete(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_delete_empty_tables(ecs_world_t* world, ecs_id_t id, ushort clear_generation, ushort delete_generation, int min_id_count, double time_budget_seconds);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_delete_with(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_dim(ecs_world_t* world, int entity_count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_doc_get_brief(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_doc_get_color(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_doc_get_detail(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_doc_get_link(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_doc_get_name(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_doc_set_brief(ecs_world_t* world, ecs_entity_t entity, CString description);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_doc_set_color(ecs_world_t* world, ecs_entity_t entity, CString color);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_doc_set_detail(ecs_world_t* world, ecs_entity_t entity, CString description);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_doc_set_link(ecs_world_t* world, ecs_entity_t entity, CString link);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_doc_set_name(ecs_world_t* world, ecs_entity_t entity, CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_emit(ecs_world_t* world, ecs_event_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_emplace_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_enable(ecs_world_t* world, ecs_entity_t entity, CBool enabled);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_enable_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool enable);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_enable_range_check(ecs_world_t* world, CBool enable);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_ensure(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_ensure_id(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_entity_from_json(ecs_world_t* world, ecs_entity_t entity, CString json, ecs_from_json_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_entity_init(ecs_world_t* world, ecs_entity_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_entity_str(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_entity_to_json(ecs_world_t* world, ecs_entity_t entity, ecs_entity_to_json_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_entity_to_json_buf(ecs_world_t* world, ecs_entity_t entity, ecs_strbuf_t* buf_out, ecs_entity_to_json_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_enum_init(ecs_world_t* world, ecs_enum_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_exists(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_field_column_index(ecs_iter_t* it, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_id_t ecs_field_id(ecs_iter_t* it, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_field_is_readonly(ecs_iter_t* it, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_field_is_self(ecs_iter_t* it, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_field_is_set(ecs_iter_t* it, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_field_is_writeonly(ecs_iter_t* it, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong ecs_field_size(ecs_iter_t* it, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_field_src(ecs_iter_t* it, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_field_w_size(ecs_iter_t* it, ulong size, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_filter_chain_iter(ecs_iter_t* it, ecs_filter_t* filter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_filter_copy(ecs_filter_t* dst, ecs_filter_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_filter_finalize(ecs_world_t* world, ecs_filter_t* filter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_filter_find_this_var(ecs_filter_t* filter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_filter_fini(ecs_filter_t* filter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_filter_t* ecs_filter_init(ecs_world_t* world, ecs_filter_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_filter_iter(ecs_world_t* world, ecs_filter_t* filter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_filter_move(ecs_filter_t* dst, ecs_filter_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_filter_next(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_filter_next_instanced(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_filter_pivot_term(ecs_world_t* world, ecs_filter_t* filter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_filter_str(ecs_world_t* world, ecs_filter_t* filter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_fini(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_flatten(ecs_world_t* world, ecs_id_t pair, ecs_flatten_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float ecs_frame_begin(ecs_world_t* world, float delta_time);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_frame_end(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_alive(ecs_world_t* world, ecs_entity_t e);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_context(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_get_depth(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t rel);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_entity(ecs_poly_t* poly);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_type_hooks_t* ecs_get_hooks_id(ecs_world_t* world, ecs_entity_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float ecs_get_interval(ecs_world_t* world, ecs_entity_t tick_source);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t* ecs_get_lookup_path(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_mut_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_get_name(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_observer_binding_ctx(ecs_world_t* world, ecs_entity_t observer);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_observer_ctx(ecs_world_t* world, ecs_entity_t observer);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_parent(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_get_path_w_sep(ecs_world_t* world, ecs_entity_t parent, ecs_entity_t child, CString sep, CString prefix);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_get_path_w_sep_buf(ecs_world_t* world, ecs_entity_t parent, ecs_entity_t child, CString sep, CString prefix, ecs_strbuf_t* buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_pipeline(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_scope(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_get_stage(ecs_world_t* world, int stage_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_get_stage_count(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_get_stage_id(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_get_symbol(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_system_binding_ctx(ecs_world_t* world, ecs_entity_t system);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_system_ctx(ecs_world_t* world, ecs_entity_t system);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_get_table(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_target(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t rel, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_target_for_id(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t rel, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float ecs_get_timeout(ecs_world_t* world, ecs_entity_t tick_source);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_type_t* ecs_get_type(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_type_info_t* ecs_get_type_info(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_typeid(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_id_t ecs_get_with(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_get_world(ecs_poly_t* poly);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_info_t* ecs_get_world_info(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_has_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_http_get_header(ecs_http_request_t* req, CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_http_get_param(ecs_http_request_t* req, CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_http_server_ctx(ecs_http_server_t* srv);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_http_server_dequeue(ecs_http_server_t* server, float delta_time);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_http_server_fini(ecs_http_server_t* server);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_http_server_http_request(ecs_http_server_t* srv, CString req, ecs_size_t len, ecs_http_reply_t* reply_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_http_server_t* ecs_http_server_init(ecs_http_server_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_http_server_request(ecs_http_server_t* srv, CString method, CString req, ecs_http_reply_t* reply_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_http_server_start(ecs_http_server_t* server);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_http_server_stop(ecs_http_server_t* server);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_id_flag_str(ecs_id_t id_flags);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_flags32_t ecs_id_get_flags(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_id_in_use(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_id_is_pair(ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_id_is_tag(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_id_is_union(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_id_is_valid(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_id_is_wildcard(ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_id_match(ecs_id_t id, ecs_id_t pattern);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_id_str(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_id_str_buf(ecs_world_t* world, ecs_id_t id, ecs_strbuf_t* buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_identifier_is_0(CString id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_import(ecs_world_t* world, ecs_module_action_t module, CString module_name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_import_c(ecs_world_t* world, ecs_module_action_t module, CString module_name_c);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_import_from_library(ecs_world_t* world, CString library_name, CString module_name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_init();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_init_w_args(int argc, CString* argv);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_is_alive(ecs_world_t* world, ecs_entity_t e);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_is_deferred(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_is_enabled_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_is_fini(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_is_valid(ecs_world_t* world, ecs_entity_t e);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_iter_count(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_iter_fini(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_iter_first(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_iter_get_var(ecs_iter_t* it, int var_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_range_t ecs_iter_get_var_as_range(ecs_iter_t* it, int var_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_iter_get_var_as_table(ecs_iter_t* it, int var_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_iter_is_true(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_iter_next(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_iter_poly(ecs_world_t* world, ecs_poly_t* poly, ecs_iter_t* iter, ecs_term_t* filter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_iter_set_var(ecs_iter_t* it, int var_id, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_iter_set_var_as_range(ecs_iter_t* it, int var_id, ecs_table_range_t* range);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_iter_set_var_as_table(ecs_iter_t* it, int var_id, ecs_table_t* table);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_iter_str(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_iter_to_json(ecs_world_t* world, ecs_iter_t* iter, ecs_iter_to_json_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_iter_to_json_buf(ecs_world_t* world, ecs_iter_t* iter, ecs_strbuf_t* buf_out, ecs_iter_to_json_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_iter_var_is_constrained(ecs_iter_t* it, int var_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_log_enable_colors(CBool enabled);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_log_enable_timedelta(CBool enabled);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_log_enable_timestamp(CBool enabled);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_log_get_level();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_log_last_error();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_log_set_level(int level);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_lookup(ecs_world_t* world, CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_lookup_child(ecs_world_t* world, ecs_entity_t parent, CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_lookup_path_w_sep(ecs_world_t* world, ecs_entity_t parent, CString path, CString sep, CString prefix, CBool recursive);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_lookup_symbol(ecs_world_t* world, CString symbol, CBool lookup_as_path);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_id_t ecs_make_pair(ecs_entity_t first, ecs_entity_t second);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_clear(ecs_map_t* map);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_copy(ecs_map_t* dst, ecs_map_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_map_val_t* ecs_map_ensure(ecs_map_t* map, ecs_map_key_t key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_map_ensure_alloc(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_fini(ecs_map_t* map);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_map_val_t* ecs_map_get(ecs_map_t* map, ecs_map_key_t key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_init(ecs_map_t* map, ecs_allocator_t* allocator);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_init_if(ecs_map_t* map, ecs_allocator_t* allocator);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_init_w_params(ecs_map_t* map, ecs_map_params_t* @params);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_init_w_params_if(ecs_map_t* result, ecs_map_params_t* @params);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_insert(ecs_map_t* map, ecs_map_key_t key, ecs_map_val_t value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_map_insert_alloc(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_map_iter_t ecs_map_iter(ecs_map_t* map);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_map_next(ecs_map_iter_t* iter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_params_fini(ecs_map_params_t* @params);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_params_init(ecs_map_params_t* @params, ecs_allocator_t* allocator);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_map_val_t ecs_map_remove(ecs_map_t* map, ecs_map_key_t key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_remove_free(ecs_map_t* map, ecs_map_key_t key);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_measure_frame_time(ecs_world_t* world, CBool enable);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_measure_system_time(ecs_world_t* world, CBool enable);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_merge(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_meta_cursor_t ecs_meta_cursor(ecs_world_t* world, ecs_entity_t type, void* ptr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_dotmember(ecs_meta_cursor_t* cursor, CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_elem(ecs_meta_cursor_t* cursor, int elem);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_from_desc(ecs_world_t* world, ecs_entity_t component, ecs_type_kind_t kind, CString desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_meta_get_bool(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CChar ecs_meta_get_char(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_meta_get_entity(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double ecs_meta_get_float(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long ecs_meta_get_int(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_meta_get_member(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_meta_get_ptr(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_meta_get_string(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_meta_get_type(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong ecs_meta_get_uint(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_meta_get_unit(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_meta_is_collection(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_member(ecs_meta_cursor_t* cursor, CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_next(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_pop(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double ecs_meta_ptr_to_float(ecs_primitive_kind_t type_kind, void* ptr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_push(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_bool(ecs_meta_cursor_t* cursor, CBool value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_char(ecs_meta_cursor_t* cursor, CChar value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_entity(ecs_meta_cursor_t* cursor, ecs_entity_t value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_float(ecs_meta_cursor_t* cursor, double value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_int(ecs_meta_cursor_t* cursor, long value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_null(ecs_meta_cursor_t* cursor);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_string(ecs_meta_cursor_t* cursor, CString value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_string_literal(ecs_meta_cursor_t* cursor, CString value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_uint(ecs_meta_cursor_t* cursor, ulong value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_value(ecs_meta_cursor_t* cursor, ecs_value_t* value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_metric_copy(ecs_metric_t* m, int dst, int src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_metric_init(ecs_world_t* world, ecs_metric_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_metric_reduce(ecs_metric_t* dst, ecs_metric_t* src, int t_dst, int t_src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_metric_reduce_last(ecs_metric_t* m, int t, int count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_mini();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_modified_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_module_init(ecs_world_t* world, CString c_name, ecs_component_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_module_path_from_c(CString c_name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_new_from_path_w_sep(ecs_world_t* world, ecs_entity_t parent, CString path, CString sep, CString prefix);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_new_id(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_new_low_id(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_new_w_id(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_new_w_table(ecs_world_t* world, ecs_table_t* table);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_observer_default_run_action(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_observer_init(ecs_world_t* world, ecs_observer_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_opaque_init(ecs_world_t* world, ecs_opaque_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_dbg(CString file, int line, CString msg);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_err(CString file, int line, CString msg);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_fatal(CString file, int line, CString msg);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_fini();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_os_api_t ecs_os_get_api();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_dl();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_heap();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_logging();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_modules();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_threading();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_time();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_init();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_os_memdup(void* src, ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_set_api(ecs_os_api_t* os_api);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_set_api_defaults();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_os_strerror(int err);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_strset(CString* str, CString value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_trace(CString file, int line, CString msg);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_warn(CString file, int line, CString msg);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_override_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_page_iter(ecs_iter_t* it, int offset, int limit);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_page_next(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_digit(CString ptr, CString token);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_expr(ecs_world_t* world, CString ptr, ecs_value_t* value, ecs_parse_expr_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_expr_token(CString name, CString expr, CString ptr, CString token);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_identifier(CString name, CString expr, CString ptr, CString token_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_term(ecs_world_t* world, CString name, CString expr, CString ptr, ecs_term_t* term_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_token(CString name, CString expr, CString ptr, CString token_out, CChar delim);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_ws(CString ptr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_ws_eol(CString ptr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_pipeline_init(ecs_world_t* world, ecs_pipeline_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_pipeline_stats_copy_last(ecs_pipeline_stats_t* dst, ecs_pipeline_stats_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_pipeline_stats_fini(ecs_pipeline_stats_t* stats);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_pipeline_stats_get(ecs_world_t* world, ecs_entity_t pipeline, ecs_pipeline_stats_t* stats);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_pipeline_stats_reduce(ecs_pipeline_stats_t* dst, ecs_pipeline_stats_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_pipeline_stats_reduce_last(ecs_pipeline_stats_t* stats, ecs_pipeline_stats_t* old, int count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_pipeline_stats_repeat_last(ecs_pipeline_stats_t* stats);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_plecs_from_file(ecs_world_t* world, CString filename);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_plecs_from_str(ecs_world_t* world, CString name, CString str);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_primitive_init(ecs_world_t* world, ecs_primitive_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_primitive_to_expr_buf(ecs_world_t* world, ecs_primitive_kind_t kind, void* data, ecs_strbuf_t* buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_progress(ecs_world_t* world, float delta_time);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_ptr_from_json(ecs_world_t* world, ecs_entity_t type, void* ptr, CString json, ecs_from_json_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_ptr_to_expr(ecs_world_t* world, ecs_entity_t type, void* data);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_ptr_to_expr_buf(ecs_world_t* world, ecs_entity_t type, void* data, ecs_strbuf_t* buf);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_ptr_to_json(ecs_world_t* world, ecs_entity_t type, void* data);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_ptr_to_json_buf(ecs_world_t* world, ecs_entity_t type, void* data, ecs_strbuf_t* buf_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_quantity_init(ecs_world_t* world, ecs_entity_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_query_changed(ecs_query_t* query, ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_query_empty_table_count(ecs_query_t* query);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_query_entity_count(ecs_query_t* query);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_query_fini(ecs_query_t* query);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_filter_t* ecs_query_get_filter(ecs_query_t* query);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_query_get_group_ctx(ecs_query_t* query, ulong group_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_query_group_info_t* ecs_query_get_group_info(ecs_query_t* query, ulong group_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_query_t* ecs_query_init(ecs_world_t* world, ecs_query_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_query_iter(ecs_world_t* world, ecs_query_t* query);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_query_next(ecs_iter_t* iter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_query_next_instanced(ecs_iter_t* iter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_query_next_table(ecs_iter_t* iter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_query_orphaned(ecs_query_t* query);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_query_populate(ecs_iter_t* iter, CBool when_changed);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_query_set_group(ecs_iter_t* it, ulong group_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_query_skip(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_query_stats_copy_last(ecs_query_stats_t* dst, ecs_query_stats_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_query_stats_get(ecs_world_t* world, ecs_query_t* query, ecs_query_stats_t* stats);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_query_stats_reduce(ecs_query_stats_t* dst, ecs_query_stats_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_query_stats_reduce_last(ecs_query_stats_t* stats, ecs_query_stats_t* old, int count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_query_stats_repeat_last(ecs_query_stats_t* stats);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_query_str(ecs_query_t* query);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_query_table_count(ecs_query_t* query);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_quit(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_record_t* ecs_read_begin(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_read_end(ecs_record_t* @record);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_readonly_begin(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_readonly_end(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_record_t* ecs_record_find(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_record_get_column(ecs_record_t* r, int column, ulong c_size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_record_get_entity(ecs_record_t* @record);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_record_get_id(ecs_world_t* world, ecs_record_t* @record, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_record_get_mut_id(ecs_world_t* world, ecs_record_t* @record, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_record_has_id(ecs_world_t* world, ecs_record_t* @record, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_ref_get_id(ecs_world_t* world, ecs_ref_t* @ref, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_ref_t ecs_ref_init_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_ref_update(ecs_world_t* world, ecs_ref_t* @ref);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_remove_all(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_remove_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_reset_clock(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_rest_server_fini(ecs_http_server_t* srv);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_http_server_t* ecs_rest_server_init(ecs_world_t* world, ecs_http_server_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_rule_find_var(ecs_rule_t* rule, CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_rule_fini(ecs_rule_t* rule);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_filter_t* ecs_rule_get_filter(ecs_rule_t* rule);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_rule_t* ecs_rule_init(ecs_world_t* world, ecs_filter_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_rule_iter(ecs_world_t* world, ecs_rule_t* rule);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_rule_next(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_rule_next_instanced(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_rule_parse_vars(ecs_rule_t* rule, ecs_iter_t* it, CString expr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_rule_str(ecs_rule_t* rule);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_rule_str_w_profile(ecs_rule_t* rule, ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_rule_var_count(ecs_rule_t* rule);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_rule_var_is_entity(ecs_rule_t* rule, int var_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_rule_var_name(ecs_rule_t* rule, int var_id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_run(ecs_world_t* world, ecs_entity_t system, float delta_time, void* param);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_run_aperiodic(ecs_world_t* world, ecs_flags32_t flags);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_run_pipeline(ecs_world_t* world, ecs_entity_t pipeline, float delta_time);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_run_post_frame(ecs_world_t* world, ecs_fini_action_t action, void* ctx);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_run_w_filter(ecs_world_t* world, ecs_entity_t system, float delta_time, int offset, int limit, void* param);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_run_worker(ecs_world_t* world, ecs_entity_t system, int stage_current, int stage_count, float delta_time, void* param);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_script_clear(ecs_world_t* world, ecs_entity_t script, ecs_entity_t instance);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_script_init(ecs_world_t* world, ecs_script_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_script_update(ecs_world_t* world, ecs_entity_t script, ecs_entity_t instance, CString str, ecs_vars_t* vars);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_search(ecs_world_t* world, ecs_table_t* table, ecs_id_t id, ecs_id_t* id_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_search_offset(ecs_world_t* world, ecs_table_t* table, int offset, ecs_id_t id, ecs_id_t* id_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_search_relation(ecs_world_t* world, ecs_table_t* table, int offset, ecs_id_t id, ecs_entity_t rel, ecs_flags32_t flags, ecs_entity_t* subject_out, ecs_id_t* id_out, ecs_table_record_t** tr_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_alias(ecs_world_t* world, ecs_entity_t entity, CString alias);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_automerge(ecs_world_t* world, CBool automerge);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_context(ecs_world_t* world, void* ctx);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_entity_generation(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_entity_range(ecs_world_t* world, ecs_entity_t id_start, ecs_entity_t id_end);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_hooks_id(ecs_world_t* world, ecs_entity_t id, ecs_type_hooks_t* hooks);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, ulong size, void* ptr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_interval(ecs_world_t* world, ecs_entity_t tick_source, float interval);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t* ecs_set_lookup_path(ecs_world_t* world, ecs_entity_t* lookup_path);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_name(ecs_world_t* world, ecs_entity_t entity, CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_set_name_prefix(ecs_world_t* world, CString prefix);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_os_api_impl();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_pipeline(ecs_world_t* world, ecs_entity_t pipeline);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_rate(ecs_world_t* world, ecs_entity_t tick_source, int rate, ecs_entity_t source);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_scope(ecs_world_t* world, ecs_entity_t scope);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_stage_count(ecs_world_t* world, int stages);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_symbol(ecs_world_t* world, ecs_entity_t entity, CString symbol);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_target_fps(ecs_world_t* world, float fps);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_threads(ecs_world_t* world, int threads);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_tick_source(ecs_world_t* world, ecs_entity_t system, ecs_entity_t tick_source);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_time_scale(ecs_world_t* world, float scale);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_timeout(ecs_world_t* world, ecs_entity_t tick_source, float timeout);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_with(ecs_world_t* world, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_should_log(int level);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_should_quit(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_sleepf(double t);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_snapshot_free(ecs_snapshot_t* snapshot);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_snapshot_iter(ecs_snapshot_t* snapshot);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_snapshot_next(ecs_iter_t* iter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_snapshot_restore(ecs_world_t* world, ecs_snapshot_t* snapshot);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_snapshot_t* ecs_snapshot_take(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_snapshot_t* ecs_snapshot_take_w_iter(ecs_iter_t* iter);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_sparse_add(ecs_sparse_t* sparse, ecs_size_t elem_size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_sparse_count(ecs_sparse_t* sparse);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_sparse_get(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_sparse_get_dense(ecs_sparse_t* sparse, ecs_size_t elem_size, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_sparse_init(ecs_sparse_t* sparse, ecs_size_t elem_size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong ecs_sparse_last_id(ecs_sparse_t* sparse);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_stage_is_async(ecs_world_t* stage);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_stage_is_readonly(ecs_world_t* world);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_start_timer(ecs_world_t* world, ecs_entity_t tick_source);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_stop_timer(ecs_world_t* world, ecs_entity_t tick_source);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_append(ecs_strbuf_t* buffer, CString fmt);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendch(ecs_strbuf_t* buffer, CChar ch);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendflt(ecs_strbuf_t* buffer, double v, CChar nan_delim);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendint(ecs_strbuf_t* buffer, long v);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendstr(ecs_strbuf_t* buffer, CString str);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendstr_zerocpy(ecs_strbuf_t* buffer, CString str);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendstr_zerocpy_const(ecs_strbuf_t* buffer, CString str);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendstr_zerocpyn(ecs_strbuf_t* buffer, CString str, int n);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendstr_zerocpyn_const(ecs_strbuf_t* buffer, CString str, int n);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendstrn(ecs_strbuf_t* buffer, CString str, int n);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_strbuf_get(ecs_strbuf_t* buffer);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_strbuf_get_small(ecs_strbuf_t* buffer);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_list_append(ecs_strbuf_t* buffer, CString fmt);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_list_appendch(ecs_strbuf_t* buffer, CChar ch);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_list_appendstr(ecs_strbuf_t* buffer, CString str);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_list_appendstrn(ecs_strbuf_t* buffer, CString str, int n);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_strbuf_list_next(ecs_strbuf_t* buffer);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_strbuf_list_pop(ecs_strbuf_t* buffer, CString list_close);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_strbuf_list_push(ecs_strbuf_t* buffer, CString list_open, CString separator);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_mergebuff(ecs_strbuf_t* dst_buffer, ecs_strbuf_t* src_buffer);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_strbuf_reset(ecs_strbuf_t* buffer);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_vappend(ecs_strbuf_t* buffer, CString fmt, void* args);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_strbuf_written(ecs_strbuf_t* buffer);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_strerror(int error_code);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_size_t ecs_stresc(CString @out, ecs_size_t size, CChar delimiter, CString @in);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_id_t ecs_strip_generation(ecs_entity_t e);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_struct_init(ecs_world_t* world, ecs_struct_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_query_t* ecs_system_get_query(ecs_world_t* world, ecs_entity_t system);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_system_init(ecs_world_t* world, ecs_system_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_system_stats_copy_last(ecs_system_stats_t* dst, ecs_system_stats_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_system_stats_get(ecs_world_t* world, ecs_entity_t system, ecs_system_stats_t* stats);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_system_stats_reduce(ecs_system_stats_t* dst, ecs_system_stats_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_system_stats_reduce_last(ecs_system_stats_t* stats, ecs_system_stats_t* old, int count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_system_stats_repeat_last(ecs_system_stats_t* stats);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_table_add_id(ecs_world_t* world, ecs_table_t* table, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_table_count(ecs_table_t* table);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_table_find(ecs_world_t* world, ecs_id_t* ids, int id_count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_table_get_column(ecs_table_t* table, int index, int offset);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong ecs_table_get_column_size(ecs_table_t* table, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_table_get_depth(ecs_world_t* world, ecs_table_t* table, ecs_entity_t rel);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_table_get_id(ecs_world_t* world, ecs_table_t* table, ecs_id_t id, int offset);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_table_get_index(ecs_world_t* world, ecs_table_t* table, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_table_get_storage_table(ecs_table_t* table);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_type_t* ecs_table_get_type(ecs_table_t* table);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_table_has_id(ecs_world_t* world, ecs_table_t* table, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_table_has_module(ecs_table_t* table);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_table_lock(ecs_world_t* world, ecs_table_t* table);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_table_remove_id(ecs_world_t* world, ecs_table_t* table, ecs_id_t id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_table_storage_to_type_index(ecs_table_t* table, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_table_str(ecs_world_t* world, ecs_table_t* table);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_table_swap_rows(ecs_world_t* world, ecs_table_t* table, int row_1, int row_2);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_table_type_to_storage_index(ecs_table_t* table, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_table_unlock(ecs_world_t* world, ecs_table_t* table);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_term_chain_iter(ecs_iter_t* it, ecs_term_t* term);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_term_t ecs_term_copy(ecs_term_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_term_finalize(ecs_world_t* world, ecs_term_t* term);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_term_fini(ecs_term_t* term);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_id_is_set(ecs_term_id_t* id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_is_initialized(ecs_term_t* term);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_term_iter(ecs_world_t* world, ecs_term_t* term);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_match_0(ecs_term_t* term);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_match_this(ecs_term_t* term);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_term_t ecs_term_move(ecs_term_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_next(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_term_str(ecs_world_t* world, ecs_term_t* term);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double ecs_time_measure(ecs_time_t* start);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_time_t ecs_time_sub(ecs_time_t t1, ecs_time_t t2);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double ecs_time_to_double(ecs_time_t t);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_type_info_to_json(ecs_world_t* world, ecs_entity_t type);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_type_info_to_json_buf(ecs_world_t* world, ecs_entity_t type, ecs_strbuf_t* buf_out);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_type_str(ecs_world_t* world, ecs_type_t* type);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_unit_init(ecs_world_t* world, ecs_unit_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_unit_prefix_init(ecs_world_t* world, ecs_unit_prefix_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_copy(ecs_world_t* world, ecs_entity_t type, void* dst, void* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_copy_w_type_info(ecs_world_t* world, ecs_type_info_t* ti, void* dst, void* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_fini(ecs_world_t* world, ecs_entity_t type, void* ptr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_fini_w_type_info(ecs_world_t* world, ecs_type_info_t* ti, void* ptr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_free(ecs_world_t* world, ecs_entity_t type, void* ptr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_init(ecs_world_t* world, ecs_entity_t type, void* ptr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_init_w_type_info(ecs_world_t* world, ecs_type_info_t* ti, void* ptr);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_move(ecs_world_t* world, ecs_entity_t type, void* dst, void* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_move_ctor(ecs_world_t* world, ecs_entity_t type, void* dst, void* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_move_ctor_w_type_info(ecs_world_t* world, ecs_type_info_t* ti, void* dst, void* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_value_move_w_type_info(ecs_world_t* world, ecs_type_info_t* ti, void* dst, void* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_value_new(ecs_world_t* world, ecs_entity_t type);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_value_new_w_type_info(ecs_world_t* world, ecs_type_info_t* ti);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_expr_var_t* ecs_vars_declare(ecs_vars_t* vars, CString name, ecs_entity_t type);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_expr_var_t* ecs_vars_declare_w_value(ecs_vars_t* vars, CString name, ecs_value_t* value);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vars_fini(ecs_vars_t* vars);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vars_init(ecs_world_t* world, ecs_vars_t* vars);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_expr_var_t* ecs_vars_lookup(ecs_vars_t* vars, CString name);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_vars_pop(ecs_vars_t* vars);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vars_push(ecs_vars_t* vars);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_vasprintf(CString fmt, void* args);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_vec_append(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_clear(ecs_vec_t* vec);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_vec_t ecs_vec_copy(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_vec_count(ecs_vec_t* vec);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_fini(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_vec_first(ecs_vec_t* vec);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_vec_get(ecs_vec_t* vec, ecs_size_t size, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_vec_grow(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size, int elem_count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_vec_t* ecs_vec_init(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size, int elem_count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_init_if(ecs_vec_t* vec, ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_vec_last(ecs_vec_t* vec, ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_reclaim(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_remove(ecs_vec_t* vec, ecs_size_t size, int elem);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_remove_last(ecs_vec_t* vec);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_vec_t* ecs_vec_reset(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_set_count(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size, int elem_count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_set_min_count(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size, int elem_count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_set_min_count_zeromem(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size, int elem_count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_set_min_size(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size, int elem_count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vec_set_size(ecs_allocator_t* allocator, ecs_vec_t* vec, ecs_size_t size, int elem_count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_vec_size(ecs_vec_t* vec);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_vector_init(ecs_world_t* world, ecs_vector_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_worker_iter(ecs_iter_t* it, int index, int count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_worker_next(ecs_iter_t* it);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_world_from_json(ecs_world_t* world, CString json, ecs_from_json_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_world_stats_copy_last(ecs_world_stats_t* dst, ecs_world_stats_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_world_stats_get(ecs_world_t* world, ecs_world_stats_t* stats);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_world_stats_log(ecs_world_t* world, ecs_world_stats_t* stats);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_world_stats_reduce(ecs_world_stats_t* dst, ecs_world_stats_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_world_stats_reduce_last(ecs_world_stats_t* stats, ecs_world_stats_t* old, int count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_world_stats_repeat_last(ecs_world_stats_t* stats);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_world_to_json(ecs_world_t* world, ecs_world_to_json_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_world_to_json_buf(ecs_world_t* world, ecs_strbuf_t* buf_out, ecs_world_to_json_desc_t* desc);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_record_t* ecs_write_begin(ecs_world_t* world, ecs_entity_t entity);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_write_end(ecs_record_t* @record);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_allocator_fini(ecs_allocator_t* a);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_block_allocator_t* flecs_allocator_get(ecs_allocator_t* a, ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_allocator_init(ecs_allocator_t* a);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_balloc(ecs_block_allocator_t* allocator);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_ballocator_fini(ecs_block_allocator_t* ba);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_ballocator_free(ecs_block_allocator_t* ba);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_ballocator_init(ecs_block_allocator_t* ba, ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_block_allocator_t* flecs_ballocator_new(ecs_size_t size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_bcalloc(ecs_block_allocator_t* allocator);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_bdup(ecs_block_allocator_t* ba, void* memory);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_bfree(ecs_block_allocator_t* allocator, void* memory);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_brealloc(ecs_block_allocator_t* dst, ecs_block_allocator_t* src, void* memory);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_dup(ecs_allocator_t* a, ecs_size_t size, void* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_hashmap_copy(ecs_hashmap_t* dst, ecs_hashmap_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_hashmap_fini(ecs_hashmap_t* map);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_hm_bucket_t* flecs_hashmap_get_bucket(ecs_hashmap_t* map, ulong hash);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern flecs_hashmap_iter_t flecs_hashmap_iter(ecs_hashmap_t* map);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_hm_bucket_remove(ecs_hashmap_t* map, ecs_hm_bucket_t* bucket, ulong hash, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_sparse_add(ecs_sparse_t* sparse, ecs_size_t elem_size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_clear(ecs_sparse_t* sparse);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_copy(ecs_sparse_t* dst, ecs_sparse_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int flecs_sparse_count(ecs_sparse_t* sparse);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_sparse_ensure(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_sparse_ensure_fast(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool flecs_sparse_exists(ecs_sparse_t* sparse, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_fini(ecs_sparse_t* sparse);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_sparse_get(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_sparse_get_any(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong flecs_sparse_get_current(ecs_sparse_t* sparse, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_sparse_get_dense(ecs_sparse_t* sparse, ecs_size_t elem_size, int index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong* flecs_sparse_ids(ecs_sparse_t* sparse);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_init(ecs_sparse_t* sparse, ecs_allocator_t* allocator, ecs_block_allocator_t* page_allocator, ecs_size_t elem_size);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool flecs_sparse_is_alive(ecs_sparse_t* sparse, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool flecs_sparse_is_valid(ecs_sparse_t* sparse, ulong index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong flecs_sparse_last_id(ecs_sparse_t* sparse);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong flecs_sparse_new_id(ecs_sparse_t* sparse);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong* flecs_sparse_new_ids(ecs_sparse_t* sparse, int count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int flecs_sparse_not_alive_count(ecs_sparse_t* sparse);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_remove(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_restore(ecs_sparse_t* dst, ecs_sparse_t* src);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_set_generation(ecs_sparse_t* sparse, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_set_id_source(ecs_sparse_t* sparse, ulong* id_source);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_set_size(ecs_sparse_t* sparse, int elem_count);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int flecs_sparse_size(ecs_sparse_t* sparse);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_sparse_try(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* flecs_sparse_try_ensure(ecs_sparse_t* sparse, ecs_size_t size, ulong index);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString flecs_strdup(ecs_allocator_t* a, CString str);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_strfree(ecs_allocator_t* a, CString str);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int flecs_table_observed_count(ecs_table_t* table);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString flecs_to_snake_case(CString str);

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_id_t pinvoke_ECS_OVERRIDE();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_id_t pinvoke_ECS_PAIR();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsChildOf();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsDependsOn();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsIsA();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsOnLoad();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsOnStore();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsOnUpdate();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsOnValidate();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsPhase();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsPostFrame();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsPostLoad();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsPostUpdate();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsPreFrame();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsPreStore();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsPreUpdate();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsPrefab();

        [CNode(Kind = "Function")]
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t pinvoke_EcsSlotOf();

        #endregion

        #region Types

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_CString_CString
        {
            public delegate* unmanaged<CString, CString> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_CString_Ecs_os_dl_t
        {
            public delegate* unmanaged<CString, ecs_os_dl_t> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_entity_t_VoidPtr_Ecs_entity_t_VoidPtr_Int
        {
            public delegate* unmanaged<ecs_entity_t, void*, ecs_entity_t, void*, int> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_http_request_tPtr_Ecs_http_reply_tPtr_VoidPtr_CBool
        {
            public delegate* unmanaged<ecs_http_request_t*, ecs_http_reply_t*, void*, CBool> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_iter_tPtr_CBool
        {
            public delegate* unmanaged<ecs_iter_t*, CBool> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_iter_tPtr_Void
        {
            public delegate* unmanaged<ecs_iter_t*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_os_cond_t
        {
            public delegate* unmanaged<ecs_os_cond_t> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_os_cond_t_Ecs_os_mutex_t_Void
        {
            public delegate* unmanaged<ecs_os_cond_t, ecs_os_mutex_t, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_os_cond_t_Void
        {
            public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_os_dl_t_CString_Ecs_os_proc_t
        {
            public delegate* unmanaged<ecs_os_dl_t, CString, ecs_os_proc_t> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_os_dl_t_Void
        {
            public delegate* unmanaged<ecs_os_dl_t, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_os_mutex_t
        {
            public delegate* unmanaged<ecs_os_mutex_t> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_os_mutex_t_Void
        {
            public delegate* unmanaged<ecs_os_mutex_t, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_os_thread_callback_t_VoidPtr_Ecs_os_thread_t
        {
            public delegate* unmanaged<ecs_os_thread_callback_t, void*, ecs_os_thread_t> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_os_thread_id_t
        {
            public delegate* unmanaged<ecs_os_thread_id_t> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_os_thread_t_VoidPtr
        {
            public delegate* unmanaged<ecs_os_thread_t, void*> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_poly_tPtr_Void
        {
            public delegate* unmanaged<ecs_poly_t*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_serializer_tPtr_CString_Int
        {
            public delegate* unmanaged<ecs_serializer_t*, CString, int> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_serializer_tPtr_Ecs_entity_t_VoidPtr_Int
        {
            public delegate* unmanaged<ecs_serializer_t*, ecs_entity_t, void*, int> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_serializer_tPtr_VoidPtr_Int
        {
            public delegate* unmanaged<ecs_serializer_t*, void*, int> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_size_t_VoidPtr
        {
            public delegate* unmanaged<ecs_size_t, void*> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_time_tPtr_Void
        {
            public delegate* unmanaged<ecs_time_t*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_CString_VoidPtr_Ecs_entity_t
        {
            public delegate* unmanaged<ecs_world_t*, CString, void*, ecs_entity_t> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_Ecs_app_desc_tPtr_Int
        {
            public delegate* unmanaged<ecs_world_t*, ecs_app_desc_t*, int> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_Ecs_poly_tPtr_Ecs_iter_tPtr_Ecs_term_tPtr_Void
        {
            public delegate* unmanaged<ecs_world_t*, ecs_poly_t*, ecs_iter_t*, ecs_term_t*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_Ecs_table_tPtr_Ecs_entity_tPtr_VoidPtr_Int_Int_Int_Ecs_order_by_action_t_Void
        {
            public delegate* unmanaged<ecs_world_t*, ecs_table_t*, ecs_entity_t*, void*, int, int, int, ecs_order_by_action_t, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_Ecs_table_tPtr_Ecs_id_t_VoidPtr_Ulong
        {
            public delegate* unmanaged<ecs_world_t*, ecs_table_t*, ecs_id_t, void*, ulong> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_Int
        {
            public delegate* unmanaged<ecs_world_t*, int> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_Ulong_VoidPtr_VoidPtr
        {
            public delegate* unmanaged<ecs_world_t*, ulong, void*, void*> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_Ulong_VoidPtr_VoidPtr_Void
        {
            public delegate* unmanaged<ecs_world_t*, ulong, void*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_Void
        {
            public delegate* unmanaged<ecs_world_t*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_VoidPtr_Void
        {
            public delegate* unmanaged<ecs_world_t*, void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_IntPtr_Int
        {
            public delegate* unmanaged<int*, int> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Int_CString_Int_CString_Void
        {
            public delegate* unmanaged<int, CString, int, CString, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Int_Int_Void
        {
            public delegate* unmanaged<int, int, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_LongPtr_Long
        {
            public delegate* unmanaged<long*, long> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ulong
        {
            public delegate* unmanaged<ulong> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Void
        {
            public delegate* unmanaged<void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_CBool_Void
        {
            public delegate* unmanaged<void*, CBool, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_CChar_Void
        {
            public delegate* unmanaged<void*, CChar, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_CString_Void
        {
            public delegate* unmanaged<void*, CString, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_CString_VoidPtr
        {
            public delegate* unmanaged<void*, CString, void*> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Double_Void
        {
            public delegate* unmanaged<void*, double, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Ecs_size_t_VoidPtr
        {
            public delegate* unmanaged<void*, ecs_size_t, void*> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Ecs_world_tPtr_Ecs_entity_t_Void
        {
            public delegate* unmanaged<void*, ecs_world_t*, ecs_entity_t, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void
        {
            public delegate* unmanaged<void*, int, ecs_type_info_t*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Long_Void
        {
            public delegate* unmanaged<void*, long, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Ulong
        {
            public delegate* unmanaged<void*, ulong> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Ulong_Void
        {
            public delegate* unmanaged<void*, ulong, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Ulong_VoidPtr
        {
            public delegate* unmanaged<void*, ulong, void*> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Void
        {
            public delegate* unmanaged<void*, void> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_VoidPtr
        {
            public delegate* unmanaged<void*, void*> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_VoidPtr_Int
        {
            public delegate* unmanaged<void*, void*, int> Pointer;
        }

        [CNode(Kind = "FunctionPointer")]
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void
        {
            public delegate* unmanaged<void*, void*, int, ecs_type_info_t*, void> Pointer;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct EcsArray
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t type;

            [FieldOffset(8)] // size = 4
            public int count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct EcsBitmask
        {
            [FieldOffset(0)] // size = 40
            public ecs_map_t constants;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct EcsComponent
        {
            [FieldOffset(0)] // size = 4
            public ecs_size_t size;

            [FieldOffset(4)] // size = 4
            public ecs_size_t alignment;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct EcsDocDescription
        {
            [FieldOffset(0)] // size = 8
            public CString value;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct EcsEnum
        {
            [FieldOffset(0)] // size = 40
            public ecs_map_t constants;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct EcsIdentifier
        {
            [FieldOffset(0)] // size = 8
            public CString value;

            [FieldOffset(8)] // size = 4
            public ecs_size_t length;

            [FieldOffset(16)] // size = 8
            public ulong hash;

            [FieldOffset(24)] // size = 8
            public ulong index_hash;

            [FieldOffset(32)] // size = 8
            public ecs_hashmap_t* index;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct EcsMember
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t type;

            [FieldOffset(8)] // size = 4
            public int count;

            [FieldOffset(16)] // size = 8
            public ecs_entity_t unit;

            [FieldOffset(24)] // size = 4
            public int offset;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct EcsMetaType
        {
            [FieldOffset(0)] // size = 4
            public ecs_type_kind_t kind;

            [FieldOffset(4)] // size = 1
            public CBool existing;

            [FieldOffset(5)] // size = 1
            public CBool partial;

            [FieldOffset(8)] // size = 4
            public ecs_size_t size;

            [FieldOffset(12)] // size = 4
            public ecs_size_t alignment;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct EcsMetaTypeSerialized
        {
            [FieldOffset(0)] // size = 24
            public ecs_vec_t ops;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct EcsMetricSource
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct EcsMetricValue
        {
            [FieldOffset(0)] // size = 8
            public double value;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 120, Pack = 8)]
        public struct EcsOpaque
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t as_type;

            [FieldOffset(8)] // size = 8
            public ecs_meta_serialize_t serialize;

            [FieldOffset(16)] // size = 8
            public FnPtr_VoidPtr_CBool_Void assign_bool;

            [FieldOffset(24)] // size = 8
            public FnPtr_VoidPtr_CChar_Void assign_char;

            [FieldOffset(32)] // size = 8
            public FnPtr_VoidPtr_Long_Void assign_int;

            [FieldOffset(40)] // size = 8
            public FnPtr_VoidPtr_Ulong_Void assign_uint;

            [FieldOffset(48)] // size = 8
            public FnPtr_VoidPtr_Double_Void assign_float;

            [FieldOffset(56)] // size = 8
            public FnPtr_VoidPtr_CString_Void assign_string;

            [FieldOffset(64)] // size = 8
            public FnPtr_VoidPtr_Ecs_world_tPtr_Ecs_entity_t_Void assign_entity;

            [FieldOffset(72)] // size = 8
            public FnPtr_VoidPtr_Void assign_null;

            [FieldOffset(80)] // size = 8
            public FnPtr_VoidPtr_Void clear;

            [FieldOffset(88)] // size = 8
            public FnPtr_VoidPtr_Ulong_VoidPtr ensure_element;

            [FieldOffset(96)] // size = 8
            public FnPtr_VoidPtr_CString_VoidPtr ensure_member;

            [FieldOffset(104)] // size = 8
            public FnPtr_VoidPtr_Ulong count;

            [FieldOffset(112)] // size = 8
            public FnPtr_VoidPtr_Ulong_Void resize;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
        public struct EcsPipelineStats
        {
            [FieldOffset(0)] // size = 8
            public EcsStatsHeader hdr;

            [FieldOffset(8)] // size = 88
            public ecs_pipeline_stats_t stats;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct EcsPoly
        {
            [FieldOffset(0)] // size = 8
            public ecs_poly_t* poly;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct EcsPrimitive
        {
            [FieldOffset(0)] // size = 4
            public ecs_primitive_kind_t kind;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct EcsRateFilter
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t src;

            [FieldOffset(8)] // size = 4
            public int rate;

            [FieldOffset(12)] // size = 4
            public int tick_count;

            [FieldOffset(16)] // size = 4
            public float time_elapsed;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct EcsRest
        {
            [FieldOffset(0)] // size = 2
            public ushort port;

            [FieldOffset(8)] // size = 8
            public CString ipaddr;

            [FieldOffset(16)] // size = 8
            public void* impl;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
        public struct EcsScript
        {
            [FieldOffset(0)] // size = 24
            public ecs_vec_t using_;

            [FieldOffset(24)] // size = 8
            public CString script;

            [FieldOffset(32)] // size = 24
            public ecs_vec_t prop_defaults;

            [FieldOffset(56)] // size = 8
            public ecs_world_t* world;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct EcsStatsHeader
        {
            [FieldOffset(0)] // size = 4
            public float elapsed;

            [FieldOffset(4)] // size = 4
            public int reduce_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct EcsStruct
        {
            [FieldOffset(0)] // size = 24
            public ecs_vec_t members;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct EcsTarget
        {
            [FieldOffset(0)] // size = 4
            public int count;

            [FieldOffset(8)] // size = 8
            public ecs_record_t* target;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct EcsTickSource
        {
            [FieldOffset(0)] // size = 1
            public CBool tick;

            [FieldOffset(4)] // size = 4
            public float time_elapsed;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct EcsTimer
        {
            [FieldOffset(0)] // size = 4
            public float timeout;

            [FieldOffset(4)] // size = 4
            public float time;

            [FieldOffset(8)] // size = 4
            public float overshoot;

            [FieldOffset(12)] // size = 4
            public int fired_count;

            [FieldOffset(16)] // size = 1
            public CBool active;

            [FieldOffset(17)] // size = 1
            public CBool single_shot;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct EcsUnit
        {
            [FieldOffset(0)] // size = 8
            public CString symbol;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t prefix;

            [FieldOffset(16)] // size = 8
            public ecs_entity_t @base;

            [FieldOffset(24)] // size = 8
            public ecs_entity_t over;

            [FieldOffset(32)] // size = 8
            public ecs_unit_translation_t translation;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct EcsUnitPrefix
        {
            [FieldOffset(0)] // size = 8
            public CString symbol;

            [FieldOffset(8)] // size = 8
            public ecs_unit_translation_t translation;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct EcsVector
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t type;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 96032, Pack = 8)]
        public struct EcsWorldStats
        {
            [FieldOffset(0)] // size = 8
            public EcsStatsHeader hdr;

            [FieldOffset(8)] // size = 96024
            public ecs_world_stats_t stats;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 136, Pack = 8)]
        public struct ecs_allocator_t
        {
            [FieldOffset(0)] // size = 48
            public ecs_block_allocator_t chunks;

            [FieldOffset(48)] // size = 88
            public ecs_sparse_t sizes;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct ecs_app_desc_t
        {
            [FieldOffset(0)] // size = 4
            public float target_fps;

            [FieldOffset(4)] // size = 4
            public float delta_time;

            [FieldOffset(8)] // size = 4
            public int threads;

            [FieldOffset(12)] // size = 4
            public int frames;

            [FieldOffset(16)] // size = 1
            public CBool enable_rest;

            [FieldOffset(17)] // size = 1
            public CBool enable_monitor;

            [FieldOffset(24)] // size = 8
            public ecs_app_init_action_t init;

            [FieldOffset(32)] // size = 8
            public void* ctx;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_array_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t type;

            [FieldOffset(16)] // size = 4
            public int count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_bitmask_constant_t
        {
            [FieldOffset(0)] // size = 8
            public CString name;

            [FieldOffset(8)] // size = 4
            public ecs_flags32_t value;

            [FieldOffset(16)] // size = 8
            public ecs_entity_t constant;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 776, Pack = 8)]
        public struct ecs_bitmask_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 768
            public fixed byte _constants[768]; // ecs_bitmask_constant_t[32]

            public Span<ecs_bitmask_constant_t> constants
            {
                get
                {
                    fixed (ecs_bitmask_desc_t* @this = &this)
                    {
                        var pointer = &@this->_constants[0];
                        var span = new Span<ecs_bitmask_constant_t>(pointer, 32);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_block_allocator_block_t
        {
            [FieldOffset(0)] // size = 8
            public void* memory;

            [FieldOffset(8)] // size = 8
            public ecs_block_allocator_block_t* next;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_block_allocator_chunk_header_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_block_allocator_chunk_header_t* next;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ecs_block_allocator_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_block_allocator_chunk_header_t* head;

            [FieldOffset(8)] // size = 8
            public ecs_block_allocator_block_t* block_head;

            [FieldOffset(16)] // size = 8
            public ecs_block_allocator_block_t* block_tail;

            [FieldOffset(24)] // size = 4
            public int chunk_size;

            [FieldOffset(28)] // size = 4
            public int data_size;

            [FieldOffset(32)] // size = 4
            public int chunks_per_block;

            [FieldOffset(36)] // size = 4
            public int block_size;

            [FieldOffset(40)] // size = 4
            public int alloc_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_bucket_entry_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_map_key_t key;

            [FieldOffset(8)] // size = 8
            public ecs_map_val_t value;

            [FieldOffset(16)] // size = 8
            public ecs_bucket_entry_t* next;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_bucket_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_bucket_entry_t* first;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 296, Pack = 8)]
        public struct ecs_bulk_desc_t
        {
            [FieldOffset(0)] // size = 4
            public int _canary;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t* entities;

            [FieldOffset(16)] // size = 4
            public int count;

            [FieldOffset(24)] // size = 256
            public fixed byte _ids[256]; // ecs_id_t[32]

            public Span<ecs_id_t> ids
            {
                get
                {
                    fixed (ecs_bulk_desc_t* @this = &this)
                    {
                        var pointer = &@this->_ids[0];
                        var span = new Span<ecs_id_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(280)] // size = 8
            public void** data;

            [FieldOffset(288)] // size = 8
            public ecs_table_t* table;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 160, Pack = 8)]
        public struct ecs_component_desc_t
        {
            [FieldOffset(0)] // size = 4
            public int _canary;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(16)] // size = 144
            public ecs_type_info_t type;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 1200, Pack = 8)]
        public struct ecs_counter_t
        {
            [FieldOffset(0)] // size = 720
            public ecs_gauge_t rate;

            [FieldOffset(720)] // size = 480
            public fixed byte _value[480]; // double[60]

            public Span<double> value
            {
                get
                {
                    fixed (ecs_counter_t* @this = &this)
                    {
                        var pointer = &@this->_value[0];
                        var span = new Span<double>(pointer, 60);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 320, Pack = 8)]
        public struct ecs_entity_desc_t
        {
            [FieldOffset(0)] // size = 4
            public int _canary;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t id;

            [FieldOffset(16)] // size = 8
            public CString name;

            [FieldOffset(24)] // size = 8
            public CString sep;

            [FieldOffset(32)] // size = 8
            public CString root_sep;

            [FieldOffset(40)] // size = 8
            public CString symbol;

            [FieldOffset(48)] // size = 1
            public CBool use_low_id;

            [FieldOffset(56)] // size = 256
            public fixed byte _add[256]; // ecs_id_t[32]

            public Span<ecs_id_t> add
            {
                get
                {
                    fixed (ecs_entity_desc_t* @this = &this)
                    {
                        var pointer = &@this->_add[0];
                        var span = new Span<ecs_id_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(312)] // size = 8
            public CString add_expr;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 1)]
        public struct ecs_entity_to_json_desc_t
        {
            [FieldOffset(0)] // size = 1
            public CBool serialize_path;

            [FieldOffset(1)] // size = 1
            public CBool serialize_meta_ids;

            [FieldOffset(2)] // size = 1
            public CBool serialize_label;

            [FieldOffset(3)] // size = 1
            public CBool serialize_brief;

            [FieldOffset(4)] // size = 1
            public CBool serialize_link;

            [FieldOffset(5)] // size = 1
            public CBool serialize_color;

            [FieldOffset(6)] // size = 1
            public CBool serialize_id_labels;

            [FieldOffset(7)] // size = 1
            public CBool serialize_base;

            [FieldOffset(8)] // size = 1
            public CBool serialize_private;

            [FieldOffset(9)] // size = 1
            public CBool serialize_hidden;

            [FieldOffset(10)] // size = 1
            public CBool serialize_values;

            [FieldOffset(11)] // size = 1
            public CBool serialize_type_info;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_enum_constant_t
        {
            [FieldOffset(0)] // size = 8
            public CString name;

            [FieldOffset(8)] // size = 4
            public int value;

            [FieldOffset(16)] // size = 8
            public ecs_entity_t constant;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 776, Pack = 8)]
        public struct ecs_enum_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 768
            public fixed byte _constants[768]; // ecs_enum_constant_t[32]

            public Span<ecs_enum_constant_t> constants
            {
                get
                {
                    fixed (ecs_enum_desc_t* @this = &this)
                    {
                        var pointer = &@this->_constants[0];
                        var span = new Span<ecs_enum_constant_t>(pointer, 32);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
        public struct ecs_event_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t @event;

            [FieldOffset(8)] // size = 8
            public ecs_type_t* ids;

            [FieldOffset(16)] // size = 8
            public ecs_table_t* table;

            [FieldOffset(24)] // size = 8
            public ecs_table_t* other_table;

            [FieldOffset(32)] // size = 4
            public int offset;

            [FieldOffset(36)] // size = 4
            public int count;

            [FieldOffset(40)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(48)] // size = 8
            public void* param;

            [FieldOffset(56)] // size = 8
            public ecs_poly_t* observable;

            [FieldOffset(64)] // size = 4
            public ecs_flags32_t flags;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
        public struct ecs_event_record_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_event_id_record_t* any;

            [FieldOffset(8)] // size = 8
            public ecs_event_id_record_t* wildcard;

            [FieldOffset(16)] // size = 8
            public ecs_event_id_record_t* wildcard_pair;

            [FieldOffset(24)] // size = 40
            public ecs_map_t event_ids;

            [FieldOffset(64)] // size = 8
            public ecs_entity_t @event;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 152, Pack = 8)]
        public struct ecs_expr_var_scope_t
        {
            [FieldOffset(0)] // size = 120
            public ecs_hashmap_t var_index;

            [FieldOffset(120)] // size = 24
            public ecs_vec_t vars;

            [FieldOffset(144)] // size = 8
            public ecs_expr_var_scope_t* parent;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_expr_var_t
        {
            [FieldOffset(0)] // size = 8
            public CString name;

            [FieldOffset(8)] // size = 16
            public ecs_value_t value;

            [FieldOffset(24)] // size = 1
            public CBool owned;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 2488, Pack = 8)]
        public struct ecs_filter_desc_t
        {
            [FieldOffset(0)] // size = 4
            public int _canary;

            [FieldOffset(8)] // size = 2432
            public fixed byte _terms[2432]; // ecs_term_t[16]

            public Span<ecs_term_t> terms
            {
                get
                {
                    fixed (ecs_filter_desc_t* @this = &this)
                    {
                        var pointer = &@this->_terms[0];
                        var span = new Span<ecs_term_t>(pointer, 16);
                        return span;
                    }
                }
            }

            [FieldOffset(2440)] // size = 8
            public ecs_term_t* terms_buffer;

            [FieldOffset(2448)] // size = 4
            public int terms_buffer_count;

            [FieldOffset(2456)] // size = 8
            public ecs_filter_t* storage;

            [FieldOffset(2464)] // size = 1
            public CBool instanced;

            [FieldOffset(2468)] // size = 4
            public ecs_flags32_t flags;

            [FieldOffset(2472)] // size = 8
            public CString expr;

            [FieldOffset(2480)] // size = 8
            public ecs_entity_t entity;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 296, Pack = 8)]
        public struct ecs_filter_iter_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_filter_t* filter;

            [FieldOffset(8)] // size = 4
            public ecs_iter_kind_t kind;

            [FieldOffset(16)] // size = 272
            public ecs_term_iter_t term_iter;

            [FieldOffset(288)] // size = 4
            public int matches_left;

            [FieldOffset(292)] // size = 4
            public int pivot_term;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
        public struct ecs_filter_t
        {
            [FieldOffset(0)] // size = 16
            public ecs_header_t hdr;

            [FieldOffset(16)] // size = 8
            public ecs_term_t* terms;

            [FieldOffset(24)] // size = 4
            public int term_count;

            [FieldOffset(28)] // size = 4
            public int field_count;

            [FieldOffset(32)] // size = 1
            public CBool owned;

            [FieldOffset(33)] // size = 1
            public CBool terms_owned;

            [FieldOffset(36)] // size = 4
            public ecs_flags32_t flags;

            [FieldOffset(40)] // size = 8
            public fixed byte _variable_names[8]; // char*[1]

            public Span<CString> variable_names
            {
                get
                {
                    fixed (ecs_filter_t* @this = &this)
                    {
                        var pointer = &@this->_variable_names[0];
                        var span = new Span<CString>(pointer, 1);
                        return span;
                    }
                }
            }

            [FieldOffset(48)] // size = 8
            public int* sizes;

            [FieldOffset(56)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(64)] // size = 8
            public ecs_iterable_t iterable;

            [FieldOffset(72)] // size = 8
            public ecs_poly_dtor_t dtor;

            [FieldOffset(80)] // size = 8
            public ecs_world_t* world;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 1)]
        public struct ecs_flatten_desc_t
        {
            [FieldOffset(0)] // size = 1
            public CBool keep_names;

            [FieldOffset(1)] // size = 1
            public CBool lose_depth;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_from_json_desc_t
        {
            [FieldOffset(0)] // size = 8
            public CString name;

            [FieldOffset(8)] // size = 8
            public CString expr;

            [FieldOffset(16)] // size = 8
            public FnPtr_Ecs_world_tPtr_CString_VoidPtr_Ecs_entity_t lookup_action;

            [FieldOffset(24)] // size = 8
            public void* lookup_ctx;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 720, Pack = 4)]
        public struct ecs_gauge_t
        {
            [FieldOffset(0)] // size = 240
            public fixed byte _avg[240]; // float[60]

            public Span<float> avg
            {
                get
                {
                    fixed (ecs_gauge_t* @this = &this)
                    {
                        var pointer = &@this->_avg[0];
                        var span = new Span<float>(pointer, 60);
                        return span;
                    }
                }
            }

            [FieldOffset(240)] // size = 240
            public fixed byte _min[240]; // float[60]

            public Span<float> min
            {
                get
                {
                    fixed (ecs_gauge_t* @this = &this)
                    {
                        var pointer = &@this->_min[0];
                        var span = new Span<float>(pointer, 60);
                        return span;
                    }
                }
            }

            [FieldOffset(480)] // size = 240
            public fixed byte _max[240]; // float[60]

            public Span<float> max
            {
                get
                {
                    fixed (ecs_gauge_t* @this = &this)
                    {
                        var pointer = &@this->_max[0];
                        var span = new Span<float>(pointer, 60);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 120, Pack = 8)]
        public struct ecs_hashmap_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_hash_value_action_t hash;

            [FieldOffset(8)] // size = 8
            public ecs_compare_action_t compare;

            [FieldOffset(16)] // size = 4
            public ecs_size_t key_size;

            [FieldOffset(20)] // size = 4
            public ecs_size_t value_size;

            [FieldOffset(24)] // size = 8
            public ecs_block_allocator_t* hashmap_allocator;

            [FieldOffset(32)] // size = 48
            public ecs_block_allocator_t bucket_allocator;

            [FieldOffset(80)] // size = 40
            public ecs_map_t impl;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_header_t
        {
            [FieldOffset(0)] // size = 4
            public int magic;

            [FieldOffset(4)] // size = 4
            public int type;

            [FieldOffset(8)] // size = 8
            public ecs_mixins_t* mixins;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ecs_hm_bucket_t
        {
            [FieldOffset(0)] // size = 24
            public ecs_vec_t keys;

            [FieldOffset(24)] // size = 24
            public ecs_vec_t values;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 160, Pack = 8)]
        public struct ecs_http_connection_t
        {
            [FieldOffset(0)] // size = 8
            public ulong id;

            [FieldOffset(8)] // size = 8
            public ecs_http_server_t* server;

            [FieldOffset(16)] // size = 128
            public fixed byte _host[128]; // char[128]

            public string host
            {
                get
                {
                    fixed (ecs_http_connection_t* @this = &this)
                    {
                        var pointer = &@this->_host[0];
                        var cString = new CString(pointer);
                        return Runtime.CString.ToString(cString);
                    }
                }
            }

            [FieldOffset(144)] // size = 16
            public fixed byte _port[16]; // char[16]

            public string port
            {
                get
                {
                    fixed (ecs_http_connection_t* @this = &this)
                    {
                        var pointer = &@this->_port[0];
                        var cString = new CString(pointer);
                        return Runtime.CString.ToString(cString);
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_http_key_value_t
        {
            [FieldOffset(0)] // size = 8
            public CString key;

            [FieldOffset(8)] // size = 8
            public CString value;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 2232, Pack = 8)]
        public struct ecs_http_reply_t
        {
            [FieldOffset(0)] // size = 4
            public int code;

            [FieldOffset(8)] // size = 1104
            public ecs_strbuf_t body;

            [FieldOffset(1112)] // size = 8
            public CString status;

            [FieldOffset(1120)] // size = 8
            public CString content_type;

            [FieldOffset(1128)] // size = 1104
            public ecs_strbuf_t headers;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 1072, Pack = 8)]
        public struct ecs_http_request_t
        {
            [FieldOffset(0)] // size = 8
            public ulong id;

            [FieldOffset(8)] // size = 4
            public ecs_http_method_t method;

            [FieldOffset(16)] // size = 8
            public CString path;

            [FieldOffset(24)] // size = 8
            public CString body;

            [FieldOffset(32)] // size = 512
            public fixed byte _headers[512]; // ecs_http_key_value_t[32]

            public Span<ecs_http_key_value_t> headers
            {
                get
                {
                    fixed (ecs_http_request_t* @this = &this)
                    {
                        var pointer = &@this->_headers[0];
                        var span = new Span<ecs_http_key_value_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(544)] // size = 512
            public fixed byte _params[512]; // ecs_http_key_value_t[32]

            public Span<ecs_http_key_value_t> @params
            {
                get
                {
                    fixed (ecs_http_request_t* @this = &this)
                    {
                        var pointer = &@this->_params[0];
                        var span = new Span<ecs_http_key_value_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(1056)] // size = 4
            public int header_count;

            [FieldOffset(1060)] // size = 4
            public int param_count;

            [FieldOffset(1064)] // size = 8
            public ecs_http_connection_t* conn;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct ecs_http_server_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_http_reply_action_t callback;

            [FieldOffset(8)] // size = 8
            public void* ctx;

            [FieldOffset(16)] // size = 2
            public ushort port;

            [FieldOffset(24)] // size = 8
            public CString ipaddr;

            [FieldOffset(32)] // size = 4
            public int send_queue_wait_ms;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_iter_cache_t
        {
            [FieldOffset(0)] // size = 16
            public ecs_stack_cursor_t stack_cursor;

            [FieldOffset(16)] // size = 1
            public ecs_flags8_t used;

            [FieldOffset(17)] // size = 1
            public ecs_flags8_t allocated;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 328, Pack = 8)]
        public struct ecs_iter_private_t
        {
            [FieldOffset(0)] // size = 296
            public ecs_iter_private_t_ANONYMOUS_FIELD0 iter;

            [FieldOffset(296)] // size = 8
            public void* entity_iter;

            [FieldOffset(304)] // size = 24
            public ecs_iter_cache_t cache;
        }

        [CNode(Kind = "Union")]
        [StructLayout(LayoutKind.Explicit, Size = 296, Pack = 8)]
        public struct ecs_iter_private_t_ANONYMOUS_FIELD0
        {
            [FieldOffset(0)] // size = 272
            public ecs_term_iter_t term;

            [FieldOffset(0)] // size = 296
            public ecs_filter_iter_t filter;

            [FieldOffset(0)] // size = 48
            public ecs_query_iter_t query;

            [FieldOffset(0)] // size = 64
            public ecs_rule_iter_t rule;

            [FieldOffset(0)] // size = 120
            public ecs_snapshot_iter_t snapshot;

            [FieldOffset(0)] // size = 12
            public ecs_page_iter_t page;

            [FieldOffset(0)] // size = 8
            public ecs_worker_iter_t worker;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 608, Pack = 8)]
        public struct ecs_iter_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_world_t* world;

            [FieldOffset(8)] // size = 8
            public ecs_world_t* real_world;

            [FieldOffset(16)] // size = 8
            public ecs_entity_t* entities;

            [FieldOffset(24)] // size = 8
            public void** ptrs;

            [FieldOffset(32)] // size = 8
            public ecs_size_t* sizes;

            [FieldOffset(40)] // size = 8
            public ecs_table_t* table;

            [FieldOffset(48)] // size = 8
            public ecs_table_t* other_table;

            [FieldOffset(56)] // size = 8
            public ecs_id_t* ids;

            [FieldOffset(64)] // size = 8
            public ecs_var_t* variables;

            [FieldOffset(72)] // size = 8
            public int* columns;

            [FieldOffset(80)] // size = 8
            public ecs_entity_t* sources;

            [FieldOffset(88)] // size = 8
            public int* match_indices;

            [FieldOffset(96)] // size = 8
            public ecs_ref_t* references;

            [FieldOffset(104)] // size = 8
            public ecs_flags64_t constrained_vars;

            [FieldOffset(112)] // size = 8
            public ulong group_id;

            [FieldOffset(120)] // size = 4
            public int field_count;

            [FieldOffset(128)] // size = 8
            public ecs_entity_t system;

            [FieldOffset(136)] // size = 8
            public ecs_entity_t @event;

            [FieldOffset(144)] // size = 8
            public ecs_id_t event_id;

            [FieldOffset(152)] // size = 8
            public ecs_term_t* terms;

            [FieldOffset(160)] // size = 4
            public int table_count;

            [FieldOffset(164)] // size = 4
            public int term_index;

            [FieldOffset(168)] // size = 4
            public int variable_count;

            [FieldOffset(176)] // size = 8
            public CString* variable_names;

            [FieldOffset(184)] // size = 8
            public void* param;

            [FieldOffset(192)] // size = 8
            public void* ctx;

            [FieldOffset(200)] // size = 8
            public void* binding_ctx;

            [FieldOffset(208)] // size = 4
            public float delta_time;

            [FieldOffset(212)] // size = 4
            public float delta_system_time;

            [FieldOffset(216)] // size = 4
            public int frame_offset;

            [FieldOffset(220)] // size = 4
            public int offset;

            [FieldOffset(224)] // size = 4
            public int count;

            [FieldOffset(228)] // size = 4
            public int instance_count;

            [FieldOffset(232)] // size = 4
            public ecs_flags32_t flags;

            [FieldOffset(240)] // size = 8
            public ecs_entity_t interrupted_by;

            [FieldOffset(248)] // size = 328
            public ecs_iter_private_t priv;

            [FieldOffset(576)] // size = 8
            public ecs_iter_next_action_t next;

            [FieldOffset(584)] // size = 8
            public ecs_iter_action_t callback;

            [FieldOffset(592)] // size = 8
            public ecs_iter_fini_action_t fini;

            [FieldOffset(600)] // size = 8
            public ecs_iter_t* chain_it;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
        public struct ecs_iter_to_json_desc_t
        {
            [FieldOffset(0)] // size = 1
            public CBool serialize_term_ids;

            [FieldOffset(1)] // size = 1
            public CBool serialize_ids;

            [FieldOffset(2)] // size = 1
            public CBool serialize_sources;

            [FieldOffset(3)] // size = 1
            public CBool serialize_variables;

            [FieldOffset(4)] // size = 1
            public CBool serialize_is_set;

            [FieldOffset(5)] // size = 1
            public CBool serialize_values;

            [FieldOffset(6)] // size = 1
            public CBool serialize_entities;

            [FieldOffset(7)] // size = 1
            public CBool serialize_entity_labels;

            [FieldOffset(8)] // size = 1
            public CBool serialize_entity_ids;

            [FieldOffset(9)] // size = 1
            public CBool serialize_entity_names;

            [FieldOffset(10)] // size = 1
            public CBool serialize_variable_labels;

            [FieldOffset(11)] // size = 1
            public CBool serialize_variable_ids;

            [FieldOffset(12)] // size = 1
            public CBool serialize_colors;

            [FieldOffset(13)] // size = 1
            public CBool measure_eval_duration;

            [FieldOffset(14)] // size = 1
            public CBool serialize_type_info;

            [FieldOffset(15)] // size = 1
            public CBool serialize_table;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_iterable_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_iter_init_action_t init;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_map_iter_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_map_t* map;

            [FieldOffset(8)] // size = 8
            public ecs_bucket_t* bucket;

            [FieldOffset(16)] // size = 8
            public ecs_bucket_entry_t* entry;

            [FieldOffset(24)] // size = 8
            public ecs_map_data_t* res;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct ecs_map_params_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_allocator_t* allocator;

            [FieldOffset(8)] // size = 48
            public ecs_block_allocator_t entry_allocator;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct ecs_map_t
        {
            [FieldOffset(0)] // size = 1
            public byte bucket_shift;

            [FieldOffset(1)] // size = 1
            public CBool shared_allocator;

            [FieldOffset(8)] // size = 8
            public ecs_bucket_t* buckets;

            [FieldOffset(16)] // size = 4
            public int bucket_count;

            [FieldOffset(20)] // size = 4
            public int count;

            [FieldOffset(24)] // size = 8
            public ecs_block_allocator_t* entry_allocator;

            [FieldOffset(32)] // size = 8
            public ecs_allocator_t* allocator;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ecs_member_t
        {
            [FieldOffset(0)] // size = 8
            public CString name;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t type;

            [FieldOffset(16)] // size = 4
            public int count;

            [FieldOffset(20)] // size = 4
            public int offset;

            [FieldOffset(24)] // size = 8
            public ecs_entity_t unit;

            [FieldOffset(32)] // size = 4
            public ecs_size_t size;

            [FieldOffset(40)] // size = 8
            public ecs_entity_t member;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 2592, Pack = 8)]
        public struct ecs_meta_cursor_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_world_t* world;

            [FieldOffset(8)] // size = 2560
            public fixed byte _scope[2560]; // ecs_meta_scope_t[32]

            public Span<ecs_meta_scope_t> scope
            {
                get
                {
                    fixed (ecs_meta_cursor_t* @this = &this)
                    {
                        var pointer = &@this->_scope[0];
                        var span = new Span<ecs_meta_scope_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(2568)] // size = 4
            public int depth;

            [FieldOffset(2572)] // size = 1
            public CBool valid;

            [FieldOffset(2573)] // size = 1
            public CBool is_primitive_scope;

            [FieldOffset(2576)] // size = 8
            public FnPtr_Ecs_world_tPtr_CString_VoidPtr_Ecs_entity_t lookup_action;

            [FieldOffset(2584)] // size = 8
            public void* lookup_ctx;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
        public struct ecs_meta_scope_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t type;

            [FieldOffset(8)] // size = 8
            public ecs_meta_type_op_t* ops;

            [FieldOffset(16)] // size = 4
            public int op_count;

            [FieldOffset(20)] // size = 4
            public int op_cur;

            [FieldOffset(24)] // size = 4
            public int elem_cur;

            [FieldOffset(28)] // size = 4
            public int prev_depth;

            [FieldOffset(32)] // size = 8
            public void* ptr;

            [FieldOffset(40)] // size = 8
            public EcsComponent* comp;

            [FieldOffset(48)] // size = 8
            public EcsOpaque* opaque;

            [FieldOffset(56)] // size = 8
            public ecs_vec_t* vector;

            [FieldOffset(64)] // size = 8
            public ecs_hashmap_t* members;

            [FieldOffset(72)] // size = 1
            public CBool is_collection;

            [FieldOffset(73)] // size = 1
            public CBool is_inline_array;

            [FieldOffset(74)] // size = 1
            public CBool is_empty_scope;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct ecs_meta_type_op_t
        {
            [FieldOffset(0)] // size = 4
            public ecs_meta_type_op_kind_t kind;

            [FieldOffset(4)] // size = 4
            public ecs_size_t offset;

            [FieldOffset(8)] // size = 4
            public int count;

            [FieldOffset(16)] // size = 8
            public CString name;

            [FieldOffset(24)] // size = 4
            public int op_count;

            [FieldOffset(28)] // size = 4
            public ecs_size_t size;

            [FieldOffset(32)] // size = 8
            public ecs_entity_t type;

            [FieldOffset(40)] // size = 8
            public ecs_entity_t unit;

            [FieldOffset(48)] // size = 8
            public ecs_hashmap_t* members;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ecs_metric_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t member;

            [FieldOffset(16)] // size = 8
            public ecs_id_t id;

            [FieldOffset(24)] // size = 1
            public CBool targets;

            [FieldOffset(32)] // size = 8
            public ecs_entity_t kind;

            [FieldOffset(40)] // size = 8
            public CString brief;
        }

        [CNode(Kind = "Union")]
        [StructLayout(LayoutKind.Explicit, Size = 1200, Pack = 8)]
        public struct ecs_metric_t
        {
            [FieldOffset(0)] // size = 720
            public ecs_gauge_t gauge;

            [FieldOffset(0)] // size = 1200
            public ecs_counter_t counter;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 448, Pack = 8)]
        public struct ecs_observable_t
        {
            [FieldOffset(0)] // size = 72
            public ecs_event_record_t on_add;

            [FieldOffset(72)] // size = 72
            public ecs_event_record_t on_remove;

            [FieldOffset(144)] // size = 72
            public ecs_event_record_t on_set;

            [FieldOffset(216)] // size = 72
            public ecs_event_record_t un_set;

            [FieldOffset(288)] // size = 72
            public ecs_event_record_t on_wildcard;

            [FieldOffset(360)] // size = 88
            public ecs_sparse_t events;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 2648, Pack = 8)]
        public struct ecs_observer_desc_t
        {
            [FieldOffset(0)] // size = 4
            public int _canary;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(16)] // size = 2488
            public ecs_filter_desc_t filter;

            [FieldOffset(2504)] // size = 64
            public fixed byte _events[64]; // ecs_entity_t[8]

            public Span<ecs_entity_t> events
            {
                get
                {
                    fixed (ecs_observer_desc_t* @this = &this)
                    {
                        var pointer = &@this->_events[0];
                        var span = new Span<ecs_entity_t>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(2568)] // size = 1
            public CBool yield_existing;

            [FieldOffset(2576)] // size = 8
            public ecs_iter_action_t callback;

            [FieldOffset(2584)] // size = 8
            public ecs_run_action_t run;

            [FieldOffset(2592)] // size = 8
            public void* ctx;

            [FieldOffset(2600)] // size = 8
            public void* binding_ctx;

            [FieldOffset(2608)] // size = 8
            public ecs_ctx_free_t ctx_free;

            [FieldOffset(2616)] // size = 8
            public ecs_ctx_free_t binding_ctx_free;

            [FieldOffset(2624)] // size = 8
            public ecs_poly_t* observable;

            [FieldOffset(2632)] // size = 8
            public int* last_event_id;

            [FieldOffset(2640)] // size = 4
            public int term_index;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 272, Pack = 8)]
        public struct ecs_observer_t
        {
            [FieldOffset(0)] // size = 16
            public ecs_header_t hdr;

            [FieldOffset(16)] // size = 88
            public ecs_filter_t filter;

            [FieldOffset(104)] // size = 64
            public fixed byte _events[64]; // ecs_entity_t[8]

            public Span<ecs_entity_t> events
            {
                get
                {
                    fixed (ecs_observer_t* @this = &this)
                    {
                        var pointer = &@this->_events[0];
                        var span = new Span<ecs_entity_t>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(168)] // size = 4
            public int event_count;

            [FieldOffset(176)] // size = 8
            public ecs_iter_action_t callback;

            [FieldOffset(184)] // size = 8
            public ecs_run_action_t run;

            [FieldOffset(192)] // size = 8
            public void* ctx;

            [FieldOffset(200)] // size = 8
            public void* binding_ctx;

            [FieldOffset(208)] // size = 8
            public ecs_ctx_free_t ctx_free;

            [FieldOffset(216)] // size = 8
            public ecs_ctx_free_t binding_ctx_free;

            [FieldOffset(224)] // size = 8
            public ecs_observable_t* observable;

            [FieldOffset(232)] // size = 8
            public int* last_event_id;

            [FieldOffset(240)] // size = 4
            public int last_event_id_storage;

            [FieldOffset(248)] // size = 8
            public ecs_id_t register_id;

            [FieldOffset(256)] // size = 4
            public int term_index;

            [FieldOffset(260)] // size = 1
            public CBool is_monitor;

            [FieldOffset(261)] // size = 1
            public CBool is_multi;

            [FieldOffset(264)] // size = 8
            public ecs_poly_dtor_t dtor;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 128, Pack = 8)]
        public struct ecs_opaque_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 120
            public EcsOpaque type;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 296, Pack = 8)]
        public struct ecs_os_api_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_os_api_init_t init_;

            [FieldOffset(8)] // size = 8
            public ecs_os_api_fini_t fini_;

            [FieldOffset(16)] // size = 8
            public ecs_os_api_malloc_t malloc_;

            [FieldOffset(24)] // size = 8
            public ecs_os_api_realloc_t realloc_;

            [FieldOffset(32)] // size = 8
            public ecs_os_api_calloc_t calloc_;

            [FieldOffset(40)] // size = 8
            public ecs_os_api_free_t free_;

            [FieldOffset(48)] // size = 8
            public ecs_os_api_strdup_t strdup_;

            [FieldOffset(56)] // size = 8
            public ecs_os_api_thread_new_t thread_new_;

            [FieldOffset(64)] // size = 8
            public ecs_os_api_thread_join_t thread_join_;

            [FieldOffset(72)] // size = 8
            public ecs_os_api_thread_self_t thread_self_;

            [FieldOffset(80)] // size = 8
            public ecs_os_api_ainc_t ainc_;

            [FieldOffset(88)] // size = 8
            public ecs_os_api_ainc_t adec_;

            [FieldOffset(96)] // size = 8
            public ecs_os_api_lainc_t lainc_;

            [FieldOffset(104)] // size = 8
            public ecs_os_api_lainc_t ladec_;

            [FieldOffset(112)] // size = 8
            public ecs_os_api_mutex_new_t mutex_new_;

            [FieldOffset(120)] // size = 8
            public ecs_os_api_mutex_free_t mutex_free_;

            [FieldOffset(128)] // size = 8
            public ecs_os_api_mutex_lock_t mutex_lock_;

            [FieldOffset(136)] // size = 8
            public ecs_os_api_mutex_lock_t mutex_unlock_;

            [FieldOffset(144)] // size = 8
            public ecs_os_api_cond_new_t cond_new_;

            [FieldOffset(152)] // size = 8
            public ecs_os_api_cond_free_t cond_free_;

            [FieldOffset(160)] // size = 8
            public ecs_os_api_cond_signal_t cond_signal_;

            [FieldOffset(168)] // size = 8
            public ecs_os_api_cond_broadcast_t cond_broadcast_;

            [FieldOffset(176)] // size = 8
            public ecs_os_api_cond_wait_t cond_wait_;

            [FieldOffset(184)] // size = 8
            public ecs_os_api_sleep_t sleep_;

            [FieldOffset(192)] // size = 8
            public ecs_os_api_now_t now_;

            [FieldOffset(200)] // size = 8
            public ecs_os_api_get_time_t get_time_;

            [FieldOffset(208)] // size = 8
            public ecs_os_api_log_t log_;

            [FieldOffset(216)] // size = 8
            public ecs_os_api_abort_t abort_;

            [FieldOffset(224)] // size = 8
            public ecs_os_api_dlopen_t dlopen_;

            [FieldOffset(232)] // size = 8
            public ecs_os_api_dlproc_t dlproc_;

            [FieldOffset(240)] // size = 8
            public ecs_os_api_dlclose_t dlclose_;

            [FieldOffset(248)] // size = 8
            public ecs_os_api_module_to_path_t module_to_dl_;

            [FieldOffset(256)] // size = 8
            public ecs_os_api_module_to_path_t module_to_etc_;

            [FieldOffset(264)] // size = 4
            public int log_level_;

            [FieldOffset(268)] // size = 4
            public int log_indent_;

            [FieldOffset(272)] // size = 4
            public int log_last_error_;

            [FieldOffset(280)] // size = 8
            public long log_last_timestamp_;

            [FieldOffset(288)] // size = 4
            public ecs_flags32_t flags_;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct ecs_page_iter_t
        {
            [FieldOffset(0)] // size = 4
            public int offset;

            [FieldOffset(4)] // size = 4
            public int limit;

            [FieldOffset(8)] // size = 4
            public int remaining;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct ecs_parse_expr_desc_t
        {
            [FieldOffset(0)] // size = 8
            public CString name;

            [FieldOffset(8)] // size = 8
            public CString expr;

            [FieldOffset(16)] // size = 8
            public FnPtr_Ecs_world_tPtr_CString_VoidPtr_Ecs_entity_t lookup_action;

            [FieldOffset(24)] // size = 8
            public void* lookup_ctx;

            [FieldOffset(32)] // size = 8
            public ecs_vars_t* vars;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 2584, Pack = 8)]
        public struct ecs_pipeline_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 2576
            public ecs_query_desc_t query;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
        public struct ecs_pipeline_stats_t
        {
            [FieldOffset(0)] // size = 1
            public sbyte canary_;

            [FieldOffset(8)] // size = 24
            public ecs_vec_t systems;

            [FieldOffset(32)] // size = 40
            public ecs_map_t system_stats;

            [FieldOffset(72)] // size = 4
            public int t;

            [FieldOffset(76)] // size = 4
            public int system_count;

            [FieldOffset(80)] // size = 4
            public int active_system_count;

            [FieldOffset(84)] // size = 4
            public int rebuild_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_primitive_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 4
            public ecs_primitive_kind_t kind;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 2576, Pack = 8)]
        public struct ecs_query_desc_t
        {
            [FieldOffset(0)] // size = 4
            public int _canary;

            [FieldOffset(8)] // size = 2488
            public ecs_filter_desc_t filter;

            [FieldOffset(2496)] // size = 8
            public ecs_entity_t order_by_component;

            [FieldOffset(2504)] // size = 8
            public ecs_order_by_action_t order_by;

            [FieldOffset(2512)] // size = 8
            public ecs_sort_table_action_t sort_table;

            [FieldOffset(2520)] // size = 8
            public ecs_id_t group_by_id;

            [FieldOffset(2528)] // size = 8
            public ecs_group_by_action_t group_by;

            [FieldOffset(2536)] // size = 8
            public ecs_group_create_action_t on_group_create;

            [FieldOffset(2544)] // size = 8
            public ecs_group_delete_action_t on_group_delete;

            [FieldOffset(2552)] // size = 8
            public void* group_by_ctx;

            [FieldOffset(2560)] // size = 8
            public ecs_ctx_free_t group_by_ctx_free;

            [FieldOffset(2568)] // size = 8
            public ecs_query_t* parent;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_query_group_info_t
        {
            [FieldOffset(0)] // size = 4
            public int match_count;

            [FieldOffset(4)] // size = 4
            public int table_count;

            [FieldOffset(8)] // size = 8
            public void* ctx;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ecs_query_iter_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_query_t* query;

            [FieldOffset(8)] // size = 8
            public ecs_query_table_node_t* node;

            [FieldOffset(16)] // size = 8
            public ecs_query_table_node_t* prev;

            [FieldOffset(24)] // size = 8
            public ecs_query_table_node_t* last;

            [FieldOffset(32)] // size = 4
            public int sparse_smallest;

            [FieldOffset(36)] // size = 4
            public int sparse_first;

            [FieldOffset(40)] // size = 4
            public int bitset_first;

            [FieldOffset(44)] // size = 4
            public int skip_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 3624, Pack = 8)]
        public struct ecs_query_stats_t
        {
            [FieldOffset(0)] // size = 8
            public long first_;

            [FieldOffset(8)] // size = 1200
            public ecs_metric_t matched_table_count;

            [FieldOffset(1208)] // size = 1200
            public ecs_metric_t matched_empty_table_count;

            [FieldOffset(2408)] // size = 1200
            public ecs_metric_t matched_entity_count;

            [FieldOffset(3608)] // size = 8
            public long last_;

            [FieldOffset(3616)] // size = 4
            public int t;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_record_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_id_record_t* idr;

            [FieldOffset(8)] // size = 8
            public ecs_table_t* table;

            [FieldOffset(16)] // size = 4
            public uint row;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_ref_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t id;

            [FieldOffset(16)] // size = 8
            public ecs_table_record_t* tr;

            [FieldOffset(24)] // size = 8
            public ecs_record_t* @record;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
        public struct ecs_rule_iter_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_rule_t* rule;

            [FieldOffset(8)] // size = 8
            public ecs_var_t* vars;

            [FieldOffset(16)] // size = 8
            public ecs_rule_var_t* rule_vars;

            [FieldOffset(24)] // size = 8
            public ecs_rule_op_t* ops;

            [FieldOffset(32)] // size = 8
            public ecs_rule_op_ctx_t* op_ctx;

            [FieldOffset(40)] // size = 8
            public ulong* written;

            [FieldOffset(48)] // size = 8
            public ecs_rule_op_profile_t* profile;

            [FieldOffset(56)] // size = 1
            public CBool redo;

            [FieldOffset(58)] // size = 2
            public short op;

            [FieldOffset(60)] // size = 2
            public short sp;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct ecs_rule_op_profile_t
        {
            [FieldOffset(0)] // size = 8
            public fixed byte _count[8]; // int32_t[2]

            public Span<int> count
            {
                get
                {
                    fixed (ecs_rule_op_profile_t* @this = &this)
                    {
                        var pointer = &@this->_count[0];
                        var span = new Span<int>(pointer, 2);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_script_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 8
            public CString filename;

            [FieldOffset(16)] // size = 8
            public CString str;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_serializer_t
        {
            [FieldOffset(0)] // size = 8
            public FnPtr_Ecs_serializer_tPtr_Ecs_entity_t_VoidPtr_Int value;

            [FieldOffset(8)] // size = 8
            public FnPtr_Ecs_serializer_tPtr_CString_Int member;

            [FieldOffset(16)] // size = 8
            public ecs_world_t* world;

            [FieldOffset(24)] // size = 8
            public void* ctx;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 120, Pack = 8)]
        public struct ecs_snapshot_iter_t
        {
            [FieldOffset(0)] // size = 88
            public ecs_filter_t filter;

            [FieldOffset(88)] // size = 24
            public ecs_vec_t tables;

            [FieldOffset(112)] // size = 4
            public int index;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
        public struct ecs_sparse_t
        {
            [FieldOffset(0)] // size = 24
            public ecs_vec_t dense;

            [FieldOffset(24)] // size = 24
            public ecs_vec_t pages;

            [FieldOffset(48)] // size = 4
            public ecs_size_t size;

            [FieldOffset(52)] // size = 4
            public int count;

            [FieldOffset(56)] // size = 8
            public ulong max_id_local;

            [FieldOffset(64)] // size = 8
            public ulong* max_id;

            [FieldOffset(72)] // size = 8
            public ecs_allocator_t* allocator;

            [FieldOffset(80)] // size = 8
            public ecs_block_allocator_t* page_allocator;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_stack_cursor_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_stack_page_t* cur;

            [FieldOffset(8)] // size = 2
            public short sp;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_strbuf_element
        {
            [FieldOffset(0)] // size = 1
            public CBool buffer_embedded;

            [FieldOffset(4)] // size = 4
            public int pos;

            [FieldOffset(8)] // size = 8
            public CString buf;

            [FieldOffset(16)] // size = 8
            public ecs_strbuf_element* next;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 536, Pack = 8)]
        public struct ecs_strbuf_element_embedded
        {
            [FieldOffset(0)] // size = 24
            public ecs_strbuf_element super;

            [FieldOffset(24)] // size = 512
            public fixed byte _buf[512]; // char[512]

            public string buf
            {
                get
                {
                    fixed (ecs_strbuf_element_embedded* @this = &this)
                    {
                        var pointer = &@this->_buf[0];
                        var cString = new CString(pointer);
                        return Runtime.CString.ToString(cString);
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_strbuf_element_str
        {
            [FieldOffset(0)] // size = 24
            public ecs_strbuf_element super;

            [FieldOffset(24)] // size = 8
            public CString alloc_str;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_strbuf_list_elem
        {
            [FieldOffset(0)] // size = 4
            public int count;

            [FieldOffset(8)] // size = 8
            public CString separator;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 1104, Pack = 8)]
        public struct ecs_strbuf_t
        {
            [FieldOffset(0)] // size = 8
            public CString buf;

            [FieldOffset(8)] // size = 4
            public int max;

            [FieldOffset(12)] // size = 4
            public int size;

            [FieldOffset(16)] // size = 4
            public int elementCount;

            [FieldOffset(24)] // size = 536
            public ecs_strbuf_element_embedded firstElement;

            [FieldOffset(560)] // size = 8
            public ecs_strbuf_element* current;

            [FieldOffset(568)] // size = 512
            public fixed byte _list_stack[512]; // ecs_strbuf_list_elem[32]

            public Span<ecs_strbuf_list_elem> list_stack
            {
                get
                {
                    fixed (ecs_strbuf_t* @this = &this)
                    {
                        var pointer = &@this->_list_stack[0];
                        var span = new Span<ecs_strbuf_list_elem>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(1080)] // size = 4
            public int list_sp;

            [FieldOffset(1088)] // size = 8
            public CString content;

            [FieldOffset(1096)] // size = 4
            public int length;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 1544, Pack = 8)]
        public struct ecs_struct_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 1536
            public fixed byte _members[1536]; // ecs_member_t[32]

            public Span<ecs_member_t> members
            {
                get
                {
                    fixed (ecs_struct_desc_t* @this = &this)
                    {
                        var pointer = &@this->_members[0];
                        var span = new Span<ecs_member_t>(pointer, 32);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 2664, Pack = 8)]
        public struct ecs_system_desc_t
        {
            [FieldOffset(0)] // size = 4
            public int _canary;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(16)] // size = 2576
            public ecs_query_desc_t query;

            [FieldOffset(2592)] // size = 8
            public ecs_run_action_t run;

            [FieldOffset(2600)] // size = 8
            public ecs_iter_action_t callback;

            [FieldOffset(2608)] // size = 8
            public void* ctx;

            [FieldOffset(2616)] // size = 8
            public void* binding_ctx;

            [FieldOffset(2624)] // size = 8
            public ecs_ctx_free_t ctx_free;

            [FieldOffset(2632)] // size = 8
            public ecs_ctx_free_t binding_ctx_free;

            [FieldOffset(2640)] // size = 4
            public float interval;

            [FieldOffset(2644)] // size = 4
            public int rate;

            [FieldOffset(2648)] // size = 8
            public ecs_entity_t tick_source;

            [FieldOffset(2656)] // size = 1
            public CBool multi_threaded;

            [FieldOffset(2657)] // size = 1
            public CBool no_readonly;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8448, Pack = 8)]
        public struct ecs_system_stats_t
        {
            [FieldOffset(0)] // size = 8
            public long first_;

            [FieldOffset(8)] // size = 1200
            public ecs_metric_t time_spent;

            [FieldOffset(1208)] // size = 1200
            public ecs_metric_t invoke_count;

            [FieldOffset(2408)] // size = 1200
            public ecs_metric_t active;

            [FieldOffset(3608)] // size = 1200
            public ecs_metric_t enabled;

            [FieldOffset(4808)] // size = 8
            public long last_;

            [FieldOffset(4816)] // size = 1
            public CBool task;

            [FieldOffset(4824)] // size = 3624
            public ecs_query_stats_t query;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_table_cache_iter_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_table_cache_hdr_t* cur;

            [FieldOffset(8)] // size = 8
            public ecs_table_cache_hdr_t* next;

            [FieldOffset(16)] // size = 8
            public ecs_table_cache_hdr_t* next_list;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_table_range_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_table_t* table;

            [FieldOffset(8)] // size = 4
            public int offset;

            [FieldOffset(12)] // size = 4
            public int count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_term_id_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t id;

            [FieldOffset(8)] // size = 8
            public CString name;

            [FieldOffset(16)] // size = 8
            public ecs_entity_t trav;

            [FieldOffset(24)] // size = 4
            public ecs_flags32_t flags;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 272, Pack = 8)]
        public struct ecs_term_iter_t
        {
            [FieldOffset(0)] // size = 152
            public ecs_term_t term;

            [FieldOffset(152)] // size = 8
            public ecs_id_record_t* self_index;

            [FieldOffset(160)] // size = 8
            public ecs_id_record_t* set_index;

            [FieldOffset(168)] // size = 8
            public ecs_id_record_t* cur;

            [FieldOffset(176)] // size = 24
            public ecs_table_cache_iter_t it;

            [FieldOffset(200)] // size = 4
            public int index;

            [FieldOffset(204)] // size = 4
            public int observed_table_count;

            [FieldOffset(208)] // size = 8
            public ecs_table_t* table;

            [FieldOffset(216)] // size = 4
            public int cur_match;

            [FieldOffset(220)] // size = 4
            public int match_count;

            [FieldOffset(224)] // size = 4
            public int last_column;

            [FieldOffset(228)] // size = 1
            public CBool empty_tables;

            [FieldOffset(232)] // size = 8
            public ecs_id_t id;

            [FieldOffset(240)] // size = 4
            public int column;

            [FieldOffset(248)] // size = 8
            public ecs_entity_t subject;

            [FieldOffset(256)] // size = 4
            public ecs_size_t size;

            [FieldOffset(264)] // size = 8
            public void* ptr;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 152, Pack = 8)]
        public struct ecs_term_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_id_t id;

            [FieldOffset(8)] // size = 32
            public ecs_term_id_t src;

            [FieldOffset(40)] // size = 32
            public ecs_term_id_t first;

            [FieldOffset(72)] // size = 32
            public ecs_term_id_t second;

            [FieldOffset(104)] // size = 4
            public ecs_inout_kind_t inout;

            [FieldOffset(108)] // size = 4
            public ecs_oper_kind_t oper;

            [FieldOffset(112)] // size = 8
            public ecs_id_t id_flags;

            [FieldOffset(120)] // size = 8
            public CString name;

            [FieldOffset(128)] // size = 4
            public int field_index;

            [FieldOffset(136)] // size = 8
            public ecs_id_record_t* idr;

            [FieldOffset(144)] // size = 2
            public ecs_flags16_t flags;

            [FieldOffset(146)] // size = 1
            public CBool move;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct ecs_time_t
        {
            [FieldOffset(0)] // size = 4
            public uint sec;

            [FieldOffset(4)] // size = 4
            public uint nanosec;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 120, Pack = 8)]
        public struct ecs_type_hooks_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_xtor_t ctor;

            [FieldOffset(8)] // size = 8
            public ecs_xtor_t dtor;

            [FieldOffset(16)] // size = 8
            public ecs_copy_t copy;

            [FieldOffset(24)] // size = 8
            public ecs_move_t move;

            [FieldOffset(32)] // size = 8
            public ecs_copy_t copy_ctor;

            [FieldOffset(40)] // size = 8
            public ecs_move_t move_ctor;

            [FieldOffset(48)] // size = 8
            public ecs_move_t ctor_move_dtor;

            [FieldOffset(56)] // size = 8
            public ecs_move_t move_dtor;

            [FieldOffset(64)] // size = 8
            public ecs_iter_action_t on_add;

            [FieldOffset(72)] // size = 8
            public ecs_iter_action_t on_set;

            [FieldOffset(80)] // size = 8
            public ecs_iter_action_t on_remove;

            [FieldOffset(88)] // size = 8
            public void* ctx;

            [FieldOffset(96)] // size = 8
            public void* binding_ctx;

            [FieldOffset(104)] // size = 8
            public ecs_ctx_free_t ctx_free;

            [FieldOffset(112)] // size = 8
            public ecs_ctx_free_t binding_ctx_free;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 144, Pack = 8)]
        public struct ecs_type_info_t
        {
            [FieldOffset(0)] // size = 4
            public ecs_size_t size;

            [FieldOffset(4)] // size = 4
            public ecs_size_t alignment;

            [FieldOffset(8)] // size = 120
            public ecs_type_hooks_t hooks;

            [FieldOffset(128)] // size = 8
            public ecs_entity_t component;

            [FieldOffset(136)] // size = 8
            public CString name;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_type_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_id_t* array;

            [FieldOffset(8)] // size = 4
            public int count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct ecs_unit_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 8
            public CString symbol;

            [FieldOffset(16)] // size = 8
            public ecs_entity_t quantity;

            [FieldOffset(24)] // size = 8
            public ecs_entity_t @base;

            [FieldOffset(32)] // size = 8
            public ecs_entity_t over;

            [FieldOffset(40)] // size = 8
            public ecs_unit_translation_t translation;

            [FieldOffset(48)] // size = 8
            public ecs_entity_t prefix;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_unit_prefix_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 8
            public CString symbol;

            [FieldOffset(16)] // size = 8
            public ecs_unit_translation_t translation;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct ecs_unit_translation_t
        {
            [FieldOffset(0)] // size = 4
            public int factor;

            [FieldOffset(4)] // size = 4
            public int power;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_value_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t type;

            [FieldOffset(8)] // size = 8
            public void* ptr;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_var_t
        {
            [FieldOffset(0)] // size = 16
            public ecs_table_range_t range;

            [FieldOffset(16)] // size = 8
            public ecs_entity_t entity;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 168, Pack = 8)]
        public struct ecs_vars_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_world_t* world;

            [FieldOffset(8)] // size = 152
            public ecs_expr_var_scope_t root;

            [FieldOffset(160)] // size = 8
            public ecs_expr_var_scope_t* cur;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_vec_t
        {
            [FieldOffset(0)] // size = 8
            public void* array;

            [FieldOffset(8)] // size = 4
            public int count;

            [FieldOffset(12)] // size = 4
            public int size;

            [FieldOffset(16)] // size = 4
            public ecs_size_t elem_size;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_vector_desc_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t type;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct ecs_worker_iter_t
        {
            [FieldOffset(0)] // size = 4
            public int index;

            [FieldOffset(4)] // size = 4
            public int count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 304, Pack = 8)]
        public struct ecs_world_info_t
        {
            [FieldOffset(0)] // size = 8
            public ecs_entity_t last_component_id;

            [FieldOffset(8)] // size = 8
            public ecs_entity_t last_id;

            [FieldOffset(16)] // size = 8
            public ecs_entity_t min_id;

            [FieldOffset(24)] // size = 8
            public ecs_entity_t max_id;

            [FieldOffset(32)] // size = 4
            public float delta_time_raw;

            [FieldOffset(36)] // size = 4
            public float delta_time;

            [FieldOffset(40)] // size = 4
            public float time_scale;

            [FieldOffset(44)] // size = 4
            public float target_fps;

            [FieldOffset(48)] // size = 4
            public float frame_time_total;

            [FieldOffset(52)] // size = 4
            public float system_time_total;

            [FieldOffset(56)] // size = 4
            public float emit_time_total;

            [FieldOffset(60)] // size = 4
            public float merge_time_total;

            [FieldOffset(64)] // size = 4
            public float world_time_total;

            [FieldOffset(68)] // size = 4
            public float world_time_total_raw;

            [FieldOffset(72)] // size = 4
            public float rematch_time_total;

            [FieldOffset(80)] // size = 8
            public long frame_count_total;

            [FieldOffset(88)] // size = 8
            public long merge_count_total;

            [FieldOffset(96)] // size = 8
            public long rematch_count_total;

            [FieldOffset(104)] // size = 8
            public long id_create_total;

            [FieldOffset(112)] // size = 8
            public long id_delete_total;

            [FieldOffset(120)] // size = 8
            public long table_create_total;

            [FieldOffset(128)] // size = 8
            public long table_delete_total;

            [FieldOffset(136)] // size = 8
            public long pipeline_build_count_total;

            [FieldOffset(144)] // size = 8
            public long systems_ran_frame;

            [FieldOffset(152)] // size = 8
            public long observers_ran_frame;

            [FieldOffset(160)] // size = 4
            public int id_count;

            [FieldOffset(164)] // size = 4
            public int tag_id_count;

            [FieldOffset(168)] // size = 4
            public int component_id_count;

            [FieldOffset(172)] // size = 4
            public int pair_id_count;

            [FieldOffset(176)] // size = 4
            public int wildcard_id_count;

            [FieldOffset(180)] // size = 4
            public int table_count;

            [FieldOffset(184)] // size = 4
            public int tag_table_count;

            [FieldOffset(188)] // size = 4
            public int trivial_table_count;

            [FieldOffset(192)] // size = 4
            public int empty_table_count;

            [FieldOffset(196)] // size = 4
            public int table_record_count;

            [FieldOffset(200)] // size = 4
            public int table_storage_count;

            [FieldOffset(208)] // size = 88
            public ecs_world_info_t_ANONYMOUS_FIELD36 cmd;

            [FieldOffset(296)] // size = 8
            public CString name_prefix;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
        public struct ecs_world_info_t_ANONYMOUS_FIELD36
        {
            [FieldOffset(0)] // size = 8
            public long add_count;

            [FieldOffset(8)] // size = 8
            public long remove_count;

            [FieldOffset(16)] // size = 8
            public long delete_count;

            [FieldOffset(24)] // size = 8
            public long clear_count;

            [FieldOffset(32)] // size = 8
            public long set_count;

            [FieldOffset(40)] // size = 8
            public long get_mut_count;

            [FieldOffset(48)] // size = 8
            public long modified_count;

            [FieldOffset(56)] // size = 8
            public long other_count;

            [FieldOffset(64)] // size = 8
            public long discard_count;

            [FieldOffset(72)] // size = 8
            public long batched_entity_count;

            [FieldOffset(80)] // size = 8
            public long batched_command_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 96024, Pack = 8)]
        public struct ecs_world_stats_t
        {
            [FieldOffset(0)] // size = 8
            public long first_;

            [FieldOffset(8)] // size = 2400
            public ecs_world_stats_t_ANONYMOUS_FIELD1 entities;

            [FieldOffset(2408)] // size = 9600
            public ecs_world_stats_t_ANONYMOUS_FIELD2 ids;

            [FieldOffset(12008)] // size = 9600
            public ecs_world_stats_t_ANONYMOUS_FIELD3 tables;

            [FieldOffset(21608)] // size = 3600
            public ecs_world_stats_t_ANONYMOUS_FIELD4 queries;

            [FieldOffset(25208)] // size = 13200
            public ecs_world_stats_t_ANONYMOUS_FIELD5 commands;

            [FieldOffset(38408)] // size = 8400
            public ecs_world_stats_t_ANONYMOUS_FIELD6 frame;

            [FieldOffset(46808)] // size = 10800
            public ecs_world_stats_t_ANONYMOUS_FIELD7 performance;

            [FieldOffset(57608)] // size = 12000
            public ecs_world_stats_t_ANONYMOUS_FIELD8 memory;

            [FieldOffset(69608)] // size = 15600
            public ecs_world_stats_t_ANONYMOUS_FIELD9 rest;

            [FieldOffset(85208)] // size = 10800
            public ecs_world_stats_t_ANONYMOUS_FIELD10 http;

            [FieldOffset(96008)] // size = 8
            public long last_;

            [FieldOffset(96016)] // size = 4
            public int t;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 2400, Pack = 8)]
        public struct ecs_world_stats_t_ANONYMOUS_FIELD1
        {
            [FieldOffset(0)] // size = 1200
            public ecs_metric_t count;

            [FieldOffset(1200)] // size = 1200
            public ecs_metric_t not_alive_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 10800, Pack = 8)]
        public struct ecs_world_stats_t_ANONYMOUS_FIELD10
        {
            [FieldOffset(0)] // size = 1200
            public ecs_metric_t request_received_count;

            [FieldOffset(1200)] // size = 1200
            public ecs_metric_t request_invalid_count;

            [FieldOffset(2400)] // size = 1200
            public ecs_metric_t request_handled_ok_count;

            [FieldOffset(3600)] // size = 1200
            public ecs_metric_t request_handled_error_count;

            [FieldOffset(4800)] // size = 1200
            public ecs_metric_t request_not_handled_count;

            [FieldOffset(6000)] // size = 1200
            public ecs_metric_t request_preflight_count;

            [FieldOffset(7200)] // size = 1200
            public ecs_metric_t send_ok_count;

            [FieldOffset(8400)] // size = 1200
            public ecs_metric_t send_error_count;

            [FieldOffset(9600)] // size = 1200
            public ecs_metric_t busy_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 9600, Pack = 8)]
        public struct ecs_world_stats_t_ANONYMOUS_FIELD2
        {
            [FieldOffset(0)] // size = 1200
            public ecs_metric_t count;

            [FieldOffset(1200)] // size = 1200
            public ecs_metric_t tag_count;

            [FieldOffset(2400)] // size = 1200
            public ecs_metric_t component_count;

            [FieldOffset(3600)] // size = 1200
            public ecs_metric_t pair_count;

            [FieldOffset(4800)] // size = 1200
            public ecs_metric_t wildcard_count;

            [FieldOffset(6000)] // size = 1200
            public ecs_metric_t type_count;

            [FieldOffset(7200)] // size = 1200
            public ecs_metric_t create_count;

            [FieldOffset(8400)] // size = 1200
            public ecs_metric_t delete_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 9600, Pack = 8)]
        public struct ecs_world_stats_t_ANONYMOUS_FIELD3
        {
            [FieldOffset(0)] // size = 1200
            public ecs_metric_t count;

            [FieldOffset(1200)] // size = 1200
            public ecs_metric_t empty_count;

            [FieldOffset(2400)] // size = 1200
            public ecs_metric_t tag_only_count;

            [FieldOffset(3600)] // size = 1200
            public ecs_metric_t trivial_only_count;

            [FieldOffset(4800)] // size = 1200
            public ecs_metric_t record_count;

            [FieldOffset(6000)] // size = 1200
            public ecs_metric_t storage_count;

            [FieldOffset(7200)] // size = 1200
            public ecs_metric_t create_count;

            [FieldOffset(8400)] // size = 1200
            public ecs_metric_t delete_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 3600, Pack = 8)]
        public struct ecs_world_stats_t_ANONYMOUS_FIELD4
        {
            [FieldOffset(0)] // size = 1200
            public ecs_metric_t query_count;

            [FieldOffset(1200)] // size = 1200
            public ecs_metric_t observer_count;

            [FieldOffset(2400)] // size = 1200
            public ecs_metric_t system_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 13200, Pack = 8)]
        public struct ecs_world_stats_t_ANONYMOUS_FIELD5
        {
            [FieldOffset(0)] // size = 1200
            public ecs_metric_t add_count;

            [FieldOffset(1200)] // size = 1200
            public ecs_metric_t remove_count;

            [FieldOffset(2400)] // size = 1200
            public ecs_metric_t delete_count;

            [FieldOffset(3600)] // size = 1200
            public ecs_metric_t clear_count;

            [FieldOffset(4800)] // size = 1200
            public ecs_metric_t set_count;

            [FieldOffset(6000)] // size = 1200
            public ecs_metric_t get_mut_count;

            [FieldOffset(7200)] // size = 1200
            public ecs_metric_t modified_count;

            [FieldOffset(8400)] // size = 1200
            public ecs_metric_t other_count;

            [FieldOffset(9600)] // size = 1200
            public ecs_metric_t discard_count;

            [FieldOffset(10800)] // size = 1200
            public ecs_metric_t batched_entity_count;

            [FieldOffset(12000)] // size = 1200
            public ecs_metric_t batched_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8400, Pack = 8)]
        public struct ecs_world_stats_t_ANONYMOUS_FIELD6
        {
            [FieldOffset(0)] // size = 1200
            public ecs_metric_t frame_count;

            [FieldOffset(1200)] // size = 1200
            public ecs_metric_t merge_count;

            [FieldOffset(2400)] // size = 1200
            public ecs_metric_t rematch_count;

            [FieldOffset(3600)] // size = 1200
            public ecs_metric_t pipeline_build_count;

            [FieldOffset(4800)] // size = 1200
            public ecs_metric_t systems_ran;

            [FieldOffset(6000)] // size = 1200
            public ecs_metric_t observers_ran;

            [FieldOffset(7200)] // size = 1200
            public ecs_metric_t event_emit_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 10800, Pack = 8)]
        public struct ecs_world_stats_t_ANONYMOUS_FIELD7
        {
            [FieldOffset(0)] // size = 1200
            public ecs_metric_t world_time_raw;

            [FieldOffset(1200)] // size = 1200
            public ecs_metric_t world_time;

            [FieldOffset(2400)] // size = 1200
            public ecs_metric_t frame_time;

            [FieldOffset(3600)] // size = 1200
            public ecs_metric_t system_time;

            [FieldOffset(4800)] // size = 1200
            public ecs_metric_t emit_time;

            [FieldOffset(6000)] // size = 1200
            public ecs_metric_t merge_time;

            [FieldOffset(7200)] // size = 1200
            public ecs_metric_t rematch_time;

            [FieldOffset(8400)] // size = 1200
            public ecs_metric_t fps;

            [FieldOffset(9600)] // size = 1200
            public ecs_metric_t delta_time;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 12000, Pack = 8)]
        public struct ecs_world_stats_t_ANONYMOUS_FIELD8
        {
            [FieldOffset(0)] // size = 1200
            public ecs_metric_t alloc_count;

            [FieldOffset(1200)] // size = 1200
            public ecs_metric_t realloc_count;

            [FieldOffset(2400)] // size = 1200
            public ecs_metric_t free_count;

            [FieldOffset(3600)] // size = 1200
            public ecs_metric_t outstanding_alloc_count;

            [FieldOffset(4800)] // size = 1200
            public ecs_metric_t block_alloc_count;

            [FieldOffset(6000)] // size = 1200
            public ecs_metric_t block_free_count;

            [FieldOffset(7200)] // size = 1200
            public ecs_metric_t block_outstanding_alloc_count;

            [FieldOffset(8400)] // size = 1200
            public ecs_metric_t stack_alloc_count;

            [FieldOffset(9600)] // size = 1200
            public ecs_metric_t stack_free_count;

            [FieldOffset(10800)] // size = 1200
            public ecs_metric_t stack_outstanding_alloc_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 15600, Pack = 8)]
        public struct ecs_world_stats_t_ANONYMOUS_FIELD9
        {
            [FieldOffset(0)] // size = 1200
            public ecs_metric_t request_count;

            [FieldOffset(1200)] // size = 1200
            public ecs_metric_t entity_count;

            [FieldOffset(2400)] // size = 1200
            public ecs_metric_t entity_error_count;

            [FieldOffset(3600)] // size = 1200
            public ecs_metric_t query_count;

            [FieldOffset(4800)] // size = 1200
            public ecs_metric_t query_error_count;

            [FieldOffset(6000)] // size = 1200
            public ecs_metric_t query_name_count;

            [FieldOffset(7200)] // size = 1200
            public ecs_metric_t query_name_error_count;

            [FieldOffset(8400)] // size = 1200
            public ecs_metric_t query_name_from_cache_count;

            [FieldOffset(9600)] // size = 1200
            public ecs_metric_t enable_count;

            [FieldOffset(10800)] // size = 1200
            public ecs_metric_t enable_error_count;

            [FieldOffset(12000)] // size = 1200
            public ecs_metric_t world_stats_count;

            [FieldOffset(13200)] // size = 1200
            public ecs_metric_t pipeline_stats_count;

            [FieldOffset(14400)] // size = 1200
            public ecs_metric_t stats_error_count;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 1)]
        public struct ecs_world_to_json_desc_t
        {
            [FieldOffset(0)] // size = 1
            public CBool serialize_builtin;

            [FieldOffset(1)] // size = 1
            public CBool serialize_modules;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct flecs_hashmap_iter_t
        {
            [FieldOffset(0)] // size = 32
            public ecs_map_iter_t it;

            [FieldOffset(32)] // size = 8
            public ecs_hm_bucket_t* bucket;

            [FieldOffset(40)] // size = 4
            public int index;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct flecs_hashmap_result_t
        {
            [FieldOffset(0)] // size = 8
            public void* key;

            [FieldOffset(8)] // size = 8
            public void* value;

            [FieldOffset(16)] // size = 8
            public ulong hash;
        }

        [CNode(Kind = "Enum")]
        public enum ecs_http_method_t : int
        {
            EcsHttpGet = 0,
            EcsHttpPost = 1,
            EcsHttpPut = 2,
            EcsHttpDelete = 3,
            EcsHttpOptions = 4,
            EcsHttpMethodUnsupported = 5
        }

        [CNode(Kind = "Enum")]
        public enum ecs_inout_kind_t : int
        {
            EcsInOutDefault = 0,
            EcsInOutNone = 1,
            EcsInOut = 2,
            EcsIn = 3,
            EcsOut = 4
        }

        [CNode(Kind = "Enum")]
        public enum ecs_iter_kind_t : int
        {
            EcsIterEvalCondition = 0,
            EcsIterEvalTables = 1,
            EcsIterEvalChain = 2,
            EcsIterEvalNone = 3
        }

        [CNode(Kind = "Enum")]
        public enum ecs_meta_type_op_kind_t : int
        {
            EcsOpArray = 0,
            EcsOpVector = 1,
            EcsOpOpaque = 2,
            EcsOpPush = 3,
            EcsOpPop = 4,
            EcsOpScope = 5,
            EcsOpEnum = 6,
            EcsOpBitmask = 7,
            EcsOpPrimitive = 8,
            EcsOpBool = 9,
            EcsOpChar = 10,
            EcsOpByte = 11,
            EcsOpU8 = 12,
            EcsOpU16 = 13,
            EcsOpU32 = 14,
            EcsOpU64 = 15,
            EcsOpI8 = 16,
            EcsOpI16 = 17,
            EcsOpI32 = 18,
            EcsOpI64 = 19,
            EcsOpF32 = 20,
            EcsOpF64 = 21,
            EcsOpUPtr = 22,
            EcsOpIPtr = 23,
            EcsOpString = 24,
            EcsOpEntity = 25,
            EcsMetaTypeOpKindLast = 25
        }

        [CNode(Kind = "Enum")]
        public enum ecs_oper_kind_t : int
        {
            EcsAnd = 0,
            EcsOr = 1,
            EcsNot = 2,
            EcsOptional = 3,
            EcsAndFrom = 4,
            EcsOrFrom = 5,
            EcsNotFrom = 6
        }

        [CNode(Kind = "Enum")]
        public enum ecs_primitive_kind_t : int
        {
            EcsBool = 1,
            EcsChar = 2,
            EcsByte = 3,
            EcsU8 = 4,
            EcsU16 = 5,
            EcsU32 = 6,
            EcsU64 = 7,
            EcsI8 = 8,
            EcsI16 = 9,
            EcsI32 = 10,
            EcsI64 = 11,
            EcsF32 = 12,
            EcsF64 = 13,
            EcsUPtr = 14,
            EcsIPtr = 15,
            EcsString = 16,
            EcsEntity = 17,
            EcsPrimitiveKindLast = 17
        }

        [CNode(Kind = "Enum")]
        public enum ecs_type_kind_t : int
        {
            EcsPrimitiveType = 0,
            EcsBitmaskType = 1,
            EcsEnumType = 2,
            EcsStructType = 3,
            EcsArrayType = 4,
            EcsVectorType = 5,
            EcsOpaqueType = 6,
            EcsTypeKindLast = 6
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_event_id_record_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_http_server_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_id_record_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_mixins_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_poly_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_query_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_query_table_node_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_rule_op_ctx_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_rule_op_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_rule_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_rule_var_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_snapshot_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_stack_page_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_table_cache_hdr_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_table_record_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_table_t
        {
        }


        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_world_t
        {
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_app_frame_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_world_tPtr_Ecs_app_desc_tPtr_Int Data;

            public static implicit operator FnPtr_Ecs_world_tPtr_Ecs_app_desc_tPtr_Int(ecs_app_frame_action_t data) => data.Data;
            public static implicit operator ecs_app_frame_action_t(FnPtr_Ecs_world_tPtr_Ecs_app_desc_tPtr_Int data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_app_init_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_world_tPtr_Int Data;

            public static implicit operator FnPtr_Ecs_world_tPtr_Int(ecs_app_init_action_t data) => data.Data;
            public static implicit operator ecs_app_init_action_t(FnPtr_Ecs_world_tPtr_Int data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_app_run_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_world_tPtr_Ecs_app_desc_tPtr_Int Data;

            public static implicit operator FnPtr_Ecs_world_tPtr_Ecs_app_desc_tPtr_Int(ecs_app_run_action_t data) => data.Data;
            public static implicit operator ecs_app_run_action_t(FnPtr_Ecs_world_tPtr_Ecs_app_desc_tPtr_Int data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_compare_action_t
        {
            [FieldOffset(0)]
            public FnPtr_VoidPtr_VoidPtr_Int Data;

            public static implicit operator FnPtr_VoidPtr_VoidPtr_Int(ecs_compare_action_t data) => data.Data;
            public static implicit operator ecs_compare_action_t(FnPtr_VoidPtr_VoidPtr_Int data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_copy_t
        {
            [FieldOffset(0)]
            public FnPtr_VoidPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void Data;

            public static implicit operator FnPtr_VoidPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void(ecs_copy_t data) => data.Data;
            public static implicit operator ecs_copy_t(FnPtr_VoidPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_ctx_free_t
        {
            [FieldOffset(0)]
            public FnPtr_VoidPtr_Void Data;

            public static implicit operator FnPtr_VoidPtr_Void(ecs_ctx_free_t data) => data.Data;
            public static implicit operator ecs_ctx_free_t(FnPtr_VoidPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_entity_t
        {
            [FieldOffset(0)]
            public ecs_id_t Data;

            public static implicit operator ecs_id_t(ecs_entity_t data) => data.Data;
            public static implicit operator ecs_entity_t(ecs_id_t data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_fini_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_world_tPtr_VoidPtr_Void Data;

            public static implicit operator FnPtr_Ecs_world_tPtr_VoidPtr_Void(ecs_fini_action_t data) => data.Data;
            public static implicit operator ecs_fini_action_t(FnPtr_Ecs_world_tPtr_VoidPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 2)]
        public struct ecs_flags16_t
        {
            [FieldOffset(0)]
            public ushort Data;

            public static implicit operator ushort(ecs_flags16_t data) => data.Data;
            public static implicit operator ecs_flags16_t(ushort data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ecs_flags32_t
        {
            [FieldOffset(0)]
            public uint Data;

            public static implicit operator uint(ecs_flags32_t data) => data.Data;
            public static implicit operator ecs_flags32_t(uint data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_flags64_t
        {
            [FieldOffset(0)]
            public ulong Data;

            public static implicit operator ulong(ecs_flags64_t data) => data.Data;
            public static implicit operator ecs_flags64_t(ulong data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 1, Pack = 1)]
        public struct ecs_flags8_t
        {
            [FieldOffset(0)]
            public byte Data;

            public static implicit operator byte(ecs_flags8_t data) => data.Data;
            public static implicit operator ecs_flags8_t(byte data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_group_by_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_world_tPtr_Ecs_table_tPtr_Ecs_id_t_VoidPtr_Ulong Data;

            public static implicit operator FnPtr_Ecs_world_tPtr_Ecs_table_tPtr_Ecs_id_t_VoidPtr_Ulong(ecs_group_by_action_t data) => data.Data;
            public static implicit operator ecs_group_by_action_t(FnPtr_Ecs_world_tPtr_Ecs_table_tPtr_Ecs_id_t_VoidPtr_Ulong data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_group_create_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_world_tPtr_Ulong_VoidPtr_VoidPtr Data;

            public static implicit operator FnPtr_Ecs_world_tPtr_Ulong_VoidPtr_VoidPtr(ecs_group_create_action_t data) => data.Data;
            public static implicit operator ecs_group_create_action_t(FnPtr_Ecs_world_tPtr_Ulong_VoidPtr_VoidPtr data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_group_delete_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_world_tPtr_Ulong_VoidPtr_VoidPtr_Void Data;

            public static implicit operator FnPtr_Ecs_world_tPtr_Ulong_VoidPtr_VoidPtr_Void(ecs_group_delete_action_t data) => data.Data;
            public static implicit operator ecs_group_delete_action_t(FnPtr_Ecs_world_tPtr_Ulong_VoidPtr_VoidPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_hash_value_action_t
        {
            [FieldOffset(0)]
            public FnPtr_VoidPtr_Ulong Data;

            public static implicit operator FnPtr_VoidPtr_Ulong(ecs_hash_value_action_t data) => data.Data;
            public static implicit operator ecs_hash_value_action_t(FnPtr_VoidPtr_Ulong data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_http_reply_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_http_request_tPtr_Ecs_http_reply_tPtr_VoidPtr_CBool Data;

            public static implicit operator FnPtr_Ecs_http_request_tPtr_Ecs_http_reply_tPtr_VoidPtr_CBool(ecs_http_reply_action_t data) => data.Data;
            public static implicit operator ecs_http_reply_action_t(FnPtr_Ecs_http_request_tPtr_Ecs_http_reply_tPtr_VoidPtr_CBool data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_id_t
        {
            [FieldOffset(0)]
            public ulong Data;

            public static implicit operator ulong(ecs_id_t data) => data.Data;
            public static implicit operator ecs_id_t(ulong data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_iter_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_iter_tPtr_Void Data;

            public static implicit operator FnPtr_Ecs_iter_tPtr_Void(ecs_iter_action_t data) => data.Data;
            public static implicit operator ecs_iter_action_t(FnPtr_Ecs_iter_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_iter_fini_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_iter_tPtr_Void Data;

            public static implicit operator FnPtr_Ecs_iter_tPtr_Void(ecs_iter_fini_action_t data) => data.Data;
            public static implicit operator ecs_iter_fini_action_t(FnPtr_Ecs_iter_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_iter_init_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_world_tPtr_Ecs_poly_tPtr_Ecs_iter_tPtr_Ecs_term_tPtr_Void Data;

            public static implicit operator FnPtr_Ecs_world_tPtr_Ecs_poly_tPtr_Ecs_iter_tPtr_Ecs_term_tPtr_Void(ecs_iter_init_action_t data) => data.Data;
            public static implicit operator ecs_iter_init_action_t(FnPtr_Ecs_world_tPtr_Ecs_poly_tPtr_Ecs_iter_tPtr_Ecs_term_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_iter_next_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_iter_tPtr_CBool Data;

            public static implicit operator FnPtr_Ecs_iter_tPtr_CBool(ecs_iter_next_action_t data) => data.Data;
            public static implicit operator ecs_iter_next_action_t(FnPtr_Ecs_iter_tPtr_CBool data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_map_data_t
        {
            [FieldOffset(0)]
            public ulong Data;

            public static implicit operator ulong(ecs_map_data_t data) => data.Data;
            public static implicit operator ecs_map_data_t(ulong data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_map_key_t
        {
            [FieldOffset(0)]
            public ecs_map_data_t Data;

            public static implicit operator ecs_map_data_t(ecs_map_key_t data) => data.Data;
            public static implicit operator ecs_map_key_t(ecs_map_data_t data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_map_val_t
        {
            [FieldOffset(0)]
            public ecs_map_data_t Data;

            public static implicit operator ecs_map_data_t(ecs_map_val_t data) => data.Data;
            public static implicit operator ecs_map_val_t(ecs_map_data_t data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_meta_serialize_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_serializer_tPtr_VoidPtr_Int Data;

            public static implicit operator FnPtr_Ecs_serializer_tPtr_VoidPtr_Int(ecs_meta_serialize_t data) => data.Data;
            public static implicit operator ecs_meta_serialize_t(FnPtr_Ecs_serializer_tPtr_VoidPtr_Int data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_module_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_world_tPtr_Void Data;

            public static implicit operator FnPtr_Ecs_world_tPtr_Void(ecs_module_action_t data) => data.Data;
            public static implicit operator ecs_module_action_t(FnPtr_Ecs_world_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_move_t
        {
            [FieldOffset(0)]
            public FnPtr_VoidPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void Data;

            public static implicit operator FnPtr_VoidPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void(ecs_move_t data) => data.Data;
            public static implicit operator ecs_move_t(FnPtr_VoidPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_order_by_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_entity_t_VoidPtr_Ecs_entity_t_VoidPtr_Int Data;

            public static implicit operator FnPtr_Ecs_entity_t_VoidPtr_Ecs_entity_t_VoidPtr_Int(ecs_order_by_action_t data) => data.Data;
            public static implicit operator ecs_order_by_action_t(FnPtr_Ecs_entity_t_VoidPtr_Ecs_entity_t_VoidPtr_Int data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_abort_t
        {
            [FieldOffset(0)]
            public FnPtr_Void Data;

            public static implicit operator FnPtr_Void(ecs_os_api_abort_t data) => data.Data;
            public static implicit operator ecs_os_api_abort_t(FnPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_ainc_t
        {
            [FieldOffset(0)]
            public FnPtr_IntPtr_Int Data;

            public static implicit operator FnPtr_IntPtr_Int(ecs_os_api_ainc_t data) => data.Data;
            public static implicit operator ecs_os_api_ainc_t(FnPtr_IntPtr_Int data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_calloc_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_size_t_VoidPtr Data;

            public static implicit operator FnPtr_Ecs_size_t_VoidPtr(ecs_os_api_calloc_t data) => data.Data;
            public static implicit operator ecs_os_api_calloc_t(FnPtr_Ecs_size_t_VoidPtr data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_cond_broadcast_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_cond_t_Void Data;

            public static implicit operator FnPtr_Ecs_os_cond_t_Void(ecs_os_api_cond_broadcast_t data) => data.Data;
            public static implicit operator ecs_os_api_cond_broadcast_t(FnPtr_Ecs_os_cond_t_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_cond_free_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_cond_t_Void Data;

            public static implicit operator FnPtr_Ecs_os_cond_t_Void(ecs_os_api_cond_free_t data) => data.Data;
            public static implicit operator ecs_os_api_cond_free_t(FnPtr_Ecs_os_cond_t_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_cond_new_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_cond_t Data;

            public static implicit operator FnPtr_Ecs_os_cond_t(ecs_os_api_cond_new_t data) => data.Data;
            public static implicit operator ecs_os_api_cond_new_t(FnPtr_Ecs_os_cond_t data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_cond_signal_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_cond_t_Void Data;

            public static implicit operator FnPtr_Ecs_os_cond_t_Void(ecs_os_api_cond_signal_t data) => data.Data;
            public static implicit operator ecs_os_api_cond_signal_t(FnPtr_Ecs_os_cond_t_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_cond_wait_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_cond_t_Ecs_os_mutex_t_Void Data;

            public static implicit operator FnPtr_Ecs_os_cond_t_Ecs_os_mutex_t_Void(ecs_os_api_cond_wait_t data) => data.Data;
            public static implicit operator ecs_os_api_cond_wait_t(FnPtr_Ecs_os_cond_t_Ecs_os_mutex_t_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_dlclose_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_dl_t_Void Data;

            public static implicit operator FnPtr_Ecs_os_dl_t_Void(ecs_os_api_dlclose_t data) => data.Data;
            public static implicit operator ecs_os_api_dlclose_t(FnPtr_Ecs_os_dl_t_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_dlopen_t
        {
            [FieldOffset(0)]
            public FnPtr_CString_Ecs_os_dl_t Data;

            public static implicit operator FnPtr_CString_Ecs_os_dl_t(ecs_os_api_dlopen_t data) => data.Data;
            public static implicit operator ecs_os_api_dlopen_t(FnPtr_CString_Ecs_os_dl_t data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_dlproc_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_dl_t_CString_Ecs_os_proc_t Data;

            public static implicit operator FnPtr_Ecs_os_dl_t_CString_Ecs_os_proc_t(ecs_os_api_dlproc_t data) => data.Data;
            public static implicit operator ecs_os_api_dlproc_t(FnPtr_Ecs_os_dl_t_CString_Ecs_os_proc_t data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_fini_t
        {
            [FieldOffset(0)]
            public FnPtr_Void Data;

            public static implicit operator FnPtr_Void(ecs_os_api_fini_t data) => data.Data;
            public static implicit operator ecs_os_api_fini_t(FnPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_free_t
        {
            [FieldOffset(0)]
            public FnPtr_VoidPtr_Void Data;

            public static implicit operator FnPtr_VoidPtr_Void(ecs_os_api_free_t data) => data.Data;
            public static implicit operator ecs_os_api_free_t(FnPtr_VoidPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_get_time_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_time_tPtr_Void Data;

            public static implicit operator FnPtr_Ecs_time_tPtr_Void(ecs_os_api_get_time_t data) => data.Data;
            public static implicit operator ecs_os_api_get_time_t(FnPtr_Ecs_time_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_init_t
        {
            [FieldOffset(0)]
            public FnPtr_Void Data;

            public static implicit operator FnPtr_Void(ecs_os_api_init_t data) => data.Data;
            public static implicit operator ecs_os_api_init_t(FnPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_lainc_t
        {
            [FieldOffset(0)]
            public FnPtr_LongPtr_Long Data;

            public static implicit operator FnPtr_LongPtr_Long(ecs_os_api_lainc_t data) => data.Data;
            public static implicit operator ecs_os_api_lainc_t(FnPtr_LongPtr_Long data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_log_t
        {
            [FieldOffset(0)]
            public FnPtr_Int_CString_Int_CString_Void Data;

            public static implicit operator FnPtr_Int_CString_Int_CString_Void(ecs_os_api_log_t data) => data.Data;
            public static implicit operator ecs_os_api_log_t(FnPtr_Int_CString_Int_CString_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_malloc_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_size_t_VoidPtr Data;

            public static implicit operator FnPtr_Ecs_size_t_VoidPtr(ecs_os_api_malloc_t data) => data.Data;
            public static implicit operator ecs_os_api_malloc_t(FnPtr_Ecs_size_t_VoidPtr data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_module_to_path_t
        {
            [FieldOffset(0)]
            public FnPtr_CString_CString Data;

            public static implicit operator FnPtr_CString_CString(ecs_os_api_module_to_path_t data) => data.Data;
            public static implicit operator ecs_os_api_module_to_path_t(FnPtr_CString_CString data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_mutex_free_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_mutex_t_Void Data;

            public static implicit operator FnPtr_Ecs_os_mutex_t_Void(ecs_os_api_mutex_free_t data) => data.Data;
            public static implicit operator ecs_os_api_mutex_free_t(FnPtr_Ecs_os_mutex_t_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_mutex_lock_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_mutex_t_Void Data;

            public static implicit operator FnPtr_Ecs_os_mutex_t_Void(ecs_os_api_mutex_lock_t data) => data.Data;
            public static implicit operator ecs_os_api_mutex_lock_t(FnPtr_Ecs_os_mutex_t_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_mutex_new_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_mutex_t Data;

            public static implicit operator FnPtr_Ecs_os_mutex_t(ecs_os_api_mutex_new_t data) => data.Data;
            public static implicit operator ecs_os_api_mutex_new_t(FnPtr_Ecs_os_mutex_t data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_now_t
        {
            [FieldOffset(0)]
            public FnPtr_Ulong Data;

            public static implicit operator FnPtr_Ulong(ecs_os_api_now_t data) => data.Data;
            public static implicit operator ecs_os_api_now_t(FnPtr_Ulong data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_realloc_t
        {
            [FieldOffset(0)]
            public FnPtr_VoidPtr_Ecs_size_t_VoidPtr Data;

            public static implicit operator FnPtr_VoidPtr_Ecs_size_t_VoidPtr(ecs_os_api_realloc_t data) => data.Data;
            public static implicit operator ecs_os_api_realloc_t(FnPtr_VoidPtr_Ecs_size_t_VoidPtr data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_sleep_t
        {
            [FieldOffset(0)]
            public FnPtr_Int_Int_Void Data;

            public static implicit operator FnPtr_Int_Int_Void(ecs_os_api_sleep_t data) => data.Data;
            public static implicit operator ecs_os_api_sleep_t(FnPtr_Int_Int_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_strdup_t
        {
            [FieldOffset(0)]
            public FnPtr_CString_CString Data;

            public static implicit operator FnPtr_CString_CString(ecs_os_api_strdup_t data) => data.Data;
            public static implicit operator ecs_os_api_strdup_t(FnPtr_CString_CString data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_thread_join_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_thread_t_VoidPtr Data;

            public static implicit operator FnPtr_Ecs_os_thread_t_VoidPtr(ecs_os_api_thread_join_t data) => data.Data;
            public static implicit operator ecs_os_api_thread_join_t(FnPtr_Ecs_os_thread_t_VoidPtr data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_thread_new_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_thread_callback_t_VoidPtr_Ecs_os_thread_t Data;

            public static implicit operator FnPtr_Ecs_os_thread_callback_t_VoidPtr_Ecs_os_thread_t(ecs_os_api_thread_new_t data) => data.Data;
            public static implicit operator ecs_os_api_thread_new_t(FnPtr_Ecs_os_thread_callback_t_VoidPtr_Ecs_os_thread_t data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_api_thread_self_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_os_thread_id_t Data;

            public static implicit operator FnPtr_Ecs_os_thread_id_t(ecs_os_api_thread_self_t data) => data.Data;
            public static implicit operator ecs_os_api_thread_self_t(FnPtr_Ecs_os_thread_id_t data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_cond_t
        {
            [FieldOffset(0)]
            public UIntPtr Data;

            public static implicit operator UIntPtr(ecs_os_cond_t data) => data.Data;
            public static implicit operator ecs_os_cond_t(UIntPtr data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_dl_t
        {
            [FieldOffset(0)]
            public UIntPtr Data;

            public static implicit operator UIntPtr(ecs_os_dl_t data) => data.Data;
            public static implicit operator ecs_os_dl_t(UIntPtr data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_mutex_t
        {
            [FieldOffset(0)]
            public UIntPtr Data;

            public static implicit operator UIntPtr(ecs_os_mutex_t data) => data.Data;
            public static implicit operator ecs_os_mutex_t(UIntPtr data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_proc_t
        {
            [FieldOffset(0)]
            public FnPtr_Void Data;

            public static implicit operator FnPtr_Void(ecs_os_proc_t data) => data.Data;
            public static implicit operator ecs_os_proc_t(FnPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_thread_callback_t
        {
            [FieldOffset(0)]
            public FnPtr_VoidPtr_VoidPtr Data;

            public static implicit operator FnPtr_VoidPtr_VoidPtr(ecs_os_thread_callback_t data) => data.Data;
            public static implicit operator ecs_os_thread_callback_t(FnPtr_VoidPtr_VoidPtr data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_thread_id_t
        {
            [FieldOffset(0)]
            public ulong Data;

            public static implicit operator ulong(ecs_os_thread_id_t data) => data.Data;
            public static implicit operator ecs_os_thread_id_t(ulong data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_thread_t
        {
            [FieldOffset(0)]
            public UIntPtr Data;

            public static implicit operator UIntPtr(ecs_os_thread_t data) => data.Data;
            public static implicit operator ecs_os_thread_t(UIntPtr data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_poly_dtor_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_poly_tPtr_Void Data;

            public static implicit operator FnPtr_Ecs_poly_tPtr_Void(ecs_poly_dtor_t data) => data.Data;
            public static implicit operator ecs_poly_dtor_t(FnPtr_Ecs_poly_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_run_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_iter_tPtr_Void Data;

            public static implicit operator FnPtr_Ecs_iter_tPtr_Void(ecs_run_action_t data) => data.Data;
            public static implicit operator ecs_run_action_t(FnPtr_Ecs_iter_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ecs_size_t
        {
            [FieldOffset(0)]
            public int Data;

            public static implicit operator int(ecs_size_t data) => data.Data;
            public static implicit operator ecs_size_t(int data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_sort_table_action_t
        {
            [FieldOffset(0)]
            public FnPtr_Ecs_world_tPtr_Ecs_table_tPtr_Ecs_entity_tPtr_VoidPtr_Int_Int_Int_Ecs_order_by_action_t_Void Data;

            public static implicit operator FnPtr_Ecs_world_tPtr_Ecs_table_tPtr_Ecs_entity_tPtr_VoidPtr_Int_Int_Int_Ecs_order_by_action_t_Void(ecs_sort_table_action_t data) => data.Data;
            public static implicit operator ecs_sort_table_action_t(FnPtr_Ecs_world_tPtr_Ecs_table_tPtr_Ecs_entity_tPtr_VoidPtr_Int_Int_Int_Ecs_order_by_action_t_Void data) => new() { Data = data };
        }

        [CNode(Kind = "TypeAlias")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_xtor_t
        {
            [FieldOffset(0)]
            public FnPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void Data;

            public static implicit operator FnPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void(ecs_xtor_t data) => data.Data;
            public static implicit operator ecs_xtor_t(FnPtr_VoidPtr_Int_Ecs_type_info_tPtr_Void data) => new() { Data = data };
        }

        [CNode(Kind = "MacroObject")]
        public const int ECS_ACCESS_VIOLATION = 40;

        [CNode(Kind = "MacroObject")]
        public const int ECS_ALREADY_DEFINED = 8;

        [CNode(Kind = "MacroObject")]
        public const int ECS_ALREADY_IN_USE = 30;

        [CNode(Kind = "MacroObject")]
        public static string ECS_BLACK = "[1;30m";

        [CNode(Kind = "MacroObject")]
        public static string ECS_BLUE = "[0;34m";

        [CNode(Kind = "MacroObject")]
        public static string ECS_BOLD = "[1;49m";

        [CNode(Kind = "MacroObject")]
        public const int ECS_COLUMN_INDEX_OUT_OF_RANGE = 41;

        [CNode(Kind = "MacroObject")]
        public const int ECS_COLUMN_IS_NOT_SHARED = 42;

        [CNode(Kind = "MacroObject")]
        public const int ECS_COLUMN_IS_SHARED = 43;

        [CNode(Kind = "MacroObject")]
        public const int ECS_COLUMN_TYPE_MISMATCH = 45;

        [CNode(Kind = "MacroObject")]
        public const ulong ECS_COMPONENT_MASK = 1152921504606846975;

        [CNode(Kind = "MacroObject")]
        public const int ECS_COMPONENT_NOT_REGISTERED = 25;

        [CNode(Kind = "MacroObject")]
        public const int ECS_CONSTRAINT_VIOLATED = 3;

        [CNode(Kind = "MacroObject")]
        public const int ECS_COUNT_MAX = 64;

        [CNode(Kind = "MacroObject")]
        public static string ECS_CYAN = "[0;36m";

        [CNode(Kind = "MacroObject")]
        public const int ECS_CYCLE_DETECTED = 13;

        [CNode(Kind = "MacroObject")]
        public const ulong ECS_ENTITY_MASK = 4294967295;

        [CNode(Kind = "MacroObject")]
        public const ulong ECS_FUNC_NAME_BACK = 1;

        [CNode(Kind = "MacroObject")]
        public const ulong ECS_GENERATION_MASK = 281470681743360;

        [CNode(Kind = "MacroObject")]
        public static string ECS_GREEN = "[0;32m";

        [CNode(Kind = "MacroObject")]
        public static string ECS_GREY = "[0;37m";

        [CNode(Kind = "MacroObject")]
        public const int ECS_HTTP_HEADER_COUNT_MAX = 32;

        [CNode(Kind = "MacroObject")]
        public const int ECS_HTTP_QUERY_PARAM_COUNT_MAX = 32;

        [CNode(Kind = "MacroObject")]
        public const int ECS_ID_CACHE_SIZE = 32;

        [CNode(Kind = "MacroObject")]
        public const ulong ECS_ID_FLAGS_MASK = 17293822569102704640;

        [CNode(Kind = "MacroObject")]
        public const ulong ECS_ID_FLAG_BIT = 9223372036854775808;

        [CNode(Kind = "MacroObject")]
        public const int ECS_ID_IN_USE = 12;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INCONSISTENT_COMPONENT_ACTION = 27;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INCONSISTENT_COMPONENT_ID = 26;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INCONSISTENT_NAME = 20;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INTERNAL_ERROR = 7;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INVALID_COMPONENT_ALIGNMENT = 24;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INVALID_COMPONENT_SIZE = 23;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INVALID_CONVERSION = 11;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INVALID_FROM_WORKER = 72;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INVALID_OPERATION = 1;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INVALID_PARAMETER = 2;

        [CNode(Kind = "MacroObject")]
        public const int ECS_INVALID_WHILE_READONLY = 70;

        [CNode(Kind = "MacroObject")]
        public const int ECS_LEAK_DETECTED = 14;

        [CNode(Kind = "MacroObject")]
        public const int ECS_LOCKED_STORAGE = 71;

        [CNode(Kind = "MacroObject")]
        public static string ECS_MAGENTA = "[0;35m";

        [CNode(Kind = "MacroObject")]
        public static uint ECS_MAX_COMPONENT_ID = 268435455;

        [CNode(Kind = "MacroObject")]
        public const int ECS_MAX_RECURSION = 512;

        [CNode(Kind = "MacroObject")]
        public const int ECS_MAX_TOKEN_SIZE = 256;

        [CNode(Kind = "MacroObject")]
        public const int ECS_MEMBER_DESC_CACHE_SIZE = 32;

        [CNode(Kind = "MacroObject")]
        public const int ECS_META_MAX_SCOPE_DEPTH = 32;

        [CNode(Kind = "MacroObject")]
        public const int ECS_MISSING_OS_API = 9;

        [CNode(Kind = "MacroObject")]
        public const int ECS_MISSING_SYMBOL = 29;

        [CNode(Kind = "MacroObject")]
        public const int ECS_MODULE_UNDEFINED = 28;

        [CNode(Kind = "MacroObject")]
        public const int ECS_NAME_IN_USE = 21;

        [CNode(Kind = "MacroObject")]
        public static string ECS_NORMAL = "[0;49m";

        [CNode(Kind = "MacroObject")]
        public const int ECS_NOT_A_COMPONENT = 22;

        [CNode(Kind = "MacroObject")]
        public const int ECS_OBSERVER_DESC_EVENT_COUNT_MAX = 8;

        [CNode(Kind = "MacroObject")]
        public const int ECS_OPERATION_FAILED = 10;

        [CNode(Kind = "MacroObject")]
        public const int ECS_OUT_OF_MEMORY = 4;

        [CNode(Kind = "MacroObject")]
        public const int ECS_OUT_OF_RANGE = 5;

        [CNode(Kind = "MacroObject")]
        public static string ECS_RED = "[0;31m";

        [CNode(Kind = "MacroObject")]
        public const int ECS_REST_DEFAULT_PORT = 27750;

        [CNode(Kind = "MacroObject")]
        public const uint ECS_ROW_FLAGS_MASK = 4026531840;

        [CNode(Kind = "MacroObject")]
        public const uint ECS_ROW_MASK = 268435455;

        [CNode(Kind = "MacroObject")]
        public const int ECS_STAT_WINDOW = 60;

        [CNode(Kind = "MacroObject")]
        public const int ECS_STRBUF_ELEMENT_SIZE = 511;

        [CNode(Kind = "MacroObject")]
        public const int ECS_STRBUF_MAX_LIST_DEPTH = 32;

        [CNode(Kind = "MacroObject")]
        public const int ECS_TERM_DESC_CACHE_SIZE = 16;

        [CNode(Kind = "MacroObject")]
        public const int ECS_UNSUPPORTED = 6;

        [CNode(Kind = "MacroObject")]
        public static string ECS_WHITE = "[1;37m";

        [CNode(Kind = "MacroObject")]
        public static string ECS_YELLOW = "[0;33m";

        [CNode(Kind = "MacroObject")]
        public const uint EcsAperiodicComponentMonitors = 4;

        [CNode(Kind = "MacroObject")]
        public const uint EcsAperiodicEmptyQueries = 16;

        [CNode(Kind = "MacroObject")]
        public const uint EcsAperiodicEmptyTables = 2;

        [CNode(Kind = "MacroObject")]
        public const uint EcsCascade = 32;

        [CNode(Kind = "MacroObject")]
        public const uint EcsDown = 8;

        [CNode(Kind = "MacroObject")]
        public const uint EcsEntityIsId = 2147483648;

        [CNode(Kind = "MacroObject")]
        public const uint EcsEntityIsTarget = 1073741824;

        [CNode(Kind = "MacroObject")]
        public const uint EcsEntityIsTraversable = 536870912;

        [CNode(Kind = "MacroObject")]
        public const uint EcsEventNoOnSet = 65536;

        [CNode(Kind = "MacroObject")]
        public const uint EcsEventTableOnly = 256;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilter = 1024;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterHasCondSet = 1024;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterIsInstanced = 256;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterMatchAnything = 64;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterMatchDisabled = 16;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterMatchEmptyTables = 32;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterMatchOnlyThis = 4;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterMatchPrefab = 8;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterMatchThis = 2;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterNoData = 128;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterPopulate = 512;

        [CNode(Kind = "MacroObject")]
        public const uint EcsFilterUnresolvedByName = 2048;

        [CNode(Kind = "MacroObject")]
        public const int EcsFirstUserComponentId = 8;

        [CNode(Kind = "MacroObject")]
        public const int EcsFirstUserEntityId = 384;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdAlwaysOverride = 4096;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdDontInherit = 128;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdEventMask = 491520;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdExclusive = 64;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdHasOnAdd = 32768;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdHasOnRemove = 65536;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdHasOnSet = 131072;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdHasUnSet = 262144;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdMarkedForDelete = 1073741824;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdOnDeleteDelete = 2;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdOnDeleteMask = 7;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdOnDeleteObjectDelete = 16;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdOnDeleteObjectMask = 56;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdOnDeleteObjectPanic = 32;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdOnDeleteObjectRemove = 8;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdOnDeletePanic = 4;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdOnDeleteRemove = 1;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdTag = 512;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdTraversable = 256;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdUnion = 2048;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIdWith = 1024;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIsEntity = 256;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIsName = 512;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIsVariable = 128;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterEntityOptional = 32;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterHasCondSet = 1024;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterHasShared = 8;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterIgnoreThis = 128;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterIsInstanced = 4;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterIsValid = 1;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterMatchVar = 256;

        [CNode(Kind = "MacroObject")]
        public const int EcsIterNext = 1;

        [CNode(Kind = "MacroObject")]
        public const int EcsIterNextYield = 0;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterNoData = 2;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterNoResults = 64;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterProfile = 2048;

        [CNode(Kind = "MacroObject")]
        public const uint EcsIterTableOnly = 16;

        [CNode(Kind = "MacroObject")]
        public const int EcsIterYield = -1;

        [CNode(Kind = "MacroObject")]
        public const uint EcsOsApiHighResolutionTimer = 1;

        [CNode(Kind = "MacroObject")]
        public const uint EcsOsApiLogWithColors = 2;

        [CNode(Kind = "MacroObject")]
        public const uint EcsOsApiLogWithTimeDelta = 8;

        [CNode(Kind = "MacroObject")]
        public const uint EcsOsApiLogWithTimeStamp = 4;

        [CNode(Kind = "MacroObject")]
        public const uint EcsParent = 64;

        [CNode(Kind = "MacroObject")]
        public const uint EcsQueryHasMonitor = 32;

        [CNode(Kind = "MacroObject")]
        public const uint EcsQueryHasOutColumns = 16;

        [CNode(Kind = "MacroObject")]
        public const uint EcsQueryHasRefs = 2;

        [CNode(Kind = "MacroObject")]
        public const uint EcsQueryIsOrphaned = 8;

        [CNode(Kind = "MacroObject")]
        public const uint EcsQueryIsSubquery = 4;

        [CNode(Kind = "MacroObject")]
        public const uint EcsQueryTrivialIter = 64;

        [CNode(Kind = "MacroObject")]
        public const uint EcsSelf = 2;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasAddActions = 168200;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasBuiltins = 2;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasChildOf = 16;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasCopy = 1024;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasCtors = 256;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasDtors = 512;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasIsA = 8;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasLifecycle = 768;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasModule = 64;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasMove = 2048;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasObserved = 1048576;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasOnAdd = 32768;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasOnRemove = 65536;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasOnSet = 131072;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasOverrides = 16384;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasPairs = 32;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasRemoveActions = 328200;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasTarget = 2097152;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasToggle = 8192;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasUnSet = 262144;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableHasUnion = 4096;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableIsComplex = 13056;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableIsDisabled = 128;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableIsPrefab = 4;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTableMarkedForDelete = 1073741824;

        [CNode(Kind = "MacroObject")]
        public const int EcsTermIdInherited = 64;

        [CNode(Kind = "MacroObject")]
        public const int EcsTermMatchAny = 1;

        [CNode(Kind = "MacroObject")]
        public const int EcsTermMatchAnySrc = 2;

        [CNode(Kind = "MacroObject")]
        public const int EcsTermReflexive = 32;

        [CNode(Kind = "MacroObject")]
        public const int EcsTermSrcFirstEq = 4;

        [CNode(Kind = "MacroObject")]
        public const int EcsTermSrcSecondEq = 8;

        [CNode(Kind = "MacroObject")]
        public const int EcsTermTransitive = 16;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTraverseAll = 16;

        [CNode(Kind = "MacroObject")]
        public const uint EcsTraverseFlags = 126;

        [CNode(Kind = "MacroObject")]
        public const uint EcsUp = 4;

        [CNode(Kind = "MacroObject")]
        public const uint EcsWorldFini = 16;

        [CNode(Kind = "MacroObject")]
        public const uint EcsWorldInit = 4;

        [CNode(Kind = "MacroObject")]
        public const uint EcsWorldMeasureFrameTime = 32;

        [CNode(Kind = "MacroObject")]
        public const uint EcsWorldMeasureSystemTime = 64;

        [CNode(Kind = "MacroObject")]
        public const uint EcsWorldMultiThreaded = 128;

        [CNode(Kind = "MacroObject")]
        public const uint EcsWorldQuit = 8;

        [CNode(Kind = "MacroObject")]
        public const uint EcsWorldQuitWorkers = 1;

        [CNode(Kind = "MacroObject")]
        public const uint EcsWorldReadonly = 2;

        [CNode(Kind = "MacroObject")]
        public const int FLECS_HI_COMPONENT_ID = 256;

        [CNode(Kind = "MacroObject")]
        public const int FLECS_HI_ID_RECORD_ID = 1024;

        [CNode(Kind = "MacroObject")]
        public const int FLECS_SPARSE_PAGE_BITS = 12;

        [CNode(Kind = "MacroObject")]
        public const int FLECS_SPARSE_PAGE_SIZE = 4096;

        [CNode(Kind = "MacroObject")]
        public const int FLECS__E0 = 0;

        [CNode(Kind = "MacroObject")]
        public const int PINVOKE_TARGET_ENV_GNU = 0;

        [CNode(Kind = "MacroObject")]
        public const int PINVOKE_TARGET_ENV_MSVC = 1;

        [CNode(Kind = "MacroObject")]
        public static string PINVOKE_TARGET_NAME = "aarch64-pc-windows-msvc";

        [CNode(Kind = "MacroObject")]
        public const int PINVOKE_TARGET_OS_ANDROID = 0;

        [CNode(Kind = "MacroObject")]
        public const int PINVOKE_TARGET_OS_BROWSER = 0;

        [CNode(Kind = "MacroObject")]
        public const int PINVOKE_TARGET_OS_FREEBSD = 0;

        [CNode(Kind = "MacroObject")]
        public const int PINVOKE_TARGET_OS_LINUX = 0;

        [CNode(Kind = "MacroObject")]
        public const int PINVOKE_TARGET_OS_WINDOWS = 1;

        [CNode(Kind = "MacroObject")]
        public const int ecs_filter_t_magic = 1701016422;

        [CNode(Kind = "MacroObject")]
        public const int ecs_observer_t_magic = 1701016418;

        [CNode(Kind = "MacroObject")]
        public const int ecs_query_t_magic = 1701016433;

        [CNode(Kind = "MacroObject")]
        public const int ecs_rule_t_magic = 1701016437;

        [CNode(Kind = "MacroObject")]
        public const int ecs_stage_t_magic = 1701016435;

        [CNode(Kind = "MacroObject")]
        public const int ecs_table_t_magic = 1701016436;

        [CNode(Kind = "MacroObject")]
        public const int ecs_trigger_t_magic = 1701016434;

        [CNode(Kind = "MacroObject")]
        public const int ecs_world_t_magic = 1701016439;

        [CNode(Kind = "MacroObject")]
        public const int flecs_iter_cache_all = 255;

        [CNode(Kind = "MacroObject")]
        public const uint flecs_iter_cache_columns = 2;

        [CNode(Kind = "MacroObject")]
        public const uint flecs_iter_cache_ids = 1;

        [CNode(Kind = "MacroObject")]
        public const uint flecs_iter_cache_match_indices = 16;

        [CNode(Kind = "MacroObject")]
        public const uint flecs_iter_cache_ptrs = 8;

        [CNode(Kind = "MacroObject")]
        public const uint flecs_iter_cache_sources = 4;

        [CNode(Kind = "MacroObject")]
        public const uint flecs_iter_cache_variables = 32;

        #endregion

        #region Setup & Teardown

        public static void Setup()
        {
            PreCompile();
        }

        private static void PreCompile()
        {
            var methods = typeof(flecs).GetMethods(
                System.Reflection.BindingFlags.DeclaredOnly |
                System.Reflection.BindingFlags.NonPublic |
                System.Reflection.BindingFlags.Public |
                System.Reflection.BindingFlags.Instance |
                System.Reflection.BindingFlags.Static);

            foreach (var method in methods)
            {
                if (method.GetMethodBody() == null)
                {
                    RuntimeHelpers.PrepareMethod(method.MethodHandle);
                }
            }
        }

        public static void Teardown()
        {
        }

        #endregion

        #region Runtime

        public static class Runtime
        {
            [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.ReturnValue)]
            public sealed class CConstAttribute : Attribute
            {
                // marker
            }

            [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Enum | AttributeTargets.Field)]
            public sealed class CNodeAttribute : Attribute
            {
                public string Kind { get; set; } = string.Empty;
            }

            /// <summary>
            ///     A boolean value type with the same memory layout as a <see cref="byte" /> in both managed and unmanaged contexts;
            ///     equivalent to a standard bool found in C/C++/ObjC where <c>0</c> is <c>false</c> and any other value is
            ///     <c>true</c>.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CBool : IEquatable<CBool>
            {
                private readonly byte _value;

                private CBool(bool value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static implicit operator CBool(bool value)
                {
                    return FromBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static CBool FromBoolean(bool value)
                {
                    return new CBool(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static implicit operator bool(CBool value)
                {
                    return ToBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static bool ToBoolean(CBool value)
                {
                    return Convert.ToBoolean(value._value);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToBoolean(this).ToString();
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CBool b && Equals(b);
                }

                /// <inheritdoc />
                public bool Equals(CBool other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CBool left, CBool right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CBool left, CBool right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CBool left, CBool right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A value type with the same memory layout as a <see cref="byte" /> in a managed context and <c>char</c> in
            ///     an unmanaged context.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CChar : IEquatable<byte>, IEquatable<CChar>
            {
                private readonly byte _value;

                private CChar(byte value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static implicit operator CChar(byte value)
                {
                    return FromByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static CChar FromByte(byte value)
                {
                    return new CChar(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static implicit operator byte(CChar value)
                {
                    return ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static byte ToByte(CChar value)
                {
                    return value._value;
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return _value.ToString(CultureInfo.InvariantCulture);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CChar value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(byte other)
                {
                    return _value == other;
                }

                /// <inheritdoc />
                public bool Equals(CChar other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CChar left, CChar right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CChar left, CChar right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CChar left, CChar right)
                {
                    return left._value == right._value;
                }
            }

#pragma warning disable CS1591

            /// <summary>
            ///     Utility methods for dealing with native C libraries.
            /// </summary>
            public static class CLibrary
            {
                private static bool IsWindows
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsWindows();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
#else
                        false;
#endif
                }

                private static bool IsDarwin
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsMacOS() ||
            OperatingSystem.IsMacCatalyst() ||
            OperatingSystem.IsIOS() ||
            OperatingSystem.IsTvOS() ||
            OperatingSystem.IsWatchOS();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.OSX);
#else
                        false;
#endif
                }

                private static bool IsLinux
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsLinux() ||
            OperatingSystem.IsFreeBSD() ||
            OperatingSystem.IsAndroid();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.Linux);
#else
                        false;
#endif
                }

                /// <summary>
                ///     Loads a C shared library (`.dll`/`.dylib`/`.so`) into the application's memory space given the C
                ///     library's file name, partially qualified file path, or a fully qualified file path.
                /// </summary>
                /// <param name="name">The C library's file name, partially qualified file path, or a fully qualified file path.</param>
                /// <returns>A <see cref="IntPtr" /> handle if the C library was loaded; otherwise, a <see cref="IntPtr.Zero" /> handle.</returns>
                /// <remarks>
                ///     <para>
                ///         If the library was already loaded, calling <see cref="Load" /> returns the handle of the previous loaded
                ///         library and the reference count for the handle is incremented.
                ///     </para>
                ///     <para>You must call <see cref="Free" /> when finished using a handle of a dynamically loaded library.</para>
                /// </remarks>
                public static IntPtr Load(string name)
                {
                    if (IsLinux)
                    {
                        return libdl.dlopen(name, 0x101); // RTLD_GLOBAL | RTLD_LAZY
                    }

                    if (IsWindows)
                    {
                        return Kernel32.LoadLibrary(name);
                    }

                    if (IsDarwin)
                    {
                        return libSystem.dlopen(name, 0x101); // RTLD_GLOBAL | RTLD_LAZY
                    }

                    return IntPtr.Zero;
                }

                /// <summary>
                ///     Unloads a C shared library from the application's memory space given the library's handle.
                /// </summary>
                /// <param name="handle">The library's handle previously created by calling <see cref="Load" />.</param>
                /// <remarks>
                ///     <para>
                ///         If the library was loaded multiple times, the reference count for the handle is decremented upon calling
                ///         <see cref="Free" /> and the library is not yet unloaded from memory.
                ///     </para>
                /// </remarks>
                public static void Free(IntPtr handle)
                {
                    if (IsLinux)
                    {
                        libdl.dlclose(handle);
                    }

                    if (IsWindows)
                    {
                        Kernel32.FreeLibrary(handle);
                    }

                    if (IsDarwin)
                    {
                        libSystem.dlclose(handle);
                    }
                }

                public static IntPtr GetExport(IntPtr handle, string symbolName)
                {
                    if (IsLinux)
                    {
                        return libdl.dlsym(handle, symbolName);
                    }

                    if (IsWindows)
                    {
                        return Kernel32.GetProcAddress(handle, symbolName);
                    }

                    if (IsDarwin)
                    {
                        return libSystem.dlsym(handle, symbolName);
                    }

                    return IntPtr.Zero;
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
#pragma warning disable CS8981
                private static class libdl
#pragma warning restore CS8981
                {
                    private const string LibraryName = "libdl";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern IntPtr dlopen(string fileName, int flags);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern IntPtr dlsym(IntPtr handle, string name);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern int dlclose(IntPtr handle);
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
                private static class libSystem
                {
                    private const string LibraryName = "libSystem";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern IntPtr dlopen(string fileName, int flags);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern IntPtr dlsym(IntPtr handle, string name);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)] // silence CA5392
                    public static extern int dlclose(IntPtr handle);
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
                private static class Kernel32
                {
                    private const string LibraryName = "kernel32";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi,
                        ExactSpelling = true, SetLastError = true)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
                    public static extern IntPtr LoadLibrary(string fileName);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi,
                        ExactSpelling = true, SetLastError = true)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
                    public static extern IntPtr GetProcAddress(IntPtr module, string procName);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
                    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
                    public static extern int FreeLibrary(IntPtr module);
                }
            }

            /// <summary>
            ///     A pointer value type of bytes that represent a string; the C type `char*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CString : IEquatable<CString>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CString" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CString(string s)
                {
                    _pointer = FromString(s)._pointer;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static explicit operator CString(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromIntPtr(nint value)
                {
                    return new CString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString From(byte* value)
                {
                    return new CString((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static explicit operator string(CString value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Converts a C style string (ANSI or UTF-8) of type `char` (one dimensional byte array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string ToString(CString value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    var result = Marshal.PtrToStringAnsi(value._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    return result;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static explicit operator CString(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Converts a UTF-16 <see cref="string" /> to a C style string (one dimensional byte array terminated by a
                ///     <c>0x0</c>) by allocating and copying.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CString FromString(string str)
                {
                    var pointer = Marshal.StringToHGlobalAnsi(str);
                    return new CString(pointer);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToString(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CString value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CString other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CString left, CString right)
                {
                    return !(left == right);
                }
            }

            /// <summary>
            ///     Utility methods for interoperability with C style strings in C#.
            /// </summary>
            public static unsafe class CStrings
            {
                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `char` (multi-dimensional array of one
                ///     dimensional byte arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CString* CStringArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CString*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CString.FromString(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `wchar_t` (multi-dimensional array of one
                ///     dimensional ushort arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CStringWide* CStringWideArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CStringWide*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CStringWide.FromString(@string);
                        result[i] = cString;
                    }

                    return result;
                }
            }

            /// <summary>
            ///     A pointer value type that represents a wide string; C type `wchar_t*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CStringWide : IEquatable<CStringWide>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CStringWide" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CStringWide(string s)
                {
                    _pointer = FromString(s)._pointer;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static explicit operator CStringWide(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromIntPtr(nint value)
                {
                    return new CStringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide From(byte* value)
                {
                    return new CStringWide((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static explicit operator string(CStringWide value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Converts a C style string (unicode) of type `wchar_t` (one dimensional ushort array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string ToString(CStringWide value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    var result = Marshal.PtrToStringUni(value._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    return result;
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static explicit operator CStringWide(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Converts a C string pointer (one dimensional byte array terminated by a
                ///     <c>0x0</c>) for a specified <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CStringWide FromString(string str)
                {
                    var pointer = Marshal.StringToHGlobalUni(str);
                    return new CStringWide(pointer);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToString(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CStringWide value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CStringWide other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CStringWide left, CStringWide right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }
            }
        }

        #endregion
    }
}